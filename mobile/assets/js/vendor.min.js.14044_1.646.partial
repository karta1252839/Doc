/*!
 * jQuery JavaScript Library v2.2.4
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-05-20T17:23Z
 */
! function (a, b) {
	"object" == typeof module && "object" == typeof module.exports ? module.exports = a.document ? b(a, !0) : function (a) {
		if (!a.document) throw new Error("jQuery requires a window with a document");
		return b(a)
	} : b(a)
}("undefined" != typeof window ? window : this, function (a, b) {
	function c(a) {
		var b = !!a && "length" in a && a.length,
			c = fa.type(a);
		return "function" !== c && !fa.isWindow(a) && ("array" === c || 0 === b || "number" == typeof b && b > 0 && b - 1 in a)
	}

	function d(a, b, c) {
		if (fa.isFunction(b)) return fa.grep(a, function (a, d) {
			return !!b.call(a, d, a) !== c
		});
		if (b.nodeType) return fa.grep(a, function (a) {
			return a === b !== c
		});
		if ("string" == typeof b) {
			if (pa.test(b)) return fa.filter(b, a, c);
			b = fa.filter(b, a)
		}
		return fa.grep(a, function (a) {
			return _.call(b, a) > -1 !== c
		})
	}

	function e(a, b) {
		for (;
			(a = a[b]) && 1 !== a.nodeType;);
		return a
	}

	function f(a) {
		var b = {};
		return fa.each(a.match(va) || [], function (a, c) {
			b[c] = !0
		}), b
	}

	function g() {
		X.removeEventListener("DOMContentLoaded", g), a.removeEventListener("load", g), fa.ready()
	}

	function h() {
		this.expando = fa.expando + h.uid++
	}

	function i(a, b, c) {
		var d;
		if (void 0 === c && 1 === a.nodeType)
			if (d = "data-" + b.replace(Ca, "-$&").toLowerCase(), c = a.getAttribute(d), "string" == typeof c) {
				try {
					c = "true" === c || "false" !== c && ("null" === c ? null : +c + "" === c ? +c : Ba.test(c) ? fa.parseJSON(c) : c)
				} catch (a) {}
				Aa.set(a, b, c)
			} else c = void 0;
		return c
	}

	function j(a, b, c, d) {
		var e, f = 1,
			g = 20,
			h = d ? function () {
				return d.cur()
			} : function () {
				return fa.css(a, b, "")
			},
			i = h(),
			j = c && c[3] || (fa.cssNumber[b] ? "" : "px"),
			k = (fa.cssNumber[b] || "px" !== j && +i) && Ea.exec(fa.css(a, b));
		if (k && k[3] !== j) {
			j = j || k[3], c = c || [], k = +i || 1;
			do f = f || ".5", k /= f, fa.style(a, b, k + j); while (f !== (f = h() / i) && 1 !== f && --g)
		}
		return c && (k = +k || +i || 0, e = c[1] ? k + (c[1] + 1) * c[2] : +c[2], d && (d.unit = j, d.start = k, d.end = e)), e
	}

	function k(a, b) {
		var c = "undefined" != typeof a.getElementsByTagName ? a.getElementsByTagName(b || "*") : "undefined" != typeof a.querySelectorAll ? a.querySelectorAll(b || "*") : [];
		return void 0 === b || b && fa.nodeName(a, b) ? fa.merge([a], c) : c
	}

	function l(a, b) {
		for (var c = 0, d = a.length; c < d; c++) za.set(a[c], "globalEval", !b || za.get(b[c], "globalEval"))
	}

	function m(a, b, c, d, e) {
		for (var f, g, h, i, j, m, n = b.createDocumentFragment(), o = [], p = 0, q = a.length; p < q; p++)
			if (f = a[p], f || 0 === f)
				if ("object" === fa.type(f)) fa.merge(o, f.nodeType ? [f] : f);
				else if (La.test(f)) {
			for (g = g || n.appendChild(b.createElement("div")), h = (Ia.exec(f) || ["", ""])[1].toLowerCase(), i = Ka[h] || Ka._default, g.innerHTML = i[1] + fa.htmlPrefilter(f) + i[2], m = i[0]; m--;) g = g.lastChild;
			fa.merge(o, g.childNodes), g = n.firstChild, g.textContent = ""
		} else o.push(b.createTextNode(f));
		for (n.textContent = "", p = 0; f = o[p++];)
			if (d && fa.inArray(f, d) > -1) e && e.push(f);
			else if (j = fa.contains(f.ownerDocument, f), g = k(n.appendChild(f), "script"), j && l(g), c)
			for (m = 0; f = g[m++];) Ja.test(f.type || "") && c.push(f);
		return n
	}

	function n() {
		return !0
	}

	function o() {
		return !1
	}

	function p() {
		try {
			return X.activeElement
		} catch (a) {}
	}

	function q(a, b, c, d, e, f) {
		var g, h;
		if ("object" == typeof b) {
			"string" != typeof c && (d = d || c, c = void 0);
			for (h in b) q(a, h, c, d, b[h], f);
			return a
		}
		if (null == d && null == e ? (e = c, d = c = void 0) : null == e && ("string" == typeof c ? (e = d, d = void 0) : (e = d, d = c, c = void 0)), e === !1) e = o;
		else if (!e) return a;
		return 1 === f && (g = e, e = function (a) {
			return fa().off(a), g.apply(this, arguments)
		}, e.guid = g.guid || (g.guid = fa.guid++)), a.each(function () {
			fa.event.add(this, b, e, d, c)
		})
	}

	function r(a, b) {
		return fa.nodeName(a, "table") && fa.nodeName(11 !== b.nodeType ? b : b.firstChild, "tr") ? a.getElementsByTagName("tbody")[0] || a.appendChild(a.ownerDocument.createElement("tbody")) : a
	}

	function s(a) {
		return a.type = (null !== a.getAttribute("type")) + "/" + a.type, a
	}

	function t(a) {
		var b = Sa.exec(a.type);
		return b ? a.type = b[1] : a.removeAttribute("type"), a
	}

	function u(a, b) {
		var c, d, e, f, g, h, i, j;
		if (1 === b.nodeType) {
			if (za.hasData(a) && (f = za.access(a), g = za.set(b, f), j = f.events)) {
				delete g.handle, g.events = {};
				for (e in j)
					for (c = 0, d = j[e].length; c < d; c++) fa.event.add(b, e, j[e][c])
			}
			Aa.hasData(a) && (h = Aa.access(a), i = fa.extend({}, h), Aa.set(b, i))
		}
	}

	function v(a, b) {
		var c = b.nodeName.toLowerCase();
		"input" === c && Ha.test(a.type) ? b.checked = a.checked : "input" !== c && "textarea" !== c || (b.defaultValue = a.defaultValue)
	}

	function w(a, b, c, d) {
		b = Z.apply([], b);
		var e, f, g, h, i, j, l = 0,
			n = a.length,
			o = n - 1,
			p = b[0],
			q = fa.isFunction(p);
		if (q || n > 1 && "string" == typeof p && !da.checkClone && Ra.test(p)) return a.each(function (e) {
			var f = a.eq(e);
			q && (b[0] = p.call(this, e, f.html())), w(f, b, c, d)
		});
		if (n && (e = m(b, a[0].ownerDocument, !1, a, d), f = e.firstChild, 1 === e.childNodes.length && (e = f), f || d)) {
			for (g = fa.map(k(e, "script"), s), h = g.length; l < n; l++) i = e, l !== o && (i = fa.clone(i, !0, !0), h && fa.merge(g, k(i, "script"))), c.call(a[l], i, l);
			if (h)
				for (j = g[g.length - 1].ownerDocument, fa.map(g, t), l = 0; l < h; l++) i = g[l], Ja.test(i.type || "") && !za.access(i, "globalEval") && fa.contains(j, i) && (i.src ? fa._evalUrl && fa._evalUrl(i.src) : fa.globalEval(i.textContent.replace(Ta, "")))
		}
		return a
	}

	function x(a, b, c) {
		for (var d, e = b ? fa.filter(b, a) : a, f = 0; null != (d = e[f]); f++) c || 1 !== d.nodeType || fa.cleanData(k(d)), d.parentNode && (c && fa.contains(d.ownerDocument, d) && l(k(d, "script")), d.parentNode.removeChild(d));
		return a
	}

	function y(a, b) {
		var c = fa(b.createElement(a)).appendTo(b.body),
			d = fa.css(c[0], "display");
		return c.detach(), d
	}

	function z(a) {
		var b = X,
			c = Va[a];
		return c || (c = y(a, b), "none" !== c && c || (Ua = (Ua || fa("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement), b = Ua[0].contentDocument, b.write(), b.close(), c = y(a, b), Ua.detach()), Va[a] = c), c
	}

	function A(a, b, c) {
		var d, e, f, g, h = a.style;
		return c = c || Ya(a), g = c ? c.getPropertyValue(b) || c[b] : void 0, "" !== g && void 0 !== g || fa.contains(a.ownerDocument, a) || (g = fa.style(a, b)), c && !da.pixelMarginRight() && Xa.test(g) && Wa.test(b) && (d = h.width, e = h.minWidth, f = h.maxWidth, h.minWidth = h.maxWidth = h.width = g, g = c.width, h.width = d, h.minWidth = e, h.maxWidth = f), void 0 !== g ? g + "" : g
	}

	function B(a, b) {
		return {
			get: function () {
				return a() ? void delete this.get : (this.get = b).apply(this, arguments)
			}
		}
	}

	function C(a) {
		if (a in db) return a;
		for (var b = a[0].toUpperCase() + a.slice(1), c = cb.length; c--;)
			if (a = cb[c] + b, a in db) return a
	}

	function D(a, b, c) {
		var d = Ea.exec(b);
		return d ? Math.max(0, d[2] - (c || 0)) + (d[3] || "px") : b
	}

	function E(a, b, c, d, e) {
		for (var f = c === (d ? "border" : "content") ? 4 : "width" === b ? 1 : 0, g = 0; f < 4; f += 2) "margin" === c && (g += fa.css(a, c + Fa[f], !0, e)), d ? ("content" === c && (g -= fa.css(a, "padding" + Fa[f], !0, e)), "margin" !== c && (g -= fa.css(a, "border" + Fa[f] + "Width", !0, e))) : (g += fa.css(a, "padding" + Fa[f], !0, e), "padding" !== c && (g += fa.css(a, "border" + Fa[f] + "Width", !0, e)));
		return g
	}

	function F(a, b, c) {
		var d = !0,
			e = "width" === b ? a.offsetWidth : a.offsetHeight,
			f = Ya(a),
			g = "border-box" === fa.css(a, "boxSizing", !1, f);
		if (e <= 0 || null == e) {
			if (e = A(a, b, f), (e < 0 || null == e) && (e = a.style[b]), Xa.test(e)) return e;
			d = g && (da.boxSizingReliable() || e === a.style[b]), e = parseFloat(e) || 0
		}
		return e + E(a, b, c || (g ? "border" : "content"), d, f) + "px"
	}

	function G(a, b) {
		for (var c, d, e, f = [], g = 0, h = a.length; g < h; g++) d = a[g], d.style && (f[g] = za.get(d, "olddisplay"), c = d.style.display, b ? (f[g] || "none" !== c || (d.style.display = ""), "" === d.style.display && Ga(d) && (f[g] = za.access(d, "olddisplay", z(d.nodeName)))) : (e = Ga(d), "none" === c && e || za.set(d, "olddisplay", e ? c : fa.css(d, "display"))));
		for (g = 0; g < h; g++) d = a[g], d.style && (b && "none" !== d.style.display && "" !== d.style.display || (d.style.display = b ? f[g] || "" : "none"));
		return a
	}

	function H(a, b, c, d, e) {
		return new H.prototype.init(a, b, c, d, e)
	}

	function I() {
		return a.setTimeout(function () {
			eb = void 0
		}), eb = fa.now()
	}

	function J(a, b) {
		var c, d = 0,
			e = {
				height: a
			};
		for (b = b ? 1 : 0; d < 4; d += 2 - b) c = Fa[d], e["margin" + c] = e["padding" + c] = a;
		return b && (e.opacity = e.width = a), e
	}

	function K(a, b, c) {
		for (var d, e = (N.tweeners[b] || []).concat(N.tweeners["*"]), f = 0, g = e.length; f < g; f++)
			if (d = e[f].call(c, b, a)) return d
	}

	function L(a, b, c) {
		var d, e, f, g, h, i, j, k, l = this,
			m = {},
			n = a.style,
			o = a.nodeType && Ga(a),
			p = za.get(a, "fxshow");
		c.queue || (h = fa._queueHooks(a, "fx"), null == h.unqueued && (h.unqueued = 0, i = h.empty.fire, h.empty.fire = function () {
			h.unqueued || i()
		}), h.unqueued++, l.always(function () {
			l.always(function () {
				h.unqueued--, fa.queue(a, "fx").length || h.empty.fire()
			})
		})), 1 === a.nodeType && ("height" in b || "width" in b) && (c.overflow = [n.overflow, n.overflowX, n.overflowY], j = fa.css(a, "display"), k = "none" === j ? za.get(a, "olddisplay") || z(a.nodeName) : j, "inline" === k && "none" === fa.css(a, "float") && (n.display = "inline-block")), c.overflow && (n.overflow = "hidden", l.always(function () {
			n.overflow = c.overflow[0], n.overflowX = c.overflow[1], n.overflowY = c.overflow[2]
		}));
		for (d in b)
			if (e = b[d], gb.exec(e)) {
				if (delete b[d], f = f || "toggle" === e, e === (o ? "hide" : "show")) {
					if ("show" !== e || !p || void 0 === p[d]) continue;
					o = !0
				}
				m[d] = p && p[d] || fa.style(a, d)
			} else j = void 0;
		if (fa.isEmptyObject(m)) "inline" === ("none" === j ? z(a.nodeName) : j) && (n.display = j);
		else {
			p ? "hidden" in p && (o = p.hidden) : p = za.access(a, "fxshow", {}), f && (p.hidden = !o), o ? fa(a).show() : l.done(function () {
				fa(a).hide()
			}), l.done(function () {
				var b;
				za.remove(a, "fxshow");
				for (b in m) fa.style(a, b, m[b])
			});
			for (d in m) g = K(o ? p[d] : 0, d, l), d in p || (p[d] = g.start, o && (g.end = g.start, g.start = "width" === d || "height" === d ? 1 : 0))
		}
	}

	function M(a, b) {
		var c, d, e, f, g;
		for (c in a)
			if (d = fa.camelCase(c), e = b[d], f = a[c], fa.isArray(f) && (e = f[1], f = a[c] = f[0]), c !== d && (a[d] = f, delete a[c]), g = fa.cssHooks[d], g && "expand" in g) {
				f = g.expand(f), delete a[d];
				for (c in f) c in a || (a[c] = f[c], b[c] = e)
			} else b[d] = e
	}

	function N(a, b, c) {
		var d, e, f = 0,
			g = N.prefilters.length,
			h = fa.Deferred().always(function () {
				delete i.elem
			}),
			i = function () {
				if (e) return !1;
				for (var b = eb || I(), c = Math.max(0, j.startTime + j.duration - b), d = c / j.duration || 0, f = 1 - d, g = 0, i = j.tweens.length; g < i; g++) j.tweens[g].run(f);
				return h.notifyWith(a, [j, f, c]), f < 1 && i ? c : (h.resolveWith(a, [j]), !1)
			},
			j = h.promise({
				elem: a,
				props: fa.extend({}, b),
				opts: fa.extend(!0, {
					specialEasing: {},
					easing: fa.easing._default
				}, c),
				originalProperties: b,
				originalOptions: c,
				startTime: eb || I(),
				duration: c.duration,
				tweens: [],
				createTween: function (b, c) {
					var d = fa.Tween(a, j.opts, b, c, j.opts.specialEasing[b] || j.opts.easing);
					return j.tweens.push(d), d
				},
				stop: function (b) {
					var c = 0,
						d = b ? j.tweens.length : 0;
					if (e) return this;
					for (e = !0; c < d; c++) j.tweens[c].run(1);
					return b ? (h.notifyWith(a, [j, 1, 0]), h.resolveWith(a, [j, b])) : h.rejectWith(a, [j, b]), this
				}
			}),
			k = j.props;
		for (M(k, j.opts.specialEasing); f < g; f++)
			if (d = N.prefilters[f].call(j, a, k, j.opts)) return fa.isFunction(d.stop) && (fa._queueHooks(j.elem, j.opts.queue).stop = fa.proxy(d.stop, d)), d;
		return fa.map(k, K, j), fa.isFunction(j.opts.start) && j.opts.start.call(a, j), fa.fx.timer(fa.extend(i, {
			elem: a,
			anim: j,
			queue: j.opts.queue
		})), j.progress(j.opts.progress).done(j.opts.done, j.opts.complete).fail(j.opts.fail).always(j.opts.always)
	}

	function O(a) {
		return a.getAttribute && a.getAttribute("class") || ""
	}

	function P(a) {
		return function (b, c) {
			"string" != typeof b && (c = b, b = "*");
			var d, e = 0,
				f = b.toLowerCase().match(va) || [];
			if (fa.isFunction(c))
				for (; d = f[e++];) "+" === d[0] ? (d = d.slice(1) || "*", (a[d] = a[d] || []).unshift(c)) : (a[d] = a[d] || []).push(c)
		}
	}

	function Q(a, b, c, d) {
		function e(h) {
			var i;
			return f[h] = !0, fa.each(a[h] || [], function (a, h) {
				var j = h(b, c, d);
				return "string" != typeof j || g || f[j] ? g ? !(i = j) : void 0 : (b.dataTypes.unshift(j), e(j), !1)
			}), i
		}
		var f = {},
			g = a === Ab;
		return e(b.dataTypes[0]) || !f["*"] && e("*")
	}

	function R(a, b) {
		var c, d, e = fa.ajaxSettings.flatOptions || {};
		for (c in b) void 0 !== b[c] && ((e[c] ? a : d || (d = {}))[c] = b[c]);
		return d && fa.extend(!0, a, d), a
	}

	function S(a, b, c) {
		for (var d, e, f, g, h = a.contents, i = a.dataTypes;
			"*" === i[0];) i.shift(), void 0 === d && (d = a.mimeType || b.getResponseHeader("Content-Type"));
		if (d)
			for (e in h)
				if (h[e] && h[e].test(d)) {
					i.unshift(e);
					break
				}
		if (i[0] in c) f = i[0];
		else {
			for (e in c) {
				if (!i[0] || a.converters[e + " " + i[0]]) {
					f = e;
					break
				}
				g || (g = e)
			}
			f = f || g
		}
		if (f) return f !== i[0] && i.unshift(f), c[f]
	}

	function T(a, b, c, d) {
		var e, f, g, h, i, j = {},
			k = a.dataTypes.slice();
		if (k[1])
			for (g in a.converters) j[g.toLowerCase()] = a.converters[g];
		for (f = k.shift(); f;)
			if (a.responseFields[f] && (c[a.responseFields[f]] = b), !i && d && a.dataFilter && (b = a.dataFilter(b, a.dataType)), i = f, f = k.shift())
				if ("*" === f) f = i;
				else if ("*" !== i && i !== f) {
			if (g = j[i + " " + f] || j["* " + f], !g)
				for (e in j)
					if (h = e.split(" "), h[1] === f && (g = j[i + " " + h[0]] || j["* " + h[0]])) {
						g === !0 ? g = j[e] : j[e] !== !0 && (f = h[0], k.unshift(h[1]));
						break
					}
			if (g !== !0)
				if (g && a.throws) b = g(b);
				else try {
					b = g(b)
				} catch (a) {
					return {
						state: "parsererror",
						error: g ? a : "No conversion from " + i + " to " + f
					}
				}
		}
		return {
			state: "success",
			data: b
		}
	}

	function U(a, b, c, d) {
		var e;
		if (fa.isArray(b)) fa.each(b, function (b, e) {
			c || Eb.test(a) ? d(a, e) : U(a + "[" + ("object" == typeof e && null != e ? b : "") + "]", e, c, d)
		});
		else if (c || "object" !== fa.type(b)) d(a, b);
		else
			for (e in b) U(a + "[" + e + "]", b[e], c, d)
	}

	function V(a) {
		return fa.isWindow(a) ? a : 9 === a.nodeType && a.defaultView
	}
	var W = [],
		X = a.document,
		Y = W.slice,
		Z = W.concat,
		$ = W.push,
		_ = W.indexOf,
		aa = {},
		ba = aa.toString,
		ca = aa.hasOwnProperty,
		da = {},
		ea = "2.2.4",
		fa = function (a, b) {
			return new fa.fn.init(a, b)
		},
		ga = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
		ha = /^-ms-/,
		ia = /-([\da-z])/gi,
		ja = function (a, b) {
			return b.toUpperCase()
		};
	fa.fn = fa.prototype = {
		jquery: ea,
		constructor: fa,
		selector: "",
		length: 0,
		toArray: function () {
			return Y.call(this)
		},
		get: function (a) {
			return null != a ? a < 0 ? this[a + this.length] : this[a] : Y.call(this)
		},
		pushStack: function (a) {
			var b = fa.merge(this.constructor(), a);
			return b.prevObject = this, b.context = this.context, b
		},
		each: function (a) {
			return fa.each(this, a)
		},
		map: function (a) {
			return this.pushStack(fa.map(this, function (b, c) {
				return a.call(b, c, b)
			}))
		},
		slice: function () {
			return this.pushStack(Y.apply(this, arguments))
		},
		first: function () {
			return this.eq(0)
		},
		last: function () {
			return this.eq(-1)
		},
		eq: function (a) {
			var b = this.length,
				c = +a + (a < 0 ? b : 0);
			return this.pushStack(c >= 0 && c < b ? [this[c]] : [])
		},
		end: function () {
			return this.prevObject || this.constructor()
		},
		push: $,
		sort: W.sort,
		splice: W.splice
	}, fa.extend = fa.fn.extend = function () {
		var a, b, c, d, e, f, g = arguments[0] || {},
			h = 1,
			i = arguments.length,
			j = !1;
		for ("boolean" == typeof g && (j = g, g = arguments[h] || {}, h++), "object" == typeof g || fa.isFunction(g) || (g = {}), h === i && (g = this, h--); h < i; h++)
			if (null != (a = arguments[h]))
				for (b in a) c = g[b], d = a[b], g !== d && (j && d && (fa.isPlainObject(d) || (e = fa.isArray(d))) ? (e ? (e = !1, f = c && fa.isArray(c) ? c : []) : f = c && fa.isPlainObject(c) ? c : {}, g[b] = fa.extend(j, f, d)) : void 0 !== d && (g[b] = d));
		return g
	}, fa.extend({
		expando: "jQuery" + (ea + Math.random()).replace(/\D/g, ""),
		isReady: !0,
		error: function (a) {
			throw new Error(a)
		},
		noop: function () {},
		isFunction: function (a) {
			return "function" === fa.type(a)
		},
		isArray: Array.isArray,
		isWindow: function (a) {
			return null != a && a === a.window
		},
		isNumeric: function (a) {
			var b = a && a.toString();
			return !fa.isArray(a) && b - parseFloat(b) + 1 >= 0
		},
		isPlainObject: function (a) {
			var b;
			if ("object" !== fa.type(a) || a.nodeType || fa.isWindow(a)) return !1;
			if (a.constructor && !ca.call(a, "constructor") && !ca.call(a.constructor.prototype || {}, "isPrototypeOf")) return !1;
			for (b in a);
			return void 0 === b || ca.call(a, b)
		},
		isEmptyObject: function (a) {
			var b;
			for (b in a) return !1;
			return !0
		},
		type: function (a) {
			return null == a ? a + "" : "object" == typeof a || "function" == typeof a ? aa[ba.call(a)] || "object" : typeof a
		},
		globalEval: function (a) {
			var b, c = eval;
			a = fa.trim(a), a && (1 === a.indexOf("use strict") ? (b = X.createElement("script"), b.text = a, X.head.appendChild(b).parentNode.removeChild(b)) : c(a))
		},
		camelCase: function (a) {
			return a.replace(ha, "ms-").replace(ia, ja)
		},
		nodeName: function (a, b) {
			return a.nodeName && a.nodeName.toLowerCase() === b.toLowerCase()
		},
		each: function (a, b) {
			var d, e = 0;
			if (c(a))
				for (d = a.length; e < d && b.call(a[e], e, a[e]) !== !1; e++);
			else
				for (e in a)
					if (b.call(a[e], e, a[e]) === !1) break; return a
		},
		trim: function (a) {
			return null == a ? "" : (a + "").replace(ga, "")
		},
		makeArray: function (a, b) {
			var d = b || [];
			return null != a && (c(Object(a)) ? fa.merge(d, "string" == typeof a ? [a] : a) : $.call(d, a)), d
		},
		inArray: function (a, b, c) {
			return null == b ? -1 : _.call(b, a, c)
		},
		merge: function (a, b) {
			for (var c = +b.length, d = 0, e = a.length; d < c; d++) a[e++] = b[d];
			return a.length = e, a
		},
		grep: function (a, b, c) {
			for (var d, e = [], f = 0, g = a.length, h = !c; f < g; f++) d = !b(a[f], f), d !== h && e.push(a[f]);
			return e
		},
		map: function (a, b, d) {
			var e, f, g = 0,
				h = [];
			if (c(a))
				for (e = a.length; g < e; g++) f = b(a[g], g, d), null != f && h.push(f);
			else
				for (g in a) f = b(a[g], g, d), null != f && h.push(f);
			return Z.apply([], h)
		},
		guid: 1,
		proxy: function (a, b) {
			var c, d, e;
			if ("string" == typeof b && (c = a[b], b = a, a = c), fa.isFunction(a)) return d = Y.call(arguments, 2), e = function () {
				return a.apply(b || this, d.concat(Y.call(arguments)))
			}, e.guid = a.guid = a.guid || fa.guid++, e
		},
		now: Date.now,
		support: da
	}), "function" == typeof Symbol && (fa.fn[Symbol.iterator] = W[Symbol.iterator]), fa.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (a, b) {
		aa["[object " + b + "]"] = b.toLowerCase()
	});
	var ka =
		/*!
		 * Sizzle CSS Selector Engine v2.2.1
		 * http://sizzlejs.com/
		 *
		 * Copyright jQuery Foundation and other contributors
		 * Released under the MIT license
		 * http://jquery.org/license
		 *
		 * Date: 2015-10-17
		 */
		function (a) {
			function b(a, b, c, d) {
				var e, f, g, h, i, j, l, n, o = b && b.ownerDocument,
					p = b ? b.nodeType : 9;
				if (c = c || [], "string" != typeof a || !a || 1 !== p && 9 !== p && 11 !== p) return c;
				if (!d && ((b ? b.ownerDocument || b : O) !== G && F(b), b = b || G, I)) {
					if (11 !== p && (j = ra.exec(a)))
						if (e = j[1]) {
							if (9 === p) {
								if (!(g = b.getElementById(e))) return c;
								if (g.id === e) return c.push(g), c
							} else if (o && (g = o.getElementById(e)) && M(b, g) && g.id === e) return c.push(g), c
						} else {
							if (j[2]) return $.apply(c, b.getElementsByTagName(a)), c;
							if ((e = j[3]) && v.getElementsByClassName && b.getElementsByClassName) return $.apply(c, b.getElementsByClassName(e)), c
						}
					if (v.qsa && !T[a + " "] && (!J || !J.test(a))) {
						if (1 !== p) o = b, n = a;
						else if ("object" !== b.nodeName.toLowerCase()) {
							for ((h = b.getAttribute("id")) ? h = h.replace(ta, "\\$&") : b.setAttribute("id", h = N), l = z(a), f = l.length, i = ma.test(h) ? "#" + h : "[id='" + h + "']"; f--;) l[f] = i + " " + m(l[f]);
							n = l.join(","), o = sa.test(a) && k(b.parentNode) || b
						}
						if (n) try {
							return $.apply(c, o.querySelectorAll(n)), c
						} catch (a) {} finally {
							h === N && b.removeAttribute("id")
						}
					}
				}
				return B(a.replace(ha, "$1"), b, c, d)
			}

			function c() {
				function a(c, d) {
					return b.push(c + " ") > w.cacheLength && delete a[b.shift()], a[c + " "] = d
				}
				var b = [];
				return a
			}

			function d(a) {
				return a[N] = !0, a
			}

			function e(a) {
				var b = G.createElement("div");
				try {
					return !!a(b)
				} catch (a) {
					return !1
				} finally {
					b.parentNode && b.parentNode.removeChild(b), b = null
				}
			}

			function f(a, b) {
				for (var c = a.split("|"), d = c.length; d--;) w.attrHandle[c[d]] = b
			}

			function g(a, b) {
				var c = b && a,
					d = c && 1 === a.nodeType && 1 === b.nodeType && (~b.sourceIndex || V) - (~a.sourceIndex || V);
				if (d) return d;
				if (c)
					for (; c = c.nextSibling;)
						if (c === b) return -1;
				return a ? 1 : -1
			}

			function h(a) {
				return function (b) {
					var c = b.nodeName.toLowerCase();
					return "input" === c && b.type === a
				}
			}

			function i(a) {
				return function (b) {
					var c = b.nodeName.toLowerCase();
					return ("input" === c || "button" === c) && b.type === a
				}
			}

			function j(a) {
				return d(function (b) {
					return b = +b, d(function (c, d) {
						for (var e, f = a([], c.length, b), g = f.length; g--;) c[e = f[g]] && (c[e] = !(d[e] = c[e]))
					})
				})
			}

			function k(a) {
				return a && "undefined" != typeof a.getElementsByTagName && a
			}

			function l() {}

			function m(a) {
				for (var b = 0, c = a.length, d = ""; b < c; b++) d += a[b].value;
				return d
			}

			function n(a, b, c) {
				var d = b.dir,
					e = c && "parentNode" === d,
					f = Q++;
				return b.first ? function (b, c, f) {
					for (; b = b[d];)
						if (1 === b.nodeType || e) return a(b, c, f)
				} : function (b, c, g) {
					var h, i, j, k = [P, f];
					if (g) {
						for (; b = b[d];)
							if ((1 === b.nodeType || e) && a(b, c, g)) return !0
					} else
						for (; b = b[d];)
							if (1 === b.nodeType || e) {
								if (j = b[N] || (b[N] = {}), i = j[b.uniqueID] || (j[b.uniqueID] = {}), (h = i[d]) && h[0] === P && h[1] === f) return k[2] = h[2];
								if (i[d] = k, k[2] = a(b, c, g)) return !0
							}
				}
			}

			function o(a) {
				return a.length > 1 ? function (b, c, d) {
					for (var e = a.length; e--;)
						if (!a[e](b, c, d)) return !1;
					return !0
				} : a[0]
			}

			function p(a, c, d) {
				for (var e = 0, f = c.length; e < f; e++) b(a, c[e], d);
				return d
			}

			function q(a, b, c, d, e) {
				for (var f, g = [], h = 0, i = a.length, j = null != b; h < i; h++)(f = a[h]) && (c && !c(f, d, e) || (g.push(f), j && b.push(h)));
				return g
			}

			function r(a, b, c, e, f, g) {
				return e && !e[N] && (e = r(e)), f && !f[N] && (f = r(f, g)), d(function (d, g, h, i) {
					var j, k, l, m = [],
						n = [],
						o = g.length,
						r = d || p(b || "*", h.nodeType ? [h] : h, []),
						s = !a || !d && b ? r : q(r, m, a, h, i),
						t = c ? f || (d ? a : o || e) ? [] : g : s;
					if (c && c(s, t, h, i), e)
						for (j = q(t, n), e(j, [], h, i), k = j.length; k--;)(l = j[k]) && (t[n[k]] = !(s[n[k]] = l));
					if (d) {
						if (f || a) {
							if (f) {
								for (j = [], k = t.length; k--;)(l = t[k]) && j.push(s[k] = l);
								f(null, t = [], j, i)
							}
							for (k = t.length; k--;)(l = t[k]) && (j = f ? aa(d, l) : m[k]) > -1 && (d[j] = !(g[j] = l))
						}
					} else t = q(t === g ? t.splice(o, t.length) : t), f ? f(null, g, t, i) : $.apply(g, t)
				})
			}

			function s(a) {
				for (var b, c, d, e = a.length, f = w.relative[a[0].type], g = f || w.relative[" "], h = f ? 1 : 0, i = n(function (a) {
						return a === b
					}, g, !0), j = n(function (a) {
						return aa(b, a) > -1
					}, g, !0), k = [function (a, c, d) {
						var e = !f && (d || c !== C) || ((b = c).nodeType ? i(a, c, d) : j(a, c, d));
						return b = null, e
					}]; h < e; h++)
					if (c = w.relative[a[h].type]) k = [n(o(k), c)];
					else {
						if (c = w.filter[a[h].type].apply(null, a[h].matches), c[N]) {
							for (d = ++h; d < e && !w.relative[a[d].type]; d++);
							return r(h > 1 && o(k), h > 1 && m(a.slice(0, h - 1).concat({
								value: " " === a[h - 2].type ? "*" : ""
							})).replace(ha, "$1"), c, h < d && s(a.slice(h, d)), d < e && s(a = a.slice(d)), d < e && m(a))
						}
						k.push(c)
					}
				return o(k)
			}

			function t(a, c) {
				var e = c.length > 0,
					f = a.length > 0,
					g = function (d, g, h, i, j) {
						var k, l, m, n = 0,
							o = "0",
							p = d && [],
							r = [],
							s = C,
							t = d || f && w.find.TAG("*", j),
							u = P += null == s ? 1 : Math.random() || .1,
							v = t.length;
						for (j && (C = g === G || g || j); o !== v && null != (k = t[o]); o++) {
							if (f && k) {
								for (l = 0, g || k.ownerDocument === G || (F(k), h = !I); m = a[l++];)
									if (m(k, g || G, h)) {
										i.push(k);
										break
									}
								j && (P = u)
							}
							e && ((k = !m && k) && n--, d && p.push(k))
						}
						if (n += o, e && o !== n) {
							for (l = 0; m = c[l++];) m(p, r, g, h);
							if (d) {
								if (n > 0)
									for (; o--;) p[o] || r[o] || (r[o] = Y.call(i));
								r = q(r)
							}
							$.apply(i, r), j && !d && r.length > 0 && n + c.length > 1 && b.uniqueSort(i)
						}
						return j && (P = u, C = s), p
					};
				return e ? d(g) : g
			}
			var u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M, N = "sizzle" + 1 * new Date,
				O = a.document,
				P = 0,
				Q = 0,
				R = c(),
				S = c(),
				T = c(),
				U = function (a, b) {
					return a === b && (E = !0), 0
				},
				V = 1 << 31,
				W = {}.hasOwnProperty,
				X = [],
				Y = X.pop,
				Z = X.push,
				$ = X.push,
				_ = X.slice,
				aa = function (a, b) {
					for (var c = 0, d = a.length; c < d; c++)
						if (a[c] === b) return c;
					return -1
				},
				ba = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
				ca = "[\\x20\\t\\r\\n\\f]",
				da = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
				ea = "\\[" + ca + "*(" + da + ")(?:" + ca + "*([*^$|!~]?=)" + ca + "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + da + "))|)" + ca + "*\\]",
				fa = ":(" + da + ")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|" + ea + ")*)|.*)\\)|)",
				ga = new RegExp(ca + "+", "g"),
				ha = new RegExp("^" + ca + "+|((?:^|[^\\\\])(?:\\\\.)*)" + ca + "+$", "g"),
				ia = new RegExp("^" + ca + "*," + ca + "*"),
				ja = new RegExp("^" + ca + "*([>+~]|" + ca + ")" + ca + "*"),
				ka = new RegExp("=" + ca + "*([^\\]'\"]*?)" + ca + "*\\]", "g"),
				la = new RegExp(fa),
				ma = new RegExp("^" + da + "$"),
				na = {
					ID: new RegExp("^#(" + da + ")"),
					CLASS: new RegExp("^\\.(" + da + ")"),
					TAG: new RegExp("^(" + da + "|[*])"),
					ATTR: new RegExp("^" + ea),
					PSEUDO: new RegExp("^" + fa),
					CHILD: new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + ca + "*(even|odd|(([+-]|)(\\d*)n|)" + ca + "*(?:([+-]|)" + ca + "*(\\d+)|))" + ca + "*\\)|)", "i"),
					bool: new RegExp("^(?:" + ba + ")$", "i"),
					needsContext: new RegExp("^" + ca + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + ca + "*((?:-\\d)?\\d*)" + ca + "*\\)|)(?=[^-]|$)", "i")
				},
				oa = /^(?:input|select|textarea|button)$/i,
				pa = /^h\d$/i,
				qa = /^[^{]+\{\s*\[native \w/,
				ra = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
				sa = /[+~]/,
				ta = /'|\\/g,
				ua = new RegExp("\\\\([\\da-f]{1,6}" + ca + "?|(" + ca + ")|.)", "ig"),
				va = function (a, b, c) {
					var d = "0x" + b - 65536;
					return d !== d || c ? b : d < 0 ? String.fromCharCode(d + 65536) : String.fromCharCode(d >> 10 | 55296, 1023 & d | 56320)
				},
				wa = function () {
					F()
				};
			try {
				$.apply(X = _.call(O.childNodes), O.childNodes), X[O.childNodes.length].nodeType
			} catch (a) {
				$ = {
					apply: X.length ? function (a, b) {
						Z.apply(a, _.call(b))
					} : function (a, b) {
						for (var c = a.length, d = 0; a[c++] = b[d++];);
						a.length = c - 1
					}
				}
			}
			v = b.support = {}, y = b.isXML = function (a) {
				var b = a && (a.ownerDocument || a).documentElement;
				return !!b && "HTML" !== b.nodeName
			}, F = b.setDocument = function (a) {
				var b, c, d = a ? a.ownerDocument || a : O;
				return d !== G && 9 === d.nodeType && d.documentElement ? (G = d, H = G.documentElement, I = !y(G), (c = G.defaultView) && c.top !== c && (c.addEventListener ? c.addEventListener("unload", wa, !1) : c.attachEvent && c.attachEvent("onunload", wa)), v.attributes = e(function (a) {
					return a.className = "i", !a.getAttribute("className")
				}), v.getElementsByTagName = e(function (a) {
					return a.appendChild(G.createComment("")), !a.getElementsByTagName("*").length
				}), v.getElementsByClassName = qa.test(G.getElementsByClassName), v.getById = e(function (a) {
					return H.appendChild(a).id = N, !G.getElementsByName || !G.getElementsByName(N).length
				}), v.getById ? (w.find.ID = function (a, b) {
					if ("undefined" != typeof b.getElementById && I) {
						var c = b.getElementById(a);
						return c ? [c] : []
					}
				}, w.filter.ID = function (a) {
					var b = a.replace(ua, va);
					return function (a) {
						return a.getAttribute("id") === b
					}
				}) : (delete w.find.ID, w.filter.ID = function (a) {
					var b = a.replace(ua, va);
					return function (a) {
						var c = "undefined" != typeof a.getAttributeNode && a.getAttributeNode("id");
						return c && c.value === b
					}
				}), w.find.TAG = v.getElementsByTagName ? function (a, b) {
					return "undefined" != typeof b.getElementsByTagName ? b.getElementsByTagName(a) : v.qsa ? b.querySelectorAll(a) : void 0
				} : function (a, b) {
					var c, d = [],
						e = 0,
						f = b.getElementsByTagName(a);
					if ("*" === a) {
						for (; c = f[e++];) 1 === c.nodeType && d.push(c);
						return d
					}
					return f
				}, w.find.CLASS = v.getElementsByClassName && function (a, b) {
					if ("undefined" != typeof b.getElementsByClassName && I) return b.getElementsByClassName(a)
				}, K = [], J = [], (v.qsa = qa.test(G.querySelectorAll)) && (e(function (a) {
					H.appendChild(a).innerHTML = "<a id='" + N + "'></a><select id='" + N + "-\r\\' msallowcapture=''><option selected=''></option></select>", a.querySelectorAll("[msallowcapture^='']").length && J.push("[*^$]=" + ca + "*(?:''|\"\")"), a.querySelectorAll("[selected]").length || J.push("\\[" + ca + "*(?:value|" + ba + ")"), a.querySelectorAll("[id~=" + N + "-]").length || J.push("~="), a.querySelectorAll(":checked").length || J.push(":checked"), a.querySelectorAll("a#" + N + "+*").length || J.push(".#.+[+~]")
				}), e(function (a) {
					var b = G.createElement("input");
					b.setAttribute("type", "hidden"), a.appendChild(b).setAttribute("name", "D"), a.querySelectorAll("[name=d]").length && J.push("name" + ca + "*[*^$|!~]?="), a.querySelectorAll(":enabled").length || J.push(":enabled", ":disabled"), a.querySelectorAll("*,:x"), J.push(",.*:")
				})), (v.matchesSelector = qa.test(L = H.matches || H.webkitMatchesSelector || H.mozMatchesSelector || H.oMatchesSelector || H.msMatchesSelector)) && e(function (a) {
					v.disconnectedMatch = L.call(a, "div"), L.call(a, "[s!='']:x"), K.push("!=", fa)
				}), J = J.length && new RegExp(J.join("|")), K = K.length && new RegExp(K.join("|")), b = qa.test(H.compareDocumentPosition), M = b || qa.test(H.contains) ? function (a, b) {
					var c = 9 === a.nodeType ? a.documentElement : a,
						d = b && b.parentNode;
					return a === d || !(!d || 1 !== d.nodeType || !(c.contains ? c.contains(d) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(d)))
				} : function (a, b) {
					if (b)
						for (; b = b.parentNode;)
							if (b === a) return !0;
					return !1
				}, U = b ? function (a, b) {
					if (a === b) return E = !0, 0;
					var c = !a.compareDocumentPosition - !b.compareDocumentPosition;
					return c ? c : (c = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : 1, 1 & c || !v.sortDetached && b.compareDocumentPosition(a) === c ? a === G || a.ownerDocument === O && M(O, a) ? -1 : b === G || b.ownerDocument === O && M(O, b) ? 1 : D ? aa(D, a) - aa(D, b) : 0 : 4 & c ? -1 : 1)
				} : function (a, b) {
					if (a === b) return E = !0, 0;
					var c, d = 0,
						e = a.parentNode,
						f = b.parentNode,
						h = [a],
						i = [b];
					if (!e || !f) return a === G ? -1 : b === G ? 1 : e ? -1 : f ? 1 : D ? aa(D, a) - aa(D, b) : 0;
					if (e === f) return g(a, b);
					for (c = a; c = c.parentNode;) h.unshift(c);
					for (c = b; c = c.parentNode;) i.unshift(c);
					for (; h[d] === i[d];) d++;
					return d ? g(h[d], i[d]) : h[d] === O ? -1 : i[d] === O ? 1 : 0
				}, G) : G
			}, b.matches = function (a, c) {
				return b(a, null, null, c)
			}, b.matchesSelector = function (a, c) {
				if ((a.ownerDocument || a) !== G && F(a), c = c.replace(ka, "='$1']"), v.matchesSelector && I && !T[c + " "] && (!K || !K.test(c)) && (!J || !J.test(c))) try {
					var d = L.call(a, c);
					if (d || v.disconnectedMatch || a.document && 11 !== a.document.nodeType) return d
				} catch (a) {}
				return b(c, G, null, [a]).length > 0
			}, b.contains = function (a, b) {
				return (a.ownerDocument || a) !== G && F(a), M(a, b)
			}, b.attr = function (a, b) {
				(a.ownerDocument || a) !== G && F(a);
				var c = w.attrHandle[b.toLowerCase()],
					d = c && W.call(w.attrHandle, b.toLowerCase()) ? c(a, b, !I) : void 0;
				return void 0 !== d ? d : v.attributes || !I ? a.getAttribute(b) : (d = a.getAttributeNode(b)) && d.specified ? d.value : null
			}, b.error = function (a) {
				throw new Error("Syntax error, unrecognized expression: " + a)
			}, b.uniqueSort = function (a) {
				var b, c = [],
					d = 0,
					e = 0;
				if (E = !v.detectDuplicates, D = !v.sortStable && a.slice(0), a.sort(U), E) {
					for (; b = a[e++];) b === a[e] && (d = c.push(e));
					for (; d--;) a.splice(c[d], 1)
				}
				return D = null, a
			}, x = b.getText = function (a) {
				var b, c = "",
					d = 0,
					e = a.nodeType;
				if (e) {
					if (1 === e || 9 === e || 11 === e) {
						if ("string" == typeof a.textContent) return a.textContent;
						for (a = a.firstChild; a; a = a.nextSibling) c += x(a)
					} else if (3 === e || 4 === e) return a.nodeValue
				} else
					for (; b = a[d++];) c += x(b);
				return c
			}, w = b.selectors = {
				cacheLength: 50,
				createPseudo: d,
				match: na,
				attrHandle: {},
				find: {},
				relative: {
					">": {
						dir: "parentNode",
						first: !0
					},
					" ": {
						dir: "parentNode"
					},
					"+": {
						dir: "previousSibling",
						first: !0
					},
					"~": {
						dir: "previousSibling"
					}
				},
				preFilter: {
					ATTR: function (a) {
						return a[1] = a[1].replace(ua, va), a[3] = (a[3] || a[4] || a[5] || "").replace(ua, va), "~=" === a[2] && (a[3] = " " + a[3] + " "), a.slice(0, 4)
					},
					CHILD: function (a) {
						return a[1] = a[1].toLowerCase(), "nth" === a[1].slice(0, 3) ? (a[3] || b.error(a[0]), a[4] = +(a[4] ? a[5] + (a[6] || 1) : 2 * ("even" === a[3] || "odd" === a[3])), a[5] = +(a[7] + a[8] || "odd" === a[3])) : a[3] && b.error(a[0]), a
					},
					PSEUDO: function (a) {
						var b, c = !a[6] && a[2];
						return na.CHILD.test(a[0]) ? null : (a[3] ? a[2] = a[4] || a[5] || "" : c && la.test(c) && (b = z(c, !0)) && (b = c.indexOf(")", c.length - b) - c.length) && (a[0] = a[0].slice(0, b), a[2] = c.slice(0, b)), a.slice(0, 3))
					}
				},
				filter: {
					TAG: function (a) {
						var b = a.replace(ua, va).toLowerCase();
						return "*" === a ? function () {
							return !0
						} : function (a) {
							return a.nodeName && a.nodeName.toLowerCase() === b
						}
					},
					CLASS: function (a) {
						var b = R[a + " "];
						return b || (b = new RegExp("(^|" + ca + ")" + a + "(" + ca + "|$)")) && R(a, function (a) {
							return b.test("string" == typeof a.className && a.className || "undefined" != typeof a.getAttribute && a.getAttribute("class") || "")
						})
					},
					ATTR: function (a, c, d) {
						return function (e) {
							var f = b.attr(e, a);
							return null == f ? "!=" === c : !c || (f += "", "=" === c ? f === d : "!=" === c ? f !== d : "^=" === c ? d && 0 === f.indexOf(d) : "*=" === c ? d && f.indexOf(d) > -1 : "$=" === c ? d && f.slice(-d.length) === d : "~=" === c ? (" " + f.replace(ga, " ") + " ").indexOf(d) > -1 : "|=" === c && (f === d || f.slice(0, d.length + 1) === d + "-"))
						}
					},
					CHILD: function (a, b, c, d, e) {
						var f = "nth" !== a.slice(0, 3),
							g = "last" !== a.slice(-4),
							h = "of-type" === b;
						return 1 === d && 0 === e ? function (a) {
							return !!a.parentNode
						} : function (b, c, i) {
							var j, k, l, m, n, o, p = f !== g ? "nextSibling" : "previousSibling",
								q = b.parentNode,
								r = h && b.nodeName.toLowerCase(),
								s = !i && !h,
								t = !1;
							if (q) {
								if (f) {
									for (; p;) {
										for (m = b; m = m[p];)
											if (h ? m.nodeName.toLowerCase() === r : 1 === m.nodeType) return !1;
										o = p = "only" === a && !o && "nextSibling"
									}
									return !0
								}
								if (o = [g ? q.firstChild : q.lastChild], g && s) {
									for (m = q, l = m[N] || (m[N] = {}), k = l[m.uniqueID] || (l[m.uniqueID] = {}), j = k[a] || [], n = j[0] === P && j[1], t = n && j[2], m = n && q.childNodes[n]; m = ++n && m && m[p] || (t = n = 0) || o.pop();)
										if (1 === m.nodeType && ++t && m === b) {
											k[a] = [P, n, t];
											break
										}
								} else if (s && (m = b, l = m[N] || (m[N] = {}), k = l[m.uniqueID] || (l[m.uniqueID] = {}), j = k[a] || [], n = j[0] === P && j[1], t = n), t === !1)
									for (;
										(m = ++n && m && m[p] || (t = n = 0) || o.pop()) && ((h ? m.nodeName.toLowerCase() !== r : 1 !== m.nodeType) || !++t || (s && (l = m[N] || (m[N] = {}), k = l[m.uniqueID] || (l[m.uniqueID] = {}), k[a] = [P, t]), m !== b)););
								return t -= e, t === d || t % d === 0 && t / d >= 0
							}
						}
					},
					PSEUDO: function (a, c) {
						var e, f = w.pseudos[a] || w.setFilters[a.toLowerCase()] || b.error("unsupported pseudo: " + a);
						return f[N] ? f(c) : f.length > 1 ? (e = [a, a, "", c], w.setFilters.hasOwnProperty(a.toLowerCase()) ? d(function (a, b) {
							for (var d, e = f(a, c), g = e.length; g--;) d = aa(a, e[g]), a[d] = !(b[d] = e[g])
						}) : function (a) {
							return f(a, 0, e)
						}) : f
					}
				},
				pseudos: {
					not: d(function (a) {
						var b = [],
							c = [],
							e = A(a.replace(ha, "$1"));
						return e[N] ? d(function (a, b, c, d) {
							for (var f, g = e(a, null, d, []), h = a.length; h--;)(f = g[h]) && (a[h] = !(b[h] = f))
						}) : function (a, d, f) {
							return b[0] = a, e(b, null, f, c), b[0] = null, !c.pop()
						}
					}),
					has: d(function (a) {
						return function (c) {
							return b(a, c).length > 0
						}
					}),
					contains: d(function (a) {
						return a = a.replace(ua, va),
							function (b) {
								return (b.textContent || b.innerText || x(b)).indexOf(a) > -1
							}
					}),
					lang: d(function (a) {
						return ma.test(a || "") || b.error("unsupported lang: " + a), a = a.replace(ua, va).toLowerCase(),
							function (b) {
								var c;
								do
									if (c = I ? b.lang : b.getAttribute("xml:lang") || b.getAttribute("lang")) return c = c.toLowerCase(), c === a || 0 === c.indexOf(a + "-");
								while ((b = b.parentNode) && 1 === b.nodeType);
								return !1
							}
					}),
					target: function (b) {
						var c = a.location && a.location.hash;
						return c && c.slice(1) === b.id
					},
					root: function (a) {
						return a === H
					},
					focus: function (a) {
						return a === G.activeElement && (!G.hasFocus || G.hasFocus()) && !!(a.type || a.href || ~a.tabIndex)
					},
					enabled: function (a) {
						return a.disabled === !1
					},
					disabled: function (a) {
						return a.disabled === !0
					},
					checked: function (a) {
						var b = a.nodeName.toLowerCase();
						return "input" === b && !!a.checked || "option" === b && !!a.selected
					},
					selected: function (a) {
						return a.parentNode && a.parentNode.selectedIndex, a.selected === !0
					},
					empty: function (a) {
						for (a = a.firstChild; a; a = a.nextSibling)
							if (a.nodeType < 6) return !1;
						return !0
					},
					parent: function (a) {
						return !w.pseudos.empty(a)
					},
					header: function (a) {
						return pa.test(a.nodeName)
					},
					input: function (a) {
						return oa.test(a.nodeName)
					},
					button: function (a) {
						var b = a.nodeName.toLowerCase();
						return "input" === b && "button" === a.type || "button" === b
					},
					text: function (a) {
						var b;
						return "input" === a.nodeName.toLowerCase() && "text" === a.type && (null == (b = a.getAttribute("type")) || "text" === b.toLowerCase())
					},
					first: j(function () {
						return [0]
					}),
					last: j(function (a, b) {
						return [b - 1]
					}),
					eq: j(function (a, b, c) {
						return [c < 0 ? c + b : c]
					}),
					even: j(function (a, b) {
						for (var c = 0; c < b; c += 2) a.push(c);
						return a
					}),
					odd: j(function (a, b) {
						for (var c = 1; c < b; c += 2) a.push(c);
						return a
					}),
					lt: j(function (a, b, c) {
						for (var d = c < 0 ? c + b : c; --d >= 0;) a.push(d);
						return a
					}),
					gt: j(function (a, b, c) {
						for (var d = c < 0 ? c + b : c; ++d < b;) a.push(d);
						return a
					})
				}
			}, w.pseudos.nth = w.pseudos.eq;
			for (u in {
					radio: !0,
					checkbox: !0,
					file: !0,
					password: !0,
					image: !0
				}) w.pseudos[u] = h(u);
			for (u in {
					submit: !0,
					reset: !0
				}) w.pseudos[u] = i(u);
			return l.prototype = w.filters = w.pseudos, w.setFilters = new l, z = b.tokenize = function (a, c) {
				var d, e, f, g, h, i, j, k = S[a + " "];
				if (k) return c ? 0 : k.slice(0);
				for (h = a, i = [], j = w.preFilter; h;) {
					d && !(e = ia.exec(h)) || (e && (h = h.slice(e[0].length) || h), i.push(f = [])), d = !1, (e = ja.exec(h)) && (d = e.shift(), f.push({
						value: d,
						type: e[0].replace(ha, " ")
					}), h = h.slice(d.length));
					for (g in w.filter) !(e = na[g].exec(h)) || j[g] && !(e = j[g](e)) || (d = e.shift(), f.push({
						value: d,
						type: g,
						matches: e
					}), h = h.slice(d.length));
					if (!d) break
				}
				return c ? h.length : h ? b.error(a) : S(a, i).slice(0)
			}, A = b.compile = function (a, b) {
				var c, d = [],
					e = [],
					f = T[a + " "];
				if (!f) {
					for (b || (b = z(a)), c = b.length; c--;) f = s(b[c]), f[N] ? d.push(f) : e.push(f);
					f = T(a, t(e, d)), f.selector = a
				}
				return f
			}, B = b.select = function (a, b, c, d) {
				var e, f, g, h, i, j = "function" == typeof a && a,
					l = !d && z(a = j.selector || a);
				if (c = c || [], 1 === l.length) {
					if (f = l[0] = l[0].slice(0), f.length > 2 && "ID" === (g = f[0]).type && v.getById && 9 === b.nodeType && I && w.relative[f[1].type]) {
						if (b = (w.find.ID(g.matches[0].replace(ua, va), b) || [])[0], !b) return c;
						j && (b = b.parentNode), a = a.slice(f.shift().value.length)
					}
					for (e = na.needsContext.test(a) ? 0 : f.length; e-- && (g = f[e], !w.relative[h = g.type]);)
						if ((i = w.find[h]) && (d = i(g.matches[0].replace(ua, va), sa.test(f[0].type) && k(b.parentNode) || b))) {
							if (f.splice(e, 1), a = d.length && m(f), !a) return $.apply(c, d), c;
							break
						}
				}
				return (j || A(a, l))(d, b, !I, c, !b || sa.test(a) && k(b.parentNode) || b), c
			}, v.sortStable = N.split("").sort(U).join("") === N, v.detectDuplicates = !!E, F(), v.sortDetached = e(function (a) {
				return 1 & a.compareDocumentPosition(G.createElement("div"))
			}), e(function (a) {
				return a.innerHTML = "<a href='#'></a>", "#" === a.firstChild.getAttribute("href")
			}) || f("type|href|height|width", function (a, b, c) {
				if (!c) return a.getAttribute(b, "type" === b.toLowerCase() ? 1 : 2)
			}), v.attributes && e(function (a) {
				return a.innerHTML = "<input/>", a.firstChild.setAttribute("value", ""), "" === a.firstChild.getAttribute("value")
			}) || f("value", function (a, b, c) {
				if (!c && "input" === a.nodeName.toLowerCase()) return a.defaultValue
			}), e(function (a) {
				return null == a.getAttribute("disabled")
			}) || f(ba, function (a, b, c) {
				var d;
				if (!c) return a[b] === !0 ? b.toLowerCase() : (d = a.getAttributeNode(b)) && d.specified ? d.value : null
			}), b
		}(a);
	fa.find = ka, fa.expr = ka.selectors, fa.expr[":"] = fa.expr.pseudos, fa.uniqueSort = fa.unique = ka.uniqueSort, fa.text = ka.getText, fa.isXMLDoc = ka.isXML, fa.contains = ka.contains;
	var la = function (a, b, c) {
			for (var d = [], e = void 0 !== c;
				(a = a[b]) && 9 !== a.nodeType;)
				if (1 === a.nodeType) {
					if (e && fa(a).is(c)) break;
					d.push(a)
				}
			return d
		},
		ma = function (a, b) {
			for (var c = []; a; a = a.nextSibling) 1 === a.nodeType && a !== b && c.push(a);
			return c
		},
		na = fa.expr.match.needsContext,
		oa = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,
		pa = /^.[^:#\[\.,]*$/;
	fa.filter = function (a, b, c) {
		var d = b[0];
		return c && (a = ":not(" + a + ")"), 1 === b.length && 1 === d.nodeType ? fa.find.matchesSelector(d, a) ? [d] : [] : fa.find.matches(a, fa.grep(b, function (a) {
			return 1 === a.nodeType
		}))
	}, fa.fn.extend({
		find: function (a) {
			var b, c = this.length,
				d = [],
				e = this;
			if ("string" != typeof a) return this.pushStack(fa(a).filter(function () {
				for (b = 0; b < c; b++)
					if (fa.contains(e[b], this)) return !0
			}));
			for (b = 0; b < c; b++) fa.find(a, e[b], d);
			return d = this.pushStack(c > 1 ? fa.unique(d) : d), d.selector = this.selector ? this.selector + " " + a : a, d
		},
		filter: function (a) {
			return this.pushStack(d(this, a || [], !1))
		},
		not: function (a) {
			return this.pushStack(d(this, a || [], !0))
		},
		is: function (a) {
			return !!d(this, "string" == typeof a && na.test(a) ? fa(a) : a || [], !1).length
		}
	});
	var qa, ra = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
		sa = fa.fn.init = function (a, b, c) {
			var d, e;
			if (!a) return this;
			if (c = c || qa, "string" == typeof a) {
				if (d = "<" === a[0] && ">" === a[a.length - 1] && a.length >= 3 ? [null, a, null] : ra.exec(a), !d || !d[1] && b) return !b || b.jquery ? (b || c).find(a) : this.constructor(b).find(a);
				if (d[1]) {
					if (b = b instanceof fa ? b[0] : b, fa.merge(this, fa.parseHTML(d[1], b && b.nodeType ? b.ownerDocument || b : X, !0)), oa.test(d[1]) && fa.isPlainObject(b))
						for (d in b) fa.isFunction(this[d]) ? this[d](b[d]) : this.attr(d, b[d]);
					return this
				}
				return e = X.getElementById(d[2]), e && e.parentNode && (this.length = 1, this[0] = e), this.context = X, this.selector = a, this
			}
			return a.nodeType ? (this.context = this[0] = a, this.length = 1, this) : fa.isFunction(a) ? void 0 !== c.ready ? c.ready(a) : a(fa) : (void 0 !== a.selector && (this.selector = a.selector, this.context = a.context), fa.makeArray(a, this))
		};
	sa.prototype = fa.fn, qa = fa(X);
	var ta = /^(?:parents|prev(?:Until|All))/,
		ua = {
			children: !0,
			contents: !0,
			next: !0,
			prev: !0
		};
	fa.fn.extend({
		has: function (a) {
			var b = fa(a, this),
				c = b.length;
			return this.filter(function () {
				for (var a = 0; a < c; a++)
					if (fa.contains(this, b[a])) return !0
			})
		},
		closest: function (a, b) {
			for (var c, d = 0, e = this.length, f = [], g = na.test(a) || "string" != typeof a ? fa(a, b || this.context) : 0; d < e; d++)
				for (c = this[d]; c && c !== b; c = c.parentNode)
					if (c.nodeType < 11 && (g ? g.index(c) > -1 : 1 === c.nodeType && fa.find.matchesSelector(c, a))) {
						f.push(c);
						break
					}
			return this.pushStack(f.length > 1 ? fa.uniqueSort(f) : f)
		},
		index: function (a) {
			return a ? "string" == typeof a ? _.call(fa(a), this[0]) : _.call(this, a.jquery ? a[0] : a) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1
		},
		add: function (a, b) {
			return this.pushStack(fa.uniqueSort(fa.merge(this.get(), fa(a, b))))
		},
		addBack: function (a) {
			return this.add(null == a ? this.prevObject : this.prevObject.filter(a))
		}
	}), fa.each({
		parent: function (a) {
			var b = a.parentNode;
			return b && 11 !== b.nodeType ? b : null
		},
		parents: function (a) {
			return la(a, "parentNode")
		},
		parentsUntil: function (a, b, c) {
			return la(a, "parentNode", c)
		},
		next: function (a) {
			return e(a, "nextSibling")
		},
		prev: function (a) {
			return e(a, "previousSibling")
		},
		nextAll: function (a) {
			return la(a, "nextSibling")
		},
		prevAll: function (a) {
			return la(a, "previousSibling")
		},
		nextUntil: function (a, b, c) {
			return la(a, "nextSibling", c)
		},
		prevUntil: function (a, b, c) {
			return la(a, "previousSibling", c)
		},
		siblings: function (a) {
			return ma((a.parentNode || {}).firstChild, a)
		},
		children: function (a) {
			return ma(a.firstChild)
		},
		contents: function (a) {
			return a.contentDocument || fa.merge([], a.childNodes)
		}
	}, function (a, b) {
		fa.fn[a] = function (c, d) {
			var e = fa.map(this, b, c);
			return "Until" !== a.slice(-5) && (d = c), d && "string" == typeof d && (e = fa.filter(d, e)), this.length > 1 && (ua[a] || fa.uniqueSort(e), ta.test(a) && e.reverse()), this.pushStack(e)
		}
	});
	var va = /\S+/g;
	fa.Callbacks = function (a) {
		a = "string" == typeof a ? f(a) : fa.extend({}, a);
		var b, c, d, e, g = [],
			h = [],
			i = -1,
			j = function () {
				for (e = a.once, d = b = !0; h.length; i = -1)
					for (c = h.shift(); ++i < g.length;) g[i].apply(c[0], c[1]) === !1 && a.stopOnFalse && (i = g.length, c = !1);
				a.memory || (c = !1), b = !1, e && (g = c ? [] : "")
			},
			k = {
				add: function () {
					return g && (c && !b && (i = g.length - 1, h.push(c)), function b(c) {
						fa.each(c, function (c, d) {
							fa.isFunction(d) ? a.unique && k.has(d) || g.push(d) : d && d.length && "string" !== fa.type(d) && b(d)
						})
					}(arguments), c && !b && j()), this
				},
				remove: function () {
					return fa.each(arguments, function (a, b) {
						for (var c;
							(c = fa.inArray(b, g, c)) > -1;) g.splice(c, 1), c <= i && i--
					}), this
				},
				has: function (a) {
					return a ? fa.inArray(a, g) > -1 : g.length > 0
				},
				empty: function () {
					return g && (g = []), this
				},
				disable: function () {
					return e = h = [], g = c = "", this
				},
				disabled: function () {
					return !g
				},
				lock: function () {
					return e = h = [], c || (g = c = ""), this
				},
				locked: function () {
					return !!e
				},
				fireWith: function (a, c) {
					return e || (c = c || [], c = [a, c.slice ? c.slice() : c], h.push(c), b || j()), this
				},
				fire: function () {
					return k.fireWith(this, arguments), this
				},
				fired: function () {
					return !!d
				}
			};
		return k
	}, fa.extend({
		Deferred: function (a) {
			var b = [
					["resolve", "done", fa.Callbacks("once memory"), "resolved"],
					["reject", "fail", fa.Callbacks("once memory"), "rejected"],
					["notify", "progress", fa.Callbacks("memory")]
				],
				c = "pending",
				d = {
					state: function () {
						return c
					},
					always: function () {
						return e.done(arguments).fail(arguments), this
					},
					then: function () {
						var a = arguments;
						return fa.Deferred(function (c) {
							fa.each(b, function (b, f) {
								var g = fa.isFunction(a[b]) && a[b];
								e[f[1]](function () {
									var a = g && g.apply(this, arguments);
									a && fa.isFunction(a.promise) ? a.promise().progress(c.notify).done(c.resolve).fail(c.reject) : c[f[0] + "With"](this === d ? c.promise() : this, g ? [a] : arguments)
								})
							}), a = null
						}).promise()
					},
					promise: function (a) {
						return null != a ? fa.extend(a, d) : d
					}
				},
				e = {};
			return d.pipe = d.then, fa.each(b, function (a, f) {
				var g = f[2],
					h = f[3];
				d[f[1]] = g.add, h && g.add(function () {
					c = h
				}, b[1 ^ a][2].disable, b[2][2].lock), e[f[0]] = function () {
					return e[f[0] + "With"](this === e ? d : this, arguments), this
				}, e[f[0] + "With"] = g.fireWith
			}), d.promise(e), a && a.call(e, e), e
		},
		when: function (a) {
			var b, c, d, e = 0,
				f = Y.call(arguments),
				g = f.length,
				h = 1 !== g || a && fa.isFunction(a.promise) ? g : 0,
				i = 1 === h ? a : fa.Deferred(),
				j = function (a, c, d) {
					return function (e) {
						c[a] = this, d[a] = arguments.length > 1 ? Y.call(arguments) : e, d === b ? i.notifyWith(c, d) : --h || i.resolveWith(c, d)
					}
				};
			if (g > 1)
				for (b = new Array(g), c = new Array(g), d = new Array(g); e < g; e++) f[e] && fa.isFunction(f[e].promise) ? f[e].promise().progress(j(e, c, b)).done(j(e, d, f)).fail(i.reject) : --h;
			return h || i.resolveWith(d, f), i.promise()
		}
	});
	var wa;
	fa.fn.ready = function (a) {
		return fa.ready.promise().done(a), this
	}, fa.extend({
		isReady: !1,
		readyWait: 1,
		holdReady: function (a) {
			a ? fa.readyWait++ : fa.ready(!0)
		},
		ready: function (a) {
			(a === !0 ? --fa.readyWait : fa.isReady) || (fa.isReady = !0, a !== !0 && --fa.readyWait > 0 || (wa.resolveWith(X, [fa]), fa.fn.triggerHandler && (fa(X).triggerHandler("ready"), fa(X).off("ready"))))
		}
	}), fa.ready.promise = function (b) {
		return wa || (wa = fa.Deferred(), "complete" === X.readyState || "loading" !== X.readyState && !X.documentElement.doScroll ? a.setTimeout(fa.ready) : (X.addEventListener("DOMContentLoaded", g), a.addEventListener("load", g))), wa.promise(b)
	}, fa.ready.promise();
	var xa = function (a, b, c, d, e, f, g) {
			var h = 0,
				i = a.length,
				j = null == c;
			if ("object" === fa.type(c)) {
				e = !0;
				for (h in c) xa(a, b, h, c[h], !0, f, g)
			} else if (void 0 !== d && (e = !0, fa.isFunction(d) || (g = !0), j && (g ? (b.call(a, d), b = null) : (j = b, b = function (a, b, c) {
					return j.call(fa(a), c)
				})), b))
				for (; h < i; h++) b(a[h], c, g ? d : d.call(a[h], h, b(a[h], c)));
			return e ? a : j ? b.call(a) : i ? b(a[0], c) : f
		},
		ya = function (a) {
			return 1 === a.nodeType || 9 === a.nodeType || !+a.nodeType
		};
	h.uid = 1, h.prototype = {
		register: function (a, b) {
			var c = b || {};
			return a.nodeType ? a[this.expando] = c : Object.defineProperty(a, this.expando, {
				value: c,
				writable: !0,
				configurable: !0
			}), a[this.expando]
		},
		cache: function (a) {
			if (!ya(a)) return {};
			var b = a[this.expando];
			return b || (b = {}, ya(a) && (a.nodeType ? a[this.expando] = b : Object.defineProperty(a, this.expando, {
				value: b,
				configurable: !0
			}))), b
		},
		set: function (a, b, c) {
			var d, e = this.cache(a);
			if ("string" == typeof b) e[b] = c;
			else
				for (d in b) e[d] = b[d];
			return e
		},
		get: function (a, b) {
			return void 0 === b ? this.cache(a) : a[this.expando] && a[this.expando][b]
		},
		access: function (a, b, c) {
			var d;
			return void 0 === b || b && "string" == typeof b && void 0 === c ? (d = this.get(a, b), void 0 !== d ? d : this.get(a, fa.camelCase(b))) : (this.set(a, b, c), void 0 !== c ? c : b)
		},
		remove: function (a, b) {
			var c, d, e, f = a[this.expando];
			if (void 0 !== f) {
				if (void 0 === b) this.register(a);
				else {
					fa.isArray(b) ? d = b.concat(b.map(fa.camelCase)) : (e = fa.camelCase(b), b in f ? d = [b, e] : (d = e, d = d in f ? [d] : d.match(va) || [])), c = d.length;
					for (; c--;) delete f[d[c]]
				}(void 0 === b || fa.isEmptyObject(f)) && (a.nodeType ? a[this.expando] = void 0 : delete a[this.expando])
			}
		},
		hasData: function (a) {
			var b = a[this.expando];
			return void 0 !== b && !fa.isEmptyObject(b)
		}
	};
	var za = new h,
		Aa = new h,
		Ba = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		Ca = /[A-Z]/g;
	fa.extend({
		hasData: function (a) {
			return Aa.hasData(a) || za.hasData(a)
		},
		data: function (a, b, c) {
			return Aa.access(a, b, c)
		},
		removeData: function (a, b) {
			Aa.remove(a, b)
		},
		_data: function (a, b, c) {
			return za.access(a, b, c)
		},
		_removeData: function (a, b) {
			za.remove(a, b)
		}
	}), fa.fn.extend({
		data: function (a, b) {
			var c, d, e, f = this[0],
				g = f && f.attributes;
			if (void 0 === a) {
				if (this.length && (e = Aa.get(f), 1 === f.nodeType && !za.get(f, "hasDataAttrs"))) {
					for (c = g.length; c--;) g[c] && (d = g[c].name, 0 === d.indexOf("data-") && (d = fa.camelCase(d.slice(5)), i(f, d, e[d])));
					za.set(f, "hasDataAttrs", !0)
				}
				return e
			}
			return "object" == typeof a ? this.each(function () {
				Aa.set(this, a)
			}) : xa(this, function (b) {
				var c, d;
				if (f && void 0 === b) {
					if (c = Aa.get(f, a) || Aa.get(f, a.replace(Ca, "-$&").toLowerCase()), void 0 !== c) return c;
					if (d = fa.camelCase(a), c = Aa.get(f, d), void 0 !== c) return c;
					if (c = i(f, d, void 0), void 0 !== c) return c
				} else d = fa.camelCase(a), this.each(function () {
					var c = Aa.get(this, d);
					Aa.set(this, d, b), a.indexOf("-") > -1 && void 0 !== c && Aa.set(this, a, b)
				})
			}, null, b, arguments.length > 1, null, !0)
		},
		removeData: function (a) {
			return this.each(function () {
				Aa.remove(this, a)
			})
		}
	}), fa.extend({
		queue: function (a, b, c) {
			var d;
			if (a) return b = (b || "fx") + "queue", d = za.get(a, b), c && (!d || fa.isArray(c) ? d = za.access(a, b, fa.makeArray(c)) : d.push(c)), d || []
		},
		dequeue: function (a, b) {
			b = b || "fx";
			var c = fa.queue(a, b),
				d = c.length,
				e = c.shift(),
				f = fa._queueHooks(a, b),
				g = function () {
					fa.dequeue(a, b)
				};
			"inprogress" === e && (e = c.shift(), d--), e && ("fx" === b && c.unshift("inprogress"), delete f.stop, e.call(a, g, f)), !d && f && f.empty.fire()
		},
		_queueHooks: function (a, b) {
			var c = b + "queueHooks";
			return za.get(a, c) || za.access(a, c, {
				empty: fa.Callbacks("once memory").add(function () {
					za.remove(a, [b + "queue", c])
				})
			})
		}
	}), fa.fn.extend({
		queue: function (a, b) {
			var c = 2;
			return "string" != typeof a && (b = a, a = "fx", c--), arguments.length < c ? fa.queue(this[0], a) : void 0 === b ? this : this.each(function () {
				var c = fa.queue(this, a, b);
				fa._queueHooks(this, a), "fx" === a && "inprogress" !== c[0] && fa.dequeue(this, a)
			})
		},
		dequeue: function (a) {
			return this.each(function () {
				fa.dequeue(this, a)
			})
		},
		clearQueue: function (a) {
			return this.queue(a || "fx", [])
		},
		promise: function (a, b) {
			var c, d = 1,
				e = fa.Deferred(),
				f = this,
				g = this.length,
				h = function () {
					--d || e.resolveWith(f, [f])
				};
			for ("string" != typeof a && (b = a, a = void 0), a = a || "fx"; g--;) c = za.get(f[g], a + "queueHooks"), c && c.empty && (d++, c.empty.add(h));
			return h(), e.promise(b)
		}
	});
	var Da = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,
		Ea = new RegExp("^(?:([+-])=|)(" + Da + ")([a-z%]*)$", "i"),
		Fa = ["Top", "Right", "Bottom", "Left"],
		Ga = function (a, b) {
			return a = b || a, "none" === fa.css(a, "display") || !fa.contains(a.ownerDocument, a)
		},
		Ha = /^(?:checkbox|radio)$/i,
		Ia = /<([\w:-]+)/,
		Ja = /^$|\/(?:java|ecma)script/i,
		Ka = {
			option: [1, "<select multiple='multiple'>", "</select>"],
			thead: [1, "<table>", "</table>"],
			col: [2, "<table><colgroup>", "</colgroup></table>"],
			tr: [2, "<table><tbody>", "</tbody></table>"],
			td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
			_default: [0, "", ""]
		};
	Ka.optgroup = Ka.option, Ka.tbody = Ka.tfoot = Ka.colgroup = Ka.caption = Ka.thead, Ka.th = Ka.td;
	var La = /<|&#?\w+;/;
	! function () {
		var a = X.createDocumentFragment(),
			b = a.appendChild(X.createElement("div")),
			c = X.createElement("input");
		c.setAttribute("type", "radio"), c.setAttribute("checked", "checked"), c.setAttribute("name", "t"), b.appendChild(c), da.checkClone = b.cloneNode(!0).cloneNode(!0).lastChild.checked, b.innerHTML = "<textarea>x</textarea>", da.noCloneChecked = !!b.cloneNode(!0).lastChild.defaultValue
	}();
	var Ma = /^key/,
		Na = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		Oa = /^([^.]*)(?:\.(.+)|)/;
	fa.event = {
		global: {},
		add: function (a, b, c, d, e) {
			var f, g, h, i, j, k, l, m, n, o, p, q = za.get(a);
			if (q)
				for (c.handler && (f = c, c = f.handler, e = f.selector), c.guid || (c.guid = fa.guid++), (i = q.events) || (i = q.events = {}), (g = q.handle) || (g = q.handle = function (b) {
						return "undefined" != typeof fa && fa.event.triggered !== b.type ? fa.event.dispatch.apply(a, arguments) : void 0
					}), b = (b || "").match(va) || [""], j = b.length; j--;) h = Oa.exec(b[j]) || [], n = p = h[1], o = (h[2] || "").split(".").sort(), n && (l = fa.event.special[n] || {}, n = (e ? l.delegateType : l.bindType) || n, l = fa.event.special[n] || {}, k = fa.extend({
					type: n,
					origType: p,
					data: d,
					handler: c,
					guid: c.guid,
					selector: e,
					needsContext: e && fa.expr.match.needsContext.test(e),
					namespace: o.join(".")
				}, f), (m = i[n]) || (m = i[n] = [], m.delegateCount = 0, l.setup && l.setup.call(a, d, o, g) !== !1 || a.addEventListener && a.addEventListener(n, g)), l.add && (l.add.call(a, k), k.handler.guid || (k.handler.guid = c.guid)), e ? m.splice(m.delegateCount++, 0, k) : m.push(k), fa.event.global[n] = !0)
		},
		remove: function (a, b, c, d, e) {
			var f, g, h, i, j, k, l, m, n, o, p, q = za.hasData(a) && za.get(a);
			if (q && (i = q.events)) {
				for (b = (b || "").match(va) || [""], j = b.length; j--;)
					if (h = Oa.exec(b[j]) || [], n = p = h[1], o = (h[2] || "").split(".").sort(), n) {
						for (l = fa.event.special[n] || {}, n = (d ? l.delegateType : l.bindType) || n, m = i[n] || [], h = h[2] && new RegExp("(^|\\.)" + o.join("\\.(?:.*\\.|)") + "(\\.|$)"), g = f = m.length; f--;) k = m[f], !e && p !== k.origType || c && c.guid !== k.guid || h && !h.test(k.namespace) || d && d !== k.selector && ("**" !== d || !k.selector) || (m.splice(f, 1),
							k.selector && m.delegateCount--, l.remove && l.remove.call(a, k));
						g && !m.length && (l.teardown && l.teardown.call(a, o, q.handle) !== !1 || fa.removeEvent(a, n, q.handle), delete i[n])
					} else
						for (n in i) fa.event.remove(a, n + b[j], c, d, !0);
				fa.isEmptyObject(i) && za.remove(a, "handle events")
			}
		},
		dispatch: function (a) {
			a = fa.event.fix(a);
			var b, c, d, e, f, g = [],
				h = Y.call(arguments),
				i = (za.get(this, "events") || {})[a.type] || [],
				j = fa.event.special[a.type] || {};
			if (h[0] = a, a.delegateTarget = this, !j.preDispatch || j.preDispatch.call(this, a) !== !1) {
				for (g = fa.event.handlers.call(this, a, i), b = 0;
					(e = g[b++]) && !a.isPropagationStopped();)
					for (a.currentTarget = e.elem, c = 0;
						(f = e.handlers[c++]) && !a.isImmediatePropagationStopped();) a.rnamespace && !a.rnamespace.test(f.namespace) || (a.handleObj = f, a.data = f.data, d = ((fa.event.special[f.origType] || {}).handle || f.handler).apply(e.elem, h), void 0 !== d && (a.result = d) === !1 && (a.preventDefault(), a.stopPropagation()));
				return j.postDispatch && j.postDispatch.call(this, a), a.result
			}
		},
		handlers: function (a, b) {
			var c, d, e, f, g = [],
				h = b.delegateCount,
				i = a.target;
			if (h && i.nodeType && ("click" !== a.type || isNaN(a.button) || a.button < 1))
				for (; i !== this; i = i.parentNode || this)
					if (1 === i.nodeType && (i.disabled !== !0 || "click" !== a.type)) {
						for (d = [], c = 0; c < h; c++) f = b[c], e = f.selector + " ", void 0 === d[e] && (d[e] = f.needsContext ? fa(e, this).index(i) > -1 : fa.find(e, this, null, [i]).length), d[e] && d.push(f);
						d.length && g.push({
							elem: i,
							handlers: d
						})
					}
			return h < b.length && g.push({
				elem: this,
				handlers: b.slice(h)
			}), g
		},
		props: "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
		fixHooks: {},
		keyHooks: {
			props: "char charCode key keyCode".split(" "),
			filter: function (a, b) {
				return null == a.which && (a.which = null != b.charCode ? b.charCode : b.keyCode), a
			}
		},
		mouseHooks: {
			props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
			filter: function (a, b) {
				var c, d, e, f = b.button;
				return null == a.pageX && null != b.clientX && (c = a.target.ownerDocument || X, d = c.documentElement, e = c.body, a.pageX = b.clientX + (d && d.scrollLeft || e && e.scrollLeft || 0) - (d && d.clientLeft || e && e.clientLeft || 0), a.pageY = b.clientY + (d && d.scrollTop || e && e.scrollTop || 0) - (d && d.clientTop || e && e.clientTop || 0)), a.which || void 0 === f || (a.which = 1 & f ? 1 : 2 & f ? 3 : 4 & f ? 2 : 0), a
			}
		},
		fix: function (a) {
			if (a[fa.expando]) return a;
			var b, c, d, e = a.type,
				f = a,
				g = this.fixHooks[e];
			for (g || (this.fixHooks[e] = g = Na.test(e) ? this.mouseHooks : Ma.test(e) ? this.keyHooks : {}), d = g.props ? this.props.concat(g.props) : this.props, a = new fa.Event(f), b = d.length; b--;) c = d[b], a[c] = f[c];
			return a.target || (a.target = X), 3 === a.target.nodeType && (a.target = a.target.parentNode), g.filter ? g.filter(a, f) : a
		},
		special: {
			load: {
				noBubble: !0
			},
			focus: {
				trigger: function () {
					if (this !== p() && this.focus) return this.focus(), !1
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function () {
					if (this === p() && this.blur) return this.blur(), !1
				},
				delegateType: "focusout"
			},
			click: {
				trigger: function () {
					if ("checkbox" === this.type && this.click && fa.nodeName(this, "input")) return this.click(), !1
				},
				_default: function (a) {
					return fa.nodeName(a.target, "a")
				}
			},
			beforeunload: {
				postDispatch: function (a) {
					void 0 !== a.result && a.originalEvent && (a.originalEvent.returnValue = a.result)
				}
			}
		}
	}, fa.removeEvent = function (a, b, c) {
		a.removeEventListener && a.removeEventListener(b, c)
	}, fa.Event = function (a, b) {
		return this instanceof fa.Event ? (a && a.type ? (this.originalEvent = a, this.type = a.type, this.isDefaultPrevented = a.defaultPrevented || void 0 === a.defaultPrevented && a.returnValue === !1 ? n : o) : this.type = a, b && fa.extend(this, b), this.timeStamp = a && a.timeStamp || fa.now(), void(this[fa.expando] = !0)) : new fa.Event(a, b)
	}, fa.Event.prototype = {
		constructor: fa.Event,
		isDefaultPrevented: o,
		isPropagationStopped: o,
		isImmediatePropagationStopped: o,
		isSimulated: !1,
		preventDefault: function () {
			var a = this.originalEvent;
			this.isDefaultPrevented = n, a && !this.isSimulated && a.preventDefault()
		},
		stopPropagation: function () {
			var a = this.originalEvent;
			this.isPropagationStopped = n, a && !this.isSimulated && a.stopPropagation()
		},
		stopImmediatePropagation: function () {
			var a = this.originalEvent;
			this.isImmediatePropagationStopped = n, a && !this.isSimulated && a.stopImmediatePropagation(), this.stopPropagation()
		}
	}, fa.each({
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function (a, b) {
		fa.event.special[a] = {
			delegateType: b,
			bindType: b,
			handle: function (a) {
				var c, d = this,
					e = a.relatedTarget,
					f = a.handleObj;
				return e && (e === d || fa.contains(d, e)) || (a.type = f.origType, c = f.handler.apply(this, arguments), a.type = b), c
			}
		}
	}), fa.fn.extend({
		on: function (a, b, c, d) {
			return q(this, a, b, c, d)
		},
		one: function (a, b, c, d) {
			return q(this, a, b, c, d, 1)
		},
		off: function (a, b, c) {
			var d, e;
			if (a && a.preventDefault && a.handleObj) return d = a.handleObj, fa(a.delegateTarget).off(d.namespace ? d.origType + "." + d.namespace : d.origType, d.selector, d.handler), this;
			if ("object" == typeof a) {
				for (e in a) this.off(e, b, a[e]);
				return this
			}
			return b !== !1 && "function" != typeof b || (c = b, b = void 0), c === !1 && (c = o), this.each(function () {
				fa.event.remove(this, a, c, b)
			})
		}
	});
	var Pa = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,
		Qa = /<script|<style|<link/i,
		Ra = /checked\s*(?:[^=]|=\s*.checked.)/i,
		Sa = /^true\/(.*)/,
		Ta = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
	fa.extend({
		htmlPrefilter: function (a) {
			return a.replace(Pa, "<$1></$2>")
		},
		clone: function (a, b, c) {
			var d, e, f, g, h = a.cloneNode(!0),
				i = fa.contains(a.ownerDocument, a);
			if (!(da.noCloneChecked || 1 !== a.nodeType && 11 !== a.nodeType || fa.isXMLDoc(a)))
				for (g = k(h), f = k(a), d = 0, e = f.length; d < e; d++) v(f[d], g[d]);
			if (b)
				if (c)
					for (f = f || k(a), g = g || k(h), d = 0, e = f.length; d < e; d++) u(f[d], g[d]);
				else u(a, h);
			return g = k(h, "script"), g.length > 0 && l(g, !i && k(a, "script")), h
		},
		cleanData: function (a) {
			for (var b, c, d, e = fa.event.special, f = 0; void 0 !== (c = a[f]); f++)
				if (ya(c)) {
					if (b = c[za.expando]) {
						if (b.events)
							for (d in b.events) e[d] ? fa.event.remove(c, d) : fa.removeEvent(c, d, b.handle);
						c[za.expando] = void 0
					}
					c[Aa.expando] && (c[Aa.expando] = void 0)
				}
		}
	}), fa.fn.extend({
		domManip: w,
		detach: function (a) {
			return x(this, a, !0)
		},
		remove: function (a) {
			return x(this, a)
		},
		text: function (a) {
			return xa(this, function (a) {
				return void 0 === a ? fa.text(this) : this.empty().each(function () {
					1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || (this.textContent = a)
				})
			}, null, a, arguments.length)
		},
		append: function () {
			return w(this, arguments, function (a) {
				if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
					var b = r(this, a);
					b.appendChild(a)
				}
			})
		},
		prepend: function () {
			return w(this, arguments, function (a) {
				if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
					var b = r(this, a);
					b.insertBefore(a, b.firstChild)
				}
			})
		},
		before: function () {
			return w(this, arguments, function (a) {
				this.parentNode && this.parentNode.insertBefore(a, this)
			})
		},
		after: function () {
			return w(this, arguments, function (a) {
				this.parentNode && this.parentNode.insertBefore(a, this.nextSibling)
			})
		},
		empty: function () {
			for (var a, b = 0; null != (a = this[b]); b++) 1 === a.nodeType && (fa.cleanData(k(a, !1)), a.textContent = "");
			return this
		},
		clone: function (a, b) {
			return a = null != a && a, b = null == b ? a : b, this.map(function () {
				return fa.clone(this, a, b)
			})
		},
		html: function (a) {
			return xa(this, function (a) {
				var b = this[0] || {},
					c = 0,
					d = this.length;
				if (void 0 === a && 1 === b.nodeType) return b.innerHTML;
				if ("string" == typeof a && !Qa.test(a) && !Ka[(Ia.exec(a) || ["", ""])[1].toLowerCase()]) {
					a = fa.htmlPrefilter(a);
					try {
						for (; c < d; c++) b = this[c] || {}, 1 === b.nodeType && (fa.cleanData(k(b, !1)), b.innerHTML = a);
						b = 0
					} catch (a) {}
				}
				b && this.empty().append(a)
			}, null, a, arguments.length)
		},
		replaceWith: function () {
			var a = [];
			return w(this, arguments, function (b) {
				var c = this.parentNode;
				fa.inArray(this, a) < 0 && (fa.cleanData(k(this)), c && c.replaceChild(b, this))
			}, a)
		}
	}), fa.each({
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function (a, b) {
		fa.fn[a] = function (a) {
			for (var c, d = [], e = fa(a), f = e.length - 1, g = 0; g <= f; g++) c = g === f ? this : this.clone(!0), fa(e[g])[b](c), $.apply(d, c.get());
			return this.pushStack(d)
		}
	});
	var Ua, Va = {
			HTML: "block",
			BODY: "block"
		},
		Wa = /^margin/,
		Xa = new RegExp("^(" + Da + ")(?!px)[a-z%]+$", "i"),
		Ya = function (b) {
			var c = b.ownerDocument.defaultView;
			return c && c.opener || (c = a), c.getComputedStyle(b)
		},
		Za = function (a, b, c, d) {
			var e, f, g = {};
			for (f in b) g[f] = a.style[f], a.style[f] = b[f];
			e = c.apply(a, d || []);
			for (f in b) a.style[f] = g[f];
			return e
		},
		$a = X.documentElement;
	! function () {
		function b() {
			h.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%", h.innerHTML = "", $a.appendChild(g);
			var b = a.getComputedStyle(h);
			c = "1%" !== b.top, f = "2px" === b.marginLeft, d = "4px" === b.width, h.style.marginRight = "50%", e = "4px" === b.marginRight, $a.removeChild(g)
		}
		var c, d, e, f, g = X.createElement("div"),
			h = X.createElement("div");
		h.style && (h.style.backgroundClip = "content-box", h.cloneNode(!0).style.backgroundClip = "", da.clearCloneStyle = "content-box" === h.style.backgroundClip, g.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute", g.appendChild(h), fa.extend(da, {
			pixelPosition: function () {
				return b(), c
			},
			boxSizingReliable: function () {
				return null == d && b(), d
			},
			pixelMarginRight: function () {
				return null == d && b(), e
			},
			reliableMarginLeft: function () {
				return null == d && b(), f
			},
			reliableMarginRight: function () {
				var b, c = h.appendChild(X.createElement("div"));
				return c.style.cssText = h.style.cssText = "-webkit-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0", c.style.marginRight = c.style.width = "0", h.style.width = "1px", $a.appendChild(g), b = !parseFloat(a.getComputedStyle(c).marginRight), $a.removeChild(g), h.removeChild(c), b
			}
		}))
	}();
	var _a = /^(none|table(?!-c[ea]).+)/,
		ab = {
			position: "absolute",
			visibility: "hidden",
			display: "block"
		},
		bb = {
			letterSpacing: "0",
			fontWeight: "400"
		},
		cb = ["Webkit", "O", "Moz", "ms"],
		db = X.createElement("div").style;
	fa.extend({
		cssHooks: {
			opacity: {
				get: function (a, b) {
					if (b) {
						var c = A(a, "opacity");
						return "" === c ? "1" : c
					}
				}
			}
		},
		cssNumber: {
			animationIterationCount: !0,
			columnCount: !0,
			fillOpacity: !0,
			flexGrow: !0,
			flexShrink: !0,
			fontWeight: !0,
			lineHeight: !0,
			opacity: !0,
			order: !0,
			orphans: !0,
			widows: !0,
			zIndex: !0,
			zoom: !0
		},
		cssProps: {
			float: "cssFloat"
		},
		style: function (a, b, c, d) {
			if (a && 3 !== a.nodeType && 8 !== a.nodeType && a.style) {
				var e, f, g, h = fa.camelCase(b),
					i = a.style;
				return b = fa.cssProps[h] || (fa.cssProps[h] = C(h) || h), g = fa.cssHooks[b] || fa.cssHooks[h], void 0 === c ? g && "get" in g && void 0 !== (e = g.get(a, !1, d)) ? e : i[b] : (f = typeof c, "string" === f && (e = Ea.exec(c)) && e[1] && (c = j(a, b, e), f = "number"), null != c && c === c && ("number" === f && (c += e && e[3] || (fa.cssNumber[h] ? "" : "px")), da.clearCloneStyle || "" !== c || 0 !== b.indexOf("background") || (i[b] = "inherit"), g && "set" in g && void 0 === (c = g.set(a, c, d)) || (i[b] = c)), void 0)
			}
		},
		css: function (a, b, c, d) {
			var e, f, g, h = fa.camelCase(b);
			return b = fa.cssProps[h] || (fa.cssProps[h] = C(h) || h), g = fa.cssHooks[b] || fa.cssHooks[h], g && "get" in g && (e = g.get(a, !0, c)), void 0 === e && (e = A(a, b, d)), "normal" === e && b in bb && (e = bb[b]), "" === c || c ? (f = parseFloat(e), c === !0 || isFinite(f) ? f || 0 : e) : e
		}
	}), fa.each(["height", "width"], function (a, b) {
		fa.cssHooks[b] = {
			get: function (a, c, d) {
				if (c) return _a.test(fa.css(a, "display")) && 0 === a.offsetWidth ? Za(a, ab, function () {
					return F(a, b, d)
				}) : F(a, b, d)
			},
			set: function (a, c, d) {
				var e, f = d && Ya(a),
					g = d && E(a, b, d, "border-box" === fa.css(a, "boxSizing", !1, f), f);
				return g && (e = Ea.exec(c)) && "px" !== (e[3] || "px") && (a.style[b] = c, c = fa.css(a, b)), D(a, c, g)
			}
		}
	}), fa.cssHooks.marginLeft = B(da.reliableMarginLeft, function (a, b) {
		if (b) return (parseFloat(A(a, "marginLeft")) || a.getBoundingClientRect().left - Za(a, {
			marginLeft: 0
		}, function () {
			return a.getBoundingClientRect().left
		})) + "px"
	}), fa.cssHooks.marginRight = B(da.reliableMarginRight, function (a, b) {
		if (b) return Za(a, {
			display: "inline-block"
		}, A, [a, "marginRight"])
	}), fa.each({
		margin: "",
		padding: "",
		border: "Width"
	}, function (a, b) {
		fa.cssHooks[a + b] = {
			expand: function (c) {
				for (var d = 0, e = {}, f = "string" == typeof c ? c.split(" ") : [c]; d < 4; d++) e[a + Fa[d] + b] = f[d] || f[d - 2] || f[0];
				return e
			}
		}, Wa.test(a) || (fa.cssHooks[a + b].set = D)
	}), fa.fn.extend({
		css: function (a, b) {
			return xa(this, function (a, b, c) {
				var d, e, f = {},
					g = 0;
				if (fa.isArray(b)) {
					for (d = Ya(a), e = b.length; g < e; g++) f[b[g]] = fa.css(a, b[g], !1, d);
					return f
				}
				return void 0 !== c ? fa.style(a, b, c) : fa.css(a, b)
			}, a, b, arguments.length > 1)
		},
		show: function () {
			return G(this, !0)
		},
		hide: function () {
			return G(this)
		},
		toggle: function (a) {
			return "boolean" == typeof a ? a ? this.show() : this.hide() : this.each(function () {
				Ga(this) ? fa(this).show() : fa(this).hide()
			})
		}
	}), fa.Tween = H, H.prototype = {
		constructor: H,
		init: function (a, b, c, d, e, f) {
			this.elem = a, this.prop = c, this.easing = e || fa.easing._default, this.options = b, this.start = this.now = this.cur(), this.end = d, this.unit = f || (fa.cssNumber[c] ? "" : "px")
		},
		cur: function () {
			var a = H.propHooks[this.prop];
			return a && a.get ? a.get(this) : H.propHooks._default.get(this)
		},
		run: function (a) {
			var b, c = H.propHooks[this.prop];
			return this.options.duration ? this.pos = b = fa.easing[this.easing](a, this.options.duration * a, 0, 1, this.options.duration) : this.pos = b = a, this.now = (this.end - this.start) * b + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), c && c.set ? c.set(this) : H.propHooks._default.set(this), this
		}
	}, H.prototype.init.prototype = H.prototype, H.propHooks = {
		_default: {
			get: function (a) {
				var b;
				return 1 !== a.elem.nodeType || null != a.elem[a.prop] && null == a.elem.style[a.prop] ? a.elem[a.prop] : (b = fa.css(a.elem, a.prop, ""), b && "auto" !== b ? b : 0)
			},
			set: function (a) {
				fa.fx.step[a.prop] ? fa.fx.step[a.prop](a) : 1 !== a.elem.nodeType || null == a.elem.style[fa.cssProps[a.prop]] && !fa.cssHooks[a.prop] ? a.elem[a.prop] = a.now : fa.style(a.elem, a.prop, a.now + a.unit)
			}
		}
	}, H.propHooks.scrollTop = H.propHooks.scrollLeft = {
		set: function (a) {
			a.elem.nodeType && a.elem.parentNode && (a.elem[a.prop] = a.now)
		}
	}, fa.easing = {
		linear: function (a) {
			return a
		},
		swing: function (a) {
			return .5 - Math.cos(a * Math.PI) / 2
		},
		_default: "swing"
	}, fa.fx = H.prototype.init, fa.fx.step = {};
	var eb, fb, gb = /^(?:toggle|show|hide)$/,
		hb = /queueHooks$/;
	fa.Animation = fa.extend(N, {
			tweeners: {
				"*": [function (a, b) {
					var c = this.createTween(a, b);
					return j(c.elem, a, Ea.exec(b), c), c
				}]
			},
			tweener: function (a, b) {
				fa.isFunction(a) ? (b = a, a = ["*"]) : a = a.match(va);
				for (var c, d = 0, e = a.length; d < e; d++) c = a[d], N.tweeners[c] = N.tweeners[c] || [], N.tweeners[c].unshift(b)
			},
			prefilters: [L],
			prefilter: function (a, b) {
				b ? N.prefilters.unshift(a) : N.prefilters.push(a)
			}
		}), fa.speed = function (a, b, c) {
			var d = a && "object" == typeof a ? fa.extend({}, a) : {
				complete: c || !c && b || fa.isFunction(a) && a,
				duration: a,
				easing: c && b || b && !fa.isFunction(b) && b
			};
			return d.duration = fa.fx.off ? 0 : "number" == typeof d.duration ? d.duration : d.duration in fa.fx.speeds ? fa.fx.speeds[d.duration] : fa.fx.speeds._default, null != d.queue && d.queue !== !0 || (d.queue = "fx"), d.old = d.complete, d.complete = function () {
				fa.isFunction(d.old) && d.old.call(this), d.queue && fa.dequeue(this, d.queue)
			}, d
		}, fa.fn.extend({
			fadeTo: function (a, b, c, d) {
				return this.filter(Ga).css("opacity", 0).show().end().animate({
					opacity: b
				}, a, c, d)
			},
			animate: function (a, b, c, d) {
				var e = fa.isEmptyObject(a),
					f = fa.speed(b, c, d),
					g = function () {
						var b = N(this, fa.extend({}, a), f);
						(e || za.get(this, "finish")) && b.stop(!0)
					};
				return g.finish = g, e || f.queue === !1 ? this.each(g) : this.queue(f.queue, g)
			},
			stop: function (a, b, c) {
				var d = function (a) {
					var b = a.stop;
					delete a.stop, b(c)
				};
				return "string" != typeof a && (c = b, b = a, a = void 0), b && a !== !1 && this.queue(a || "fx", []), this.each(function () {
					var b = !0,
						e = null != a && a + "queueHooks",
						f = fa.timers,
						g = za.get(this);
					if (e) g[e] && g[e].stop && d(g[e]);
					else
						for (e in g) g[e] && g[e].stop && hb.test(e) && d(g[e]);
					for (e = f.length; e--;) f[e].elem !== this || null != a && f[e].queue !== a || (f[e].anim.stop(c), b = !1, f.splice(e, 1));
					!b && c || fa.dequeue(this, a)
				})
			},
			finish: function (a) {
				return a !== !1 && (a = a || "fx"), this.each(function () {
					var b, c = za.get(this),
						d = c[a + "queue"],
						e = c[a + "queueHooks"],
						f = fa.timers,
						g = d ? d.length : 0;
					for (c.finish = !0, fa.queue(this, a, []), e && e.stop && e.stop.call(this, !0), b = f.length; b--;) f[b].elem === this && f[b].queue === a && (f[b].anim.stop(!0), f.splice(b, 1));
					for (b = 0; b < g; b++) d[b] && d[b].finish && d[b].finish.call(this);
					delete c.finish
				})
			}
		}), fa.each(["toggle", "show", "hide"], function (a, b) {
			var c = fa.fn[b];
			fa.fn[b] = function (a, d, e) {
				return null == a || "boolean" == typeof a ? c.apply(this, arguments) : this.animate(J(b, !0), a, d, e)
			}
		}), fa.each({
			slideDown: J("show"),
			slideUp: J("hide"),
			slideToggle: J("toggle"),
			fadeIn: {
				opacity: "show"
			},
			fadeOut: {
				opacity: "hide"
			},
			fadeToggle: {
				opacity: "toggle"
			}
		}, function (a, b) {
			fa.fn[a] = function (a, c, d) {
				return this.animate(b, a, c, d)
			}
		}), fa.timers = [], fa.fx.tick = function () {
			var a, b = 0,
				c = fa.timers;
			for (eb = fa.now(); b < c.length; b++) a = c[b], a() || c[b] !== a || c.splice(b--, 1);
			c.length || fa.fx.stop(), eb = void 0
		}, fa.fx.timer = function (a) {
			fa.timers.push(a), a() ? fa.fx.start() : fa.timers.pop()
		}, fa.fx.interval = 13, fa.fx.start = function () {
			fb || (fb = a.setInterval(fa.fx.tick, fa.fx.interval))
		}, fa.fx.stop = function () {
			a.clearInterval(fb), fb = null
		}, fa.fx.speeds = {
			slow: 600,
			fast: 200,
			_default: 400
		}, fa.fn.delay = function (b, c) {
			return b = fa.fx ? fa.fx.speeds[b] || b : b, c = c || "fx", this.queue(c, function (c, d) {
				var e = a.setTimeout(c, b);
				d.stop = function () {
					a.clearTimeout(e)
				}
			})
		},
		function () {
			var a = X.createElement("input"),
				b = X.createElement("select"),
				c = b.appendChild(X.createElement("option"));
			a.type = "checkbox", da.checkOn = "" !== a.value, da.optSelected = c.selected, b.disabled = !0, da.optDisabled = !c.disabled, a = X.createElement("input"), a.value = "t", a.type = "radio", da.radioValue = "t" === a.value
		}();
	var ib, jb = fa.expr.attrHandle;
	fa.fn.extend({
		attr: function (a, b) {
			return xa(this, fa.attr, a, b, arguments.length > 1)
		},
		removeAttr: function (a) {
			return this.each(function () {
				fa.removeAttr(this, a)
			})
		}
	}), fa.extend({
		attr: function (a, b, c) {
			var d, e, f = a.nodeType;
			if (3 !== f && 8 !== f && 2 !== f) return "undefined" == typeof a.getAttribute ? fa.prop(a, b, c) : (1 === f && fa.isXMLDoc(a) || (b = b.toLowerCase(), e = fa.attrHooks[b] || (fa.expr.match.bool.test(b) ? ib : void 0)), void 0 !== c ? null === c ? void fa.removeAttr(a, b) : e && "set" in e && void 0 !== (d = e.set(a, c, b)) ? d : (a.setAttribute(b, c + ""), c) : e && "get" in e && null !== (d = e.get(a, b)) ? d : (d = fa.find.attr(a, b), null == d ? void 0 : d))
		},
		attrHooks: {
			type: {
				set: function (a, b) {
					if (!da.radioValue && "radio" === b && fa.nodeName(a, "input")) {
						var c = a.value;
						return a.setAttribute("type", b), c && (a.value = c), b
					}
				}
			}
		},
		removeAttr: function (a, b) {
			var c, d, e = 0,
				f = b && b.match(va);
			if (f && 1 === a.nodeType)
				for (; c = f[e++];) d = fa.propFix[c] || c, fa.expr.match.bool.test(c) && (a[d] = !1), a.removeAttribute(c)
		}
	}), ib = {
		set: function (a, b, c) {
			return b === !1 ? fa.removeAttr(a, c) : a.setAttribute(c, c), c
		}
	}, fa.each(fa.expr.match.bool.source.match(/\w+/g), function (a, b) {
		var c = jb[b] || fa.find.attr;
		jb[b] = function (a, b, d) {
			var e, f;
			return d || (f = jb[b], jb[b] = e, e = null != c(a, b, d) ? b.toLowerCase() : null, jb[b] = f), e
		}
	});
	var kb = /^(?:input|select|textarea|button)$/i,
		lb = /^(?:a|area)$/i;
	fa.fn.extend({
		prop: function (a, b) {
			return xa(this, fa.prop, a, b, arguments.length > 1)
		},
		removeProp: function (a) {
			return this.each(function () {
				delete this[fa.propFix[a] || a]
			})
		}
	}), fa.extend({
		prop: function (a, b, c) {
			var d, e, f = a.nodeType;
			if (3 !== f && 8 !== f && 2 !== f) return 1 === f && fa.isXMLDoc(a) || (b = fa.propFix[b] || b, e = fa.propHooks[b]), void 0 !== c ? e && "set" in e && void 0 !== (d = e.set(a, c, b)) ? d : a[b] = c : e && "get" in e && null !== (d = e.get(a, b)) ? d : a[b]
		},
		propHooks: {
			tabIndex: {
				get: function (a) {
					var b = fa.find.attr(a, "tabindex");
					return b ? parseInt(b, 10) : kb.test(a.nodeName) || lb.test(a.nodeName) && a.href ? 0 : -1
				}
			}
		},
		propFix: {
			for: "htmlFor",
			class: "className"
		}
	}), da.optSelected || (fa.propHooks.selected = {
		get: function (a) {
			var b = a.parentNode;
			return b && b.parentNode && b.parentNode.selectedIndex, null
		},
		set: function (a) {
			var b = a.parentNode;
			b && (b.selectedIndex, b.parentNode && b.parentNode.selectedIndex)
		}
	}), fa.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
		fa.propFix[this.toLowerCase()] = this
	});
	var mb = /[\t\r\n\f]/g;
	fa.fn.extend({
		addClass: function (a) {
			var b, c, d, e, f, g, h, i = 0;
			if (fa.isFunction(a)) return this.each(function (b) {
				fa(this).addClass(a.call(this, b, O(this)))
			});
			if ("string" == typeof a && a)
				for (b = a.match(va) || []; c = this[i++];)
					if (e = O(c), d = 1 === c.nodeType && (" " + e + " ").replace(mb, " ")) {
						for (g = 0; f = b[g++];) d.indexOf(" " + f + " ") < 0 && (d += f + " ");
						h = fa.trim(d), e !== h && c.setAttribute("class", h)
					}
			return this
		},
		removeClass: function (a) {
			var b, c, d, e, f, g, h, i = 0;
			if (fa.isFunction(a)) return this.each(function (b) {
				fa(this).removeClass(a.call(this, b, O(this)))
			});
			if (!arguments.length) return this.attr("class", "");
			if ("string" == typeof a && a)
				for (b = a.match(va) || []; c = this[i++];)
					if (e = O(c), d = 1 === c.nodeType && (" " + e + " ").replace(mb, " ")) {
						for (g = 0; f = b[g++];)
							for (; d.indexOf(" " + f + " ") > -1;) d = d.replace(" " + f + " ", " ");
						h = fa.trim(d), e !== h && c.setAttribute("class", h)
					}
			return this
		},
		toggleClass: function (a, b) {
			var c = typeof a;
			return "boolean" == typeof b && "string" === c ? b ? this.addClass(a) : this.removeClass(a) : fa.isFunction(a) ? this.each(function (c) {
				fa(this).toggleClass(a.call(this, c, O(this), b), b)
			}) : this.each(function () {
				var b, d, e, f;
				if ("string" === c)
					for (d = 0, e = fa(this), f = a.match(va) || []; b = f[d++];) e.hasClass(b) ? e.removeClass(b) : e.addClass(b);
				else void 0 !== a && "boolean" !== c || (b = O(this), b && za.set(this, "__className__", b), this.setAttribute && this.setAttribute("class", b || a === !1 ? "" : za.get(this, "__className__") || ""))
			})
		},
		hasClass: function (a) {
			var b, c, d = 0;
			for (b = " " + a + " "; c = this[d++];)
				if (1 === c.nodeType && (" " + O(c) + " ").replace(mb, " ").indexOf(b) > -1) return !0;
			return !1
		}
	});
	var nb = /\r/g,
		ob = /[\x20\t\r\n\f]+/g;
	fa.fn.extend({
		val: function (a) {
			var b, c, d, e = this[0]; {
				if (arguments.length) return d = fa.isFunction(a), this.each(function (c) {
					var e;
					1 === this.nodeType && (e = d ? a.call(this, c, fa(this).val()) : a, null == e ? e = "" : "number" == typeof e ? e += "" : fa.isArray(e) && (e = fa.map(e, function (a) {
						return null == a ? "" : a + ""
					})), b = fa.valHooks[this.type] || fa.valHooks[this.nodeName.toLowerCase()], b && "set" in b && void 0 !== b.set(this, e, "value") || (this.value = e))
				});
				if (e) return b = fa.valHooks[e.type] || fa.valHooks[e.nodeName.toLowerCase()], b && "get" in b && void 0 !== (c = b.get(e, "value")) ? c : (c = e.value, "string" == typeof c ? c.replace(nb, "") : null == c ? "" : c)
			}
		}
	}), fa.extend({
		valHooks: {
			option: {
				get: function (a) {
					var b = fa.find.attr(a, "value");
					return null != b ? b : fa.trim(fa.text(a)).replace(ob, " ")
				}
			},
			select: {
				get: function (a) {
					for (var b, c, d = a.options, e = a.selectedIndex, f = "select-one" === a.type || e < 0, g = f ? null : [], h = f ? e + 1 : d.length, i = e < 0 ? h : f ? e : 0; i < h; i++)
						if (c = d[i], (c.selected || i === e) && (da.optDisabled ? !c.disabled : null === c.getAttribute("disabled")) && (!c.parentNode.disabled || !fa.nodeName(c.parentNode, "optgroup"))) {
							if (b = fa(c).val(), f) return b;
							g.push(b)
						}
					return g
				},
				set: function (a, b) {
					for (var c, d, e = a.options, f = fa.makeArray(b), g = e.length; g--;) d = e[g], (d.selected = fa.inArray(fa.valHooks.option.get(d), f) > -1) && (c = !0);
					return c || (a.selectedIndex = -1), f
				}
			}
		}
	}), fa.each(["radio", "checkbox"], function () {
		fa.valHooks[this] = {
			set: function (a, b) {
				if (fa.isArray(b)) return a.checked = fa.inArray(fa(a).val(), b) > -1
			}
		}, da.checkOn || (fa.valHooks[this].get = function (a) {
			return null === a.getAttribute("value") ? "on" : a.value
		})
	});
	var pb = /^(?:focusinfocus|focusoutblur)$/;
	fa.extend(fa.event, {
		trigger: function (b, c, d, e) {
			var f, g, h, i, j, k, l, m = [d || X],
				n = ca.call(b, "type") ? b.type : b,
				o = ca.call(b, "namespace") ? b.namespace.split(".") : [];
			if (g = h = d = d || X, 3 !== d.nodeType && 8 !== d.nodeType && !pb.test(n + fa.event.triggered) && (n.indexOf(".") > -1 && (o = n.split("."), n = o.shift(), o.sort()), j = n.indexOf(":") < 0 && "on" + n, b = b[fa.expando] ? b : new fa.Event(n, "object" == typeof b && b), b.isTrigger = e ? 2 : 3, b.namespace = o.join("."), b.rnamespace = b.namespace ? new RegExp("(^|\\.)" + o.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, b.result = void 0, b.target || (b.target = d), c = null == c ? [b] : fa.makeArray(c, [b]), l = fa.event.special[n] || {}, e || !l.trigger || l.trigger.apply(d, c) !== !1)) {
				if (!e && !l.noBubble && !fa.isWindow(d)) {
					for (i = l.delegateType || n, pb.test(i + n) || (g = g.parentNode); g; g = g.parentNode) m.push(g), h = g;
					h === (d.ownerDocument || X) && m.push(h.defaultView || h.parentWindow || a)
				}
				for (f = 0;
					(g = m[f++]) && !b.isPropagationStopped();) b.type = f > 1 ? i : l.bindType || n, k = (za.get(g, "events") || {})[b.type] && za.get(g, "handle"), k && k.apply(g, c), k = j && g[j], k && k.apply && ya(g) && (b.result = k.apply(g, c), b.result === !1 && b.preventDefault());
				return b.type = n, e || b.isDefaultPrevented() || l._default && l._default.apply(m.pop(), c) !== !1 || !ya(d) || j && fa.isFunction(d[n]) && !fa.isWindow(d) && (h = d[j], h && (d[j] = null), fa.event.triggered = n, d[n](), fa.event.triggered = void 0, h && (d[j] = h)), b.result
			}
		},
		simulate: function (a, b, c) {
			var d = fa.extend(new fa.Event, c, {
				type: a,
				isSimulated: !0
			});
			fa.event.trigger(d, null, b)
		}
	}), fa.fn.extend({
		trigger: function (a, b) {
			return this.each(function () {
				fa.event.trigger(a, b, this)
			})
		},
		triggerHandler: function (a, b) {
			var c = this[0];
			if (c) return fa.event.trigger(a, b, c, !0)
		}
	}), fa.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "), function (a, b) {
		fa.fn[b] = function (a, c) {
			return arguments.length > 0 ? this.on(b, null, a, c) : this.trigger(b)
		}
	}), fa.fn.extend({
		hover: function (a, b) {
			return this.mouseenter(a).mouseleave(b || a)
		}
	}), da.focusin = "onfocusin" in a, da.focusin || fa.each({
		focus: "focusin",
		blur: "focusout"
	}, function (a, b) {
		var c = function (a) {
			fa.event.simulate(b, a.target, fa.event.fix(a))
		};
		fa.event.special[b] = {
			setup: function () {
				var d = this.ownerDocument || this,
					e = za.access(d, b);
				e || d.addEventListener(a, c, !0), za.access(d, b, (e || 0) + 1)
			},
			teardown: function () {
				var d = this.ownerDocument || this,
					e = za.access(d, b) - 1;
				e ? za.access(d, b, e) : (d.removeEventListener(a, c, !0), za.remove(d, b))
			}
		}
	});
	var qb = a.location,
		rb = fa.now(),
		sb = /\?/;
	fa.parseJSON = function (a) {
		return JSON.parse(a + "")
	}, fa.parseXML = function (b) {
		var c;
		if (!b || "string" != typeof b) return null;
		try {
			c = (new a.DOMParser).parseFromString(b, "text/xml")
		} catch (a) {
			c = void 0
		}
		return c && !c.getElementsByTagName("parsererror").length || fa.error("Invalid XML: " + b), c
	};
	var tb = /#.*$/,
		ub = /([?&])_=[^&]*/,
		vb = /^(.*?):[ \t]*([^\r\n]*)$/gm,
		wb = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		xb = /^(?:GET|HEAD)$/,
		yb = /^\/\//,
		zb = {},
		Ab = {},
		Bb = "*/".concat("*"),
		Cb = X.createElement("a");
	Cb.href = qb.href, fa.extend({
		active: 0,
		lastModified: {},
		etag: {},
		ajaxSettings: {
			url: qb.href,
			type: "GET",
			isLocal: wb.test(qb.protocol),
			global: !0,
			processData: !0,
			async: !0,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
			accepts: {
				"*": Bb,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},
			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},
			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},
			converters: {
				"* text": String,
				"text html": !0,
				"text json": fa.parseJSON,
				"text xml": fa.parseXML
			},
			flatOptions: {
				url: !0,
				context: !0
			}
		},
		ajaxSetup: function (a, b) {
			return b ? R(R(a, fa.ajaxSettings), b) : R(fa.ajaxSettings, a)
		},
		ajaxPrefilter: P(zb),
		ajaxTransport: P(Ab),
		ajax: function (b, c) {
			function d(b, c, d, h) {
				var j, l, s, t, v, x = c;
				2 !== u && (u = 2, i && a.clearTimeout(i), e = void 0, g = h || "", w.readyState = b > 0 ? 4 : 0, j = b >= 200 && b < 300 || 304 === b, d && (t = S(m, w, d)), t = T(m, t, w, j), j ? (m.ifModified && (v = w.getResponseHeader("Last-Modified"), v && (fa.lastModified[f] = v), v = w.getResponseHeader("etag"), v && (fa.etag[f] = v)), 204 === b || "HEAD" === m.type ? x = "nocontent" : 304 === b ? x = "notmodified" : (x = t.state, l = t.data, s = t.error, j = !s)) : (s = x, !b && x || (x = "error", b < 0 && (b = 0))), w.status = b, w.statusText = (c || x) + "", j ? p.resolveWith(n, [l, x, w]) : p.rejectWith(n, [w, x, s]), w.statusCode(r), r = void 0, k && o.trigger(j ? "ajaxSuccess" : "ajaxError", [w, m, j ? l : s]), q.fireWith(n, [w, x]), k && (o.trigger("ajaxComplete", [w, m]), --fa.active || fa.event.trigger("ajaxStop")))
			}
			"object" == typeof b && (c = b, b = void 0), c = c || {};
			var e, f, g, h, i, j, k, l, m = fa.ajaxSetup({}, c),
				n = m.context || m,
				o = m.context && (n.nodeType || n.jquery) ? fa(n) : fa.event,
				p = fa.Deferred(),
				q = fa.Callbacks("once memory"),
				r = m.statusCode || {},
				s = {},
				t = {},
				u = 0,
				v = "canceled",
				w = {
					readyState: 0,
					getResponseHeader: function (a) {
						var b;
						if (2 === u) {
							if (!h)
								for (h = {}; b = vb.exec(g);) h[b[1].toLowerCase()] = b[2];
							b = h[a.toLowerCase()]
						}
						return null == b ? null : b
					},
					getAllResponseHeaders: function () {
						return 2 === u ? g : null
					},
					setRequestHeader: function (a, b) {
						var c = a.toLowerCase();
						return u || (a = t[c] = t[c] || a, s[a] = b), this
					},
					overrideMimeType: function (a) {
						return u || (m.mimeType = a), this
					},
					statusCode: function (a) {
						var b;
						if (a)
							if (u < 2)
								for (b in a) r[b] = [r[b], a[b]];
							else w.always(a[w.status]);
						return this
					},
					abort: function (a) {
						var b = a || v;
						return e && e.abort(b), d(0, b), this
					}
				};
			if (p.promise(w).complete = q.add, w.success = w.done, w.error = w.fail, m.url = ((b || m.url || qb.href) + "").replace(tb, "").replace(yb, qb.protocol + "//"), m.type = c.method || c.type || m.method || m.type, m.dataTypes = fa.trim(m.dataType || "*").toLowerCase().match(va) || [""], null == m.crossDomain) {
				j = X.createElement("a");
				try {
					j.href = m.url, j.href = j.href, m.crossDomain = Cb.protocol + "//" + Cb.host != j.protocol + "//" + j.host
				} catch (a) {
					m.crossDomain = !0
				}
			}
			if (m.data && m.processData && "string" != typeof m.data && (m.data = fa.param(m.data, m.traditional)), Q(zb, m, c, w), 2 === u) return w;
			k = fa.event && m.global, k && 0 === fa.active++ && fa.event.trigger("ajaxStart"), m.type = m.type.toUpperCase(), m.hasContent = !xb.test(m.type), f = m.url, m.hasContent || (m.data && (f = m.url += (sb.test(f) ? "&" : "?") + m.data, delete m.data), m.cache === !1 && (m.url = ub.test(f) ? f.replace(ub, "$1_=" + rb++) : f + (sb.test(f) ? "&" : "?") + "_=" + rb++)), m.ifModified && (fa.lastModified[f] && w.setRequestHeader("If-Modified-Since", fa.lastModified[f]), fa.etag[f] && w.setRequestHeader("If-None-Match", fa.etag[f])), (m.data && m.hasContent && m.contentType !== !1 || c.contentType) && w.setRequestHeader("Content-Type", m.contentType), w.setRequestHeader("Accept", m.dataTypes[0] && m.accepts[m.dataTypes[0]] ? m.accepts[m.dataTypes[0]] + ("*" !== m.dataTypes[0] ? ", " + Bb + "; q=0.01" : "") : m.accepts["*"]);
			for (l in m.headers) w.setRequestHeader(l, m.headers[l]);
			if (m.beforeSend && (m.beforeSend.call(n, w, m) === !1 || 2 === u)) return w.abort();
			v = "abort";
			for (l in {
					success: 1,
					error: 1,
					complete: 1
				}) w[l](m[l]);
			if (e = Q(Ab, m, c, w)) {
				if (w.readyState = 1, k && o.trigger("ajaxSend", [w, m]), 2 === u) return w;
				m.async && m.timeout > 0 && (i = a.setTimeout(function () {
					w.abort("timeout")
				}, m.timeout));
				try {
					u = 1, e.send(s, d)
				} catch (a) {
					if (!(u < 2)) throw a;
					d(-1, a)
				}
			} else d(-1, "No Transport");
			return w
		},
		getJSON: function (a, b, c) {
			return fa.get(a, b, c, "json")
		},
		getScript: function (a, b) {
			return fa.get(a, void 0, b, "script")
		}
	}), fa.each(["get", "post"], function (a, b) {
		fa[b] = function (a, c, d, e) {
			return fa.isFunction(c) && (e = e || d, d = c, c = void 0), fa.ajax(fa.extend({
				url: a,
				type: b,
				dataType: e,
				data: c,
				success: d
			}, fa.isPlainObject(a) && a))
		}
	}), fa._evalUrl = function (a) {
		return fa.ajax({
			url: a,
			type: "GET",
			dataType: "script",
			async: !1,
			global: !1,
			throws: !0
		})
	}, fa.fn.extend({
		wrapAll: function (a) {
			var b;
			return fa.isFunction(a) ? this.each(function (b) {
				fa(this).wrapAll(a.call(this, b))
			}) : (this[0] && (b = fa(a, this[0].ownerDocument).eq(0).clone(!0), this[0].parentNode && b.insertBefore(this[0]), b.map(function () {
				for (var a = this; a.firstElementChild;) a = a.firstElementChild;
				return a
			}).append(this)), this)
		},
		wrapInner: function (a) {
			return fa.isFunction(a) ? this.each(function (b) {
				fa(this).wrapInner(a.call(this, b))
			}) : this.each(function () {
				var b = fa(this),
					c = b.contents();
				c.length ? c.wrapAll(a) : b.append(a)
			})
		},
		wrap: function (a) {
			var b = fa.isFunction(a);
			return this.each(function (c) {
				fa(this).wrapAll(b ? a.call(this, c) : a)
			})
		},
		unwrap: function () {
			return this.parent().each(function () {
				fa.nodeName(this, "body") || fa(this).replaceWith(this.childNodes)
			}).end()
		}
	}), fa.expr.filters.hidden = function (a) {
		return !fa.expr.filters.visible(a)
	}, fa.expr.filters.visible = function (a) {
		return a.offsetWidth > 0 || a.offsetHeight > 0 || a.getClientRects().length > 0
	};
	var Db = /%20/g,
		Eb = /\[\]$/,
		Fb = /\r?\n/g,
		Gb = /^(?:submit|button|image|reset|file)$/i,
		Hb = /^(?:input|select|textarea|keygen)/i;
	fa.param = function (a, b) {
		var c, d = [],
			e = function (a, b) {
				b = fa.isFunction(b) ? b() : null == b ? "" : b, d[d.length] = encodeURIComponent(a) + "=" + encodeURIComponent(b)
			};
		if (void 0 === b && (b = fa.ajaxSettings && fa.ajaxSettings.traditional), fa.isArray(a) || a.jquery && !fa.isPlainObject(a)) fa.each(a, function () {
			e(this.name, this.value)
		});
		else
			for (c in a) U(c, a[c], b, e);
		return d.join("&").replace(Db, "+")
	}, fa.fn.extend({
		serialize: function () {
			return fa.param(this.serializeArray())
		},
		serializeArray: function () {
			return this.map(function () {
				var a = fa.prop(this, "elements");
				return a ? fa.makeArray(a) : this
			}).filter(function () {
				var a = this.type;
				return this.name && !fa(this).is(":disabled") && Hb.test(this.nodeName) && !Gb.test(a) && (this.checked || !Ha.test(a))
			}).map(function (a, b) {
				var c = fa(this).val();
				return null == c ? null : fa.isArray(c) ? fa.map(c, function (a) {
					return {
						name: b.name,
						value: a.replace(Fb, "\r\n")
					}
				}) : {
					name: b.name,
					value: c.replace(Fb, "\r\n")
				}
			}).get()
		}
	}), fa.ajaxSettings.xhr = function () {
		try {
			return new a.XMLHttpRequest
		} catch (a) {}
	};
	var Ib = {
			0: 200,
			1223: 204
		},
		Jb = fa.ajaxSettings.xhr();
	da.cors = !!Jb && "withCredentials" in Jb, da.ajax = Jb = !!Jb, fa.ajaxTransport(function (b) {
		var c, d;
		if (da.cors || Jb && !b.crossDomain) return {
			send: function (e, f) {
				var g, h = b.xhr();
				if (h.open(b.type, b.url, b.async, b.username, b.password), b.xhrFields)
					for (g in b.xhrFields) h[g] = b.xhrFields[g];
				b.mimeType && h.overrideMimeType && h.overrideMimeType(b.mimeType), b.crossDomain || e["X-Requested-With"] || (e["X-Requested-With"] = "XMLHttpRequest");
				for (g in e) h.setRequestHeader(g, e[g]);
				c = function (a) {
					return function () {
						c && (c = d = h.onload = h.onerror = h.onabort = h.onreadystatechange = null, "abort" === a ? h.abort() : "error" === a ? "number" != typeof h.status ? f(0, "error") : f(h.status, h.statusText) : f(Ib[h.status] || h.status, h.statusText, "text" !== (h.responseType || "text") || "string" != typeof h.responseText ? {
							binary: h.response
						} : {
							text: h.responseText
						}, h.getAllResponseHeaders()))
					}
				}, h.onload = c(), d = h.onerror = c("error"), void 0 !== h.onabort ? h.onabort = d : h.onreadystatechange = function () {
					4 === h.readyState && a.setTimeout(function () {
						c && d()
					})
				}, c = c("abort");
				try {
					h.send(b.hasContent && b.data || null)
				} catch (a) {
					if (c) throw a
				}
			},
			abort: function () {
				c && c()
			}
		}
	}), fa.ajaxSetup({
		accepts: {
			script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function (a) {
				return fa.globalEval(a), a
			}
		}
	}), fa.ajaxPrefilter("script", function (a) {
		void 0 === a.cache && (a.cache = !1), a.crossDomain && (a.type = "GET")
	}), fa.ajaxTransport("script", function (a) {
		if (a.crossDomain) {
			var b, c;
			return {
				send: function (d, e) {
					b = fa("<script>").prop({
						charset: a.scriptCharset,
						src: a.url
					}).on("load error", c = function (a) {
						b.remove(), c = null, a && e("error" === a.type ? 404 : 200, a.type)
					}), X.head.appendChild(b[0])
				},
				abort: function () {
					c && c()
				}
			}
		}
	});
	var Kb = [],
		Lb = /(=)\?(?=&|$)|\?\?/;
	fa.ajaxSetup({
		jsonp: "callback",
		jsonpCallback: function () {
			var a = Kb.pop() || fa.expando + "_" + rb++;
			return this[a] = !0, a
		}
	}), fa.ajaxPrefilter("json jsonp", function (b, c, d) {
		var e, f, g, h = b.jsonp !== !1 && (Lb.test(b.url) ? "url" : "string" == typeof b.data && 0 === (b.contentType || "").indexOf("application/x-www-form-urlencoded") && Lb.test(b.data) && "data");
		if (h || "jsonp" === b.dataTypes[0]) return e = b.jsonpCallback = fa.isFunction(b.jsonpCallback) ? b.jsonpCallback() : b.jsonpCallback, h ? b[h] = b[h].replace(Lb, "$1" + e) : b.jsonp !== !1 && (b.url += (sb.test(b.url) ? "&" : "?") + b.jsonp + "=" + e), b.converters["script json"] = function () {
			return g || fa.error(e + " was not called"), g[0]
		}, b.dataTypes[0] = "json", f = a[e], a[e] = function () {
			g = arguments
		}, d.always(function () {
			void 0 === f ? fa(a).removeProp(e) : a[e] = f, b[e] && (b.jsonpCallback = c.jsonpCallback, Kb.push(e)), g && fa.isFunction(f) && f(g[0]), g = f = void 0
		}), "script"
	}), fa.parseHTML = function (a, b, c) {
		if (!a || "string" != typeof a) return null;
		"boolean" == typeof b && (c = b, b = !1), b = b || X;
		var d = oa.exec(a),
			e = !c && [];
		return d ? [b.createElement(d[1])] : (d = m([a], b, e), e && e.length && fa(e).remove(), fa.merge([], d.childNodes))
	};
	var Mb = fa.fn.load;
	fa.fn.load = function (a, b, c) {
		if ("string" != typeof a && Mb) return Mb.apply(this, arguments);
		var d, e, f, g = this,
			h = a.indexOf(" ");
		return h > -1 && (d = fa.trim(a.slice(h)), a = a.slice(0, h)), fa.isFunction(b) ? (c = b, b = void 0) : b && "object" == typeof b && (e = "POST"), g.length > 0 && fa.ajax({
			url: a,
			type: e || "GET",
			dataType: "html",
			data: b
		}).done(function (a) {
			f = arguments, g.html(d ? fa("<div>").append(fa.parseHTML(a)).find(d) : a)
		}).always(c && function (a, b) {
			g.each(function () {
				c.apply(this, f || [a.responseText, b, a])
			})
		}), this
	}, fa.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (a, b) {
		fa.fn[b] = function (a) {
			return this.on(b, a)
		}
	}), fa.expr.filters.animated = function (a) {
		return fa.grep(fa.timers, function (b) {
			return a === b.elem
		}).length
	}, fa.offset = {
		setOffset: function (a, b, c) {
			var d, e, f, g, h, i, j, k = fa.css(a, "position"),
				l = fa(a),
				m = {};
			"static" === k && (a.style.position = "relative"), h = l.offset(), f = fa.css(a, "top"), i = fa.css(a, "left"), j = ("absolute" === k || "fixed" === k) && (f + i).indexOf("auto") > -1, j ? (d = l.position(), g = d.top, e = d.left) : (g = parseFloat(f) || 0, e = parseFloat(i) || 0), fa.isFunction(b) && (b = b.call(a, c, fa.extend({}, h))), null != b.top && (m.top = b.top - h.top + g), null != b.left && (m.left = b.left - h.left + e), "using" in b ? b.using.call(a, m) : l.css(m)
		}
	}, fa.fn.extend({
		offset: function (a) {
			if (arguments.length) return void 0 === a ? this : this.each(function (b) {
				fa.offset.setOffset(this, a, b)
			});
			var b, c, d = this[0],
				e = {
					top: 0,
					left: 0
				},
				f = d && d.ownerDocument;
			if (f) return b = f.documentElement, fa.contains(b, d) ? (e = d.getBoundingClientRect(), c = V(f), {
				top: e.top + c.pageYOffset - b.clientTop,
				left: e.left + c.pageXOffset - b.clientLeft
			}) : e
		},
		position: function () {
			if (this[0]) {
				var a, b, c = this[0],
					d = {
						top: 0,
						left: 0
					};
				return "fixed" === fa.css(c, "position") ? b = c.getBoundingClientRect() : (a = this.offsetParent(), b = this.offset(), fa.nodeName(a[0], "html") || (d = a.offset()), d.top += fa.css(a[0], "borderTopWidth", !0), d.left += fa.css(a[0], "borderLeftWidth", !0)), {
					top: b.top - d.top - fa.css(c, "marginTop", !0),
					left: b.left - d.left - fa.css(c, "marginLeft", !0)
				}
			}
		},
		offsetParent: function () {
			return this.map(function () {
				for (var a = this.offsetParent; a && "static" === fa.css(a, "position");) a = a.offsetParent;
				return a || $a
			})
		}
	}), fa.each({
		scrollLeft: "pageXOffset",
		scrollTop: "pageYOffset"
	}, function (a, b) {
		var c = "pageYOffset" === b;
		fa.fn[a] = function (d) {
			return xa(this, function (a, d, e) {
				var f = V(a);
				return void 0 === e ? f ? f[b] : a[d] : void(f ? f.scrollTo(c ? f.pageXOffset : e, c ? e : f.pageYOffset) : a[d] = e)
			}, a, d, arguments.length)
		}
	}), fa.each(["top", "left"], function (a, b) {
		fa.cssHooks[b] = B(da.pixelPosition, function (a, c) {
			if (c) return c = A(a, b), Xa.test(c) ? fa(a).position()[b] + "px" : c
		})
	}), fa.each({
		Height: "height",
		Width: "width"
	}, function (a, b) {
		fa.each({
			padding: "inner" + a,
			content: b,
			"": "outer" + a
		}, function (c, d) {
			fa.fn[d] = function (d, e) {
				var f = arguments.length && (c || "boolean" != typeof d),
					g = c || (d === !0 || e === !0 ? "margin" : "border");
				return xa(this, function (b, c, d) {
					var e;
					return fa.isWindow(b) ? b.document.documentElement["client" + a] : 9 === b.nodeType ? (e = b.documentElement, Math.max(b.body["scroll" + a], e["scroll" + a], b.body["offset" + a], e["offset" + a], e["client" + a])) : void 0 === d ? fa.css(b, c, g) : fa.style(b, c, d, g)
				}, b, f ? d : void 0, f, null)
			}
		})
	}), fa.fn.extend({
		bind: function (a, b, c) {
			return this.on(a, null, b, c)
		},
		unbind: function (a, b) {
			return this.off(a, null, b)
		},
		delegate: function (a, b, c, d) {
			return this.on(b, a, c, d)
		},
		undelegate: function (a, b, c) {
			return 1 === arguments.length ? this.off(a, "**") : this.off(b, a || "**", c)
		},
		size: function () {
			return this.length
		}
	}), fa.fn.andSelf = fa.fn.addBack, "function" == typeof define && define.amd && define("jquery", [], function () {
		return fa
	});
	var Nb = a.jQuery,
		Ob = a.$;
	return fa.noConflict = function (b) {
		return a.$ === fa && (a.$ = Ob), b && a.jQuery === fa && (a.jQuery = Nb), fa
	}, b || (a.jQuery = a.$ = fa), fa
}),
/*!
 * jQuery UI Widget 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */
function (a) {
	"function" == typeof define && define.amd ? define(["jquery", "./version"], a) : a(jQuery)
}(function (a) {
	var b = 0,
		c = Array.prototype.slice;
	return a.cleanData = function (b) {
		return function (c) {
			var d, e, f;
			for (f = 0; null != (e = c[f]); f++) try {
				d = a._data(e, "events"), d && d.remove && a(e).triggerHandler("remove")
			} catch (a) {}
			b(c)
		}
	}(a.cleanData), a.widget = function (b, c, d) {
		var e, f, g, h = {},
			i = b.split(".")[0];
		b = b.split(".")[1];
		var j = i + "-" + b;
		return d || (d = c, c = a.Widget), a.isArray(d) && (d = a.extend.apply(null, [{}].concat(d))), a.expr[":"][j.toLowerCase()] = function (b) {
			return !!a.data(b, j)
		}, a[i] = a[i] || {}, e = a[i][b], f = a[i][b] = function (a, b) {
			return this._createWidget ? void(arguments.length && this._createWidget(a, b)) : new f(a, b)
		}, a.extend(f, e, {
			version: d.version,
			_proto: a.extend({}, d),
			_childConstructors: []
		}), g = new c, g.options = a.widget.extend({}, g.options), a.each(d, function (b, d) {
			return a.isFunction(d) ? void(h[b] = function () {
				function a() {
					return c.prototype[b].apply(this, arguments)
				}

				function e(a) {
					return c.prototype[b].apply(this, a)
				}
				return function () {
					var b, c = this._super,
						f = this._superApply;
					return this._super = a, this._superApply = e, b = d.apply(this, arguments), this._super = c, this._superApply = f, b
				}
			}()) : void(h[b] = d)
		}), f.prototype = a.widget.extend(g, {
			widgetEventPrefix: e ? g.widgetEventPrefix || b : b
		}, h, {
			constructor: f,
			namespace: i,
			widgetName: b,
			widgetFullName: j
		}), e ? (a.each(e._childConstructors, function (b, c) {
			var d = c.prototype;
			a.widget(d.namespace + "." + d.widgetName, f, c._proto)
		}), delete e._childConstructors) : c._childConstructors.push(f), a.widget.bridge(b, f), f
	}, a.widget.extend = function (b) {
		for (var d, e, f = c.call(arguments, 1), g = 0, h = f.length; g < h; g++)
			for (d in f[g]) e = f[g][d], f[g].hasOwnProperty(d) && void 0 !== e && (a.isPlainObject(e) ? b[d] = a.isPlainObject(b[d]) ? a.widget.extend({}, b[d], e) : a.widget.extend({}, e) : b[d] = e);
		return b
	}, a.widget.bridge = function (b, d) {
		var e = d.prototype.widgetFullName || b;
		a.fn[b] = function (f) {
			var g = "string" == typeof f,
				h = c.call(arguments, 1),
				i = this;
			return g ? this.length || "instance" !== f ? this.each(function () {
				var c, d = a.data(this, e);
				return "instance" === f ? (i = d, !1) : d ? a.isFunction(d[f]) && "_" !== f.charAt(0) ? (c = d[f].apply(d, h), c !== d && void 0 !== c ? (i = c && c.jquery ? i.pushStack(c.get()) : c, !1) : void 0) : a.error("no such method '" + f + "' for " + b + " widget instance") : a.error("cannot call methods on " + b + " prior to initialization; attempted to call method '" + f + "'")
			}) : i = void 0 : (h.length && (f = a.widget.extend.apply(null, [f].concat(h))), this.each(function () {
				var b = a.data(this, e);
				b ? (b.option(f || {}), b._init && b._init()) : a.data(this, e, new d(f, this))
			})), i
		}
	}, a.Widget = function () {}, a.Widget._childConstructors = [], a.Widget.prototype = {
		widgetName: "widget",
		widgetEventPrefix: "",
		defaultElement: "<div>",
		options: {
			classes: {},
			disabled: !1,
			create: null
		},
		_createWidget: function (c, d) {
			d = a(d || this.defaultElement || this)[0], this.element = a(d), this.uuid = b++, this.eventNamespace = "." + this.widgetName + this.uuid, this.bindings = a(), this.hoverable = a(), this.focusable = a(), this.classesElementLookup = {}, d !== this && (a.data(d, this.widgetFullName, this), this._on(!0, this.element, {
				remove: function (a) {
					a.target === d && this.destroy()
				}
			}), this.document = a(d.style ? d.ownerDocument : d.document || d), this.window = a(this.document[0].defaultView || this.document[0].parentWindow)), this.options = a.widget.extend({}, this.options, this._getCreateOptions(), c), this._create(), this.options.disabled && this._setOptionDisabled(this.options.disabled), this._trigger("create", null, this._getCreateEventData()), this._init()
		},
		_getCreateOptions: function () {
			return {}
		},
		_getCreateEventData: a.noop,
		_create: a.noop,
		_init: a.noop,
		destroy: function () {
			var b = this;
			this._destroy(), a.each(this.classesElementLookup, function (a, c) {
				b._removeClass(c, a)
			}), this.element.off(this.eventNamespace).removeData(this.widgetFullName), this.widget().off(this.eventNamespace).removeAttr("aria-disabled"), this.bindings.off(this.eventNamespace)
		},
		_destroy: a.noop,
		widget: function () {
			return this.element
		},
		option: function (b, c) {
			var d, e, f, g = b;
			if (0 === arguments.length) return a.widget.extend({}, this.options);
			if ("string" == typeof b)
				if (g = {}, d = b.split("."), b = d.shift(), d.length) {
					for (e = g[b] = a.widget.extend({}, this.options[b]), f = 0; f < d.length - 1; f++) e[d[f]] = e[d[f]] || {}, e = e[d[f]];
					if (b = d.pop(), 1 === arguments.length) return void 0 === e[b] ? null : e[b];
					e[b] = c
				} else {
					if (1 === arguments.length) return void 0 === this.options[b] ? null : this.options[b];
					g[b] = c
				}
			return this._setOptions(g), this
		},
		_setOptions: function (a) {
			var b;
			for (b in a) this._setOption(b, a[b]);
			return this
		},
		_setOption: function (a, b) {
			return "classes" === a && this._setOptionClasses(b), this.options[a] = b, "disabled" === a && this._setOptionDisabled(b), this
		},
		_setOptionClasses: function (b) {
			var c, d, e;
			for (c in b) e = this.classesElementLookup[c], b[c] !== this.options.classes[c] && e && e.length && (d = a(e.get()), this._removeClass(e, c), d.addClass(this._classes({
				element: d,
				keys: c,
				classes: b,
				add: !0
			})))
		},
		_setOptionDisabled: function (a) {
			this._toggleClass(this.widget(), this.widgetFullName + "-disabled", null, !!a), a && (this._removeClass(this.hoverable, null, "ui-state-hover"), this._removeClass(this.focusable, null, "ui-state-focus"))
		},
		enable: function () {
			return this._setOptions({
				disabled: !1
			})
		},
		disable: function () {
			return this._setOptions({
				disabled: !0
			})
		},
		_classes: function (b) {
			function c(c, f) {
				var g, h;
				for (h = 0; h < c.length; h++) g = e.classesElementLookup[c[h]] || a(), g = a(b.add ? a.unique(g.get().concat(b.element.get())) : g.not(b.element).get()), e.classesElementLookup[c[h]] = g, d.push(c[h]), f && b.classes[c[h]] && d.push(b.classes[c[h]])
			}
			var d = [],
				e = this;
			return b = a.extend({
				element: this.element,
				classes: this.options.classes || {}
			}, b), this._on(b.element, {
				remove: "_untrackClassesElement"
			}), b.keys && c(b.keys.match(/\S+/g) || [], !0), b.extra && c(b.extra.match(/\S+/g) || []), d.join(" ")
		},
		_untrackClassesElement: function (b) {
			var c = this;
			a.each(c.classesElementLookup, function (d, e) {
				a.inArray(b.target, e) !== -1 && (c.classesElementLookup[d] = a(e.not(b.target).get()))
			})
		},
		_removeClass: function (a, b, c) {
			return this._toggleClass(a, b, c, !1)
		},
		_addClass: function (a, b, c) {
			return this._toggleClass(a, b, c, !0)
		},
		_toggleClass: function (a, b, c, d) {
			d = "boolean" == typeof d ? d : c;
			var e = "string" == typeof a || null === a,
				f = {
					extra: e ? b : c,
					keys: e ? a : b,
					element: e ? this.element : a,
					add: d
				};
			return f.element.toggleClass(this._classes(f), d), this
		},
		_on: function (b, c, d) {
			var e, f = this;
			"boolean" != typeof b && (d = c, c = b, b = !1), d ? (c = e = a(c), this.bindings = this.bindings.add(c)) : (d = c, c = this.element, e = this.widget()), a.each(d, function (d, g) {
				function h() {
					if (b || f.options.disabled !== !0 && !a(this).hasClass("ui-state-disabled")) return ("string" == typeof g ? f[g] : g).apply(f, arguments)
				}
				"string" != typeof g && (h.guid = g.guid = g.guid || h.guid || a.guid++);
				var i = d.match(/^([\w:-]*)\s*(.*)$/),
					j = i[1] + f.eventNamespace,
					k = i[2];
				k ? e.on(j, k, h) : c.on(j, h)
			})
		},
		_off: function (b, c) {
			c = (c || "").split(" ").join(this.eventNamespace + " ") + this.eventNamespace, b.off(c).off(c), this.bindings = a(this.bindings.not(b).get()), this.focusable = a(this.focusable.not(b).get()), this.hoverable = a(this.hoverable.not(b).get())
		},
		_delay: function (a, b) {
			function c() {
				return ("string" == typeof a ? d[a] : a).apply(d, arguments)
			}
			var d = this;
			return setTimeout(c, b || 0)
		},
		_hoverable: function (b) {
			this.hoverable = this.hoverable.add(b), this._on(b, {
				mouseenter: function (b) {
					this._addClass(a(b.currentTarget), null, "ui-state-hover")
				},
				mouseleave: function (b) {
					this._removeClass(a(b.currentTarget), null, "ui-state-hover")
				}
			})
		},
		_focusable: function (b) {
			this.focusable = this.focusable.add(b), this._on(b, {
				focusin: function (b) {
					this._addClass(a(b.currentTarget), null, "ui-state-focus")
				},
				focusout: function (b) {
					this._removeClass(a(b.currentTarget), null, "ui-state-focus")
				}
			})
		},
		_trigger: function (b, c, d) {
			var e, f, g = this.options[b];
			if (d = d || {}, c = a.Event(c), c.type = (b === this.widgetEventPrefix ? b : this.widgetEventPrefix + b).toLowerCase(), c.target = this.element[0], f = c.originalEvent)
				for (e in f) e in c || (c[e] = f[e]);
			return this.element.trigger(c, d), !(a.isFunction(g) && g.apply(this.element[0], [c].concat(d)) === !1 || c.isDefaultPrevented())
		}
	}, a.each({
		show: "fadeIn",
		hide: "fadeOut"
	}, function (b, c) {
		a.Widget.prototype["_" + b] = function (d, e, f) {
			"string" == typeof e && (e = {
				effect: e
			});
			var g, h = e ? e === !0 || "number" == typeof e ? c : e.effect || c : b;
			e = e || {}, "number" == typeof e && (e = {
				duration: e
			}), g = !a.isEmptyObject(e), e.complete = f, e.delay && d.delay(e.delay), g && a.effects && a.effects.effect[h] ? d[b](e) : h !== b && d[h] ? d[h](e.duration, e.easing, f) : d.queue(function (c) {
				a(this)[b](), f && f.call(d[0]), c()
			})
		}
	}), a.widget
}),
function () {
	"use strict";

	function a(a) {
		function b(b, d) {
			var f, p, q = b == window,
				r = d && void 0 !== d.message ? d.message : void 0;
			if (d = a.extend({}, a.blockUI.defaults, d || {}), !d.ignoreIfBlocked || !a(b).data("blockUI.isBlocked")) {
				if (d.overlayCSS = a.extend({}, a.blockUI.defaults.overlayCSS, d.overlayCSS || {}), f = a.extend({}, a.blockUI.defaults.css, d.css || {}), d.onOverlayClick && (d.overlayCSS.cursor = "pointer"), p = a.extend({}, a.blockUI.defaults.themedCSS, d.themedCSS || {}), r = void 0 === r ? d.message : r, q && n && c(window, {
						fadeOut: 0
					}), r && "string" != typeof r && (r.parentNode || r.jquery)) {
					var s = r.jquery ? r[0] : r,
						t = {};
					a(b).data("blockUI.history", t), t.el = s, t.parent = s.parentNode, t.display = s.style.display, t.position = s.style.position, t.parent && t.parent.removeChild(s)
				}
				a(b).data("blockUI.onUnblock", d.onUnblock);
				var u, v, w, x, y = d.baseZ;
				u = a(k || d.forceIframe ? '<iframe class="blockUI" style="z-index:' + y++ + ';display:none;border:none;margin:0;padding:0;position:absolute;width:100%;height:100%;top:0;left:0" src="' + d.iframeSrc + '"></iframe>' : '<div class="blockUI" style="display:none"></div>'), v = a(d.theme ? '<div class="blockUI blockOverlay ui-widget-overlay" style="z-index:' + y++ + ';display:none"></div>' : '<div class="blockUI blockOverlay" style="z-index:' + y++ + ';display:none;border:none;margin:0;padding:0;width:100%;height:100%;top:0;left:0"></div>'), d.theme && q ? (x = '<div class="blockUI ' + d.blockMsgClass + ' blockPage ui-dialog ui-widget ui-corner-all" style="z-index:' + (y + 10) + ';display:none;position:fixed">', d.title && (x += '<div class="ui-widget-header ui-dialog-titlebar ui-corner-all blockTitle">' + (d.title || "&nbsp;") + "</div>"), x += '<div class="ui-widget-content ui-dialog-content"></div>', x += "</div>") : d.theme ? (x = '<div class="blockUI ' + d.blockMsgClass + ' blockElement ui-dialog ui-widget ui-corner-all" style="z-index:' + (y + 10) + ';display:none;position:absolute">', d.title && (x += '<div class="ui-widget-header ui-dialog-titlebar ui-corner-all blockTitle">' + (d.title || "&nbsp;") + "</div>"), x += '<div class="ui-widget-content ui-dialog-content"></div>', x += "</div>") : x = q ? '<div class="blockUI ' + d.blockMsgClass + ' blockPage" style="z-index:' + (y + 10) + ';display:none;position:fixed"></div>' : '<div class="blockUI ' + d.blockMsgClass + ' blockElement" style="z-index:' + (y + 10) + ';display:none;position:absolute"></div>', w = a(x), r && (d.theme ? (w.css(p), w.addClass("ui-widget-content")) : w.css(f)), d.theme || v.css(d.overlayCSS), v.css("position", q ? "fixed" : "absolute"), (k || d.forceIframe) && u.css("opacity", 0);
				var z = [u, v, w],
					A = a(q ? "body" : b);
				a.each(z, function () {
					this.appendTo(A)
				}), d.theme && d.draggable && a.fn.draggable && w.draggable({
					handle: ".ui-dialog-titlebar",
					cancel: "li"
				});
				var B = m && (!a.support.boxModel || a("object,embed", q ? null : b).length > 0);
				if (l || B) {
					if (q && d.allowBodyStretch && a.support.boxModel && a("html,body").css("height", "100%"), (l || !a.support.boxModel) && !q) var C = i(b, "borderTopWidth"),
						D = i(b, "borderLeftWidth"),
						E = C ? "(0 - " + C + ")" : 0,
						F = D ? "(0 - " + D + ")" : 0;
					a.each(z, function (a, b) {
						var c = b[0].style;
						if (c.position = "absolute", a < 2) q ? c.setExpression("height", "Math.max(document.body.scrollHeight, document.body.offsetHeight) - (jQuery.support.boxModel?0:" + d.quirksmodeOffsetHack + ') + "px"') : c.setExpression("height", 'this.parentNode.offsetHeight + "px"'), q ? c.setExpression("width", 'jQuery.support.boxModel && document.documentElement.clientWidth || document.body.clientWidth + "px"') : c.setExpression("width", 'this.parentNode.offsetWidth + "px"'), F && c.setExpression("left", F), E && c.setExpression("top", E);
						else if (d.centerY) q && c.setExpression("top", '(document.documentElement.clientHeight || document.body.clientHeight) / 2 - (this.offsetHeight / 2) + (blah = document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop) + "px"'), c.marginTop = 0;
						else if (!d.centerY && q) {
							var e = d.css && d.css.top ? parseInt(d.css.top, 10) : 0,
								f = "((document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop) + " + e + ') + "px"';
							c.setExpression("top", f)
						}
					})
				}
				if (r && (d.theme ? w.find(".ui-widget-content").append(r) : w.append(r), (r.jquery || r.nodeType) && a(r).show()), (k || d.forceIframe) && d.showOverlay && u.show(), d.fadeIn) {
					var G = d.onBlock ? d.onBlock : j,
						H = d.showOverlay && !r ? G : j,
						I = r ? G : j;
					d.showOverlay && v._fadeIn(d.fadeIn, H), r && w._fadeIn(d.fadeIn, I)
				} else d.showOverlay && v.show(), r && w.show(), d.onBlock && d.onBlock.bind(w)();
				if (e(1, b, d), q ? (n = w[0], o = a(d.focusableElements, n), d.focusInput && setTimeout(g, 20)) : h(w[0], d.centerX, d.centerY), d.timeout) {
					var J = setTimeout(function () {
						q ? a.unblockUI(d) : a(b).unblock(d)
					}, d.timeout);
					a(b).data("blockUI.timeout", J)
				}
			}
		}

		function c(b, c) {
			var f, g = b == window,
				h = a(b),
				i = h.data("blockUI.history"),
				j = h.data("blockUI.timeout");
			j && (clearTimeout(j), h.removeData("blockUI.timeout")), c = a.extend({}, a.blockUI.defaults, c || {}), e(0, b, c), null === c.onUnblock && (c.onUnblock = h.data("blockUI.onUnblock"), h.removeData("blockUI.onUnblock"));
			var k;
			k = g ? a("body").children().filter(".blockUI").add("body > .blockUI") : h.find(">.blockUI"), c.cursorReset && (k.length > 1 && (k[1].style.cursor = c.cursorReset), k.length > 2 && (k[2].style.cursor = c.cursorReset)), g && (n = o = null), c.fadeOut ? (f = k.length, k.stop().fadeOut(c.fadeOut, function () {
				0 === --f && d(k, i, c, b)
			})) : d(k, i, c, b)
		}

		function d(b, c, d, e) {
			var f = a(e);
			if (!f.data("blockUI.isBlocked")) {
				b.each(function (a, b) {
					this.parentNode && this.parentNode.removeChild(this)
				}), c && c.el && (c.el.style.display = c.display, c.el.style.position = c.position, c.el.style.cursor = "default", c.parent && c.parent.appendChild(c.el), f.removeData("blockUI.history")), f.data("blockUI.static") && f.css("position", "static"), "function" == typeof d.onUnblock && d.onUnblock(e, d);
				var g = a(document.body),
					h = g.width(),
					i = g[0].style.width;
				g.width(h - 1).width(h), g[0].style.width = i
			}
		}

		function e(b, c, d) {
			var e = c == window,
				g = a(c);
			if ((b || (!e || n) && (e || g.data("blockUI.isBlocked"))) && (g.data("blockUI.isBlocked", b), e && d.bindEvents && (!b || d.showOverlay))) {
				var h = "mousedown mouseup keydown keypress keyup touchstart touchend touchmove";
				b ? a(document).bind(h, d, f) : a(document).unbind(h, f)
			}
		}

		function f(b) {
			if ("keydown" === b.type && b.keyCode && 9 == b.keyCode && n && b.data.constrainTabKey) {
				var c = o,
					d = !b.shiftKey && b.target === c[c.length - 1],
					e = b.shiftKey && b.target === c[0];
				if (d || e) return setTimeout(function () {
					g(e)
				}, 10), !1
			}
			var f = b.data,
				h = a(b.target);
			return h.hasClass("blockOverlay") && f.onOverlayClick && f.onOverlayClick(b), h.parents("div." + f.blockMsgClass).length > 0 || 0 === h.parents().children().filter("div.blockUI").length
		}

		function g(a) {
			if (o) {
				var b = o[a === !0 ? o.length - 1 : 0];
				b && b.focus()
			}
		}

		function h(a, b, c) {
			var d = a.parentNode,
				e = a.style,
				f = (d.offsetWidth - a.offsetWidth) / 2 - i(d, "borderLeftWidth"),
				g = (d.offsetHeight - a.offsetHeight) / 2 - i(d, "borderTopWidth");
			b && (e.left = f > 0 ? f + "px" : "0"), c && (e.top = g > 0 ? g + "px" : "0")
		}

		function i(b, c) {
			return parseInt(a.css(b, c), 10) || 0
		}
		a.fn._fadeIn = a.fn.fadeIn;
		var j = a.noop || function () {},
			k = /MSIE/.test(navigator.userAgent),
			l = /MSIE 6.0/.test(navigator.userAgent) && !/MSIE 8.0/.test(navigator.userAgent),
			m = (document.documentMode || 0, a.isFunction(document.createElement("div").style.setExpression));
		a.blockUI = function (a) {
			b(window, a)
		}, a.unblockUI = function (a) {
			c(window, a)
		}, a.growlUI = function (b, c, d, e) {
			var f = a('<div class="growlUI"></div>');
			b && f.append("<h1>" + b + "</h1>"), c && f.append("<h2>" + c + "</h2>"), void 0 === d && (d = 3e3);
			var g = function (b) {
				b = b || {}, a.blockUI({
					message: f,
					fadeIn: "undefined" != typeof b.fadeIn ? b.fadeIn : 700,
					fadeOut: "undefined" != typeof b.fadeOut ? b.fadeOut : 1e3,
					timeout: "undefined" != typeof b.timeout ? b.timeout : d,
					centerY: !1,
					showOverlay: !1,
					onUnblock: e,
					css: a.blockUI.defaults.growlCSS
				})
			};
			g();
			f.css("opacity");
			f.mouseover(function () {
				g({
					fadeIn: 0,
					timeout: 3e4
				});
				var b = a(".blockMsg");
				b.stop(), b.fadeTo(300, 1)
			}).mouseout(function () {
				a(".blockMsg").fadeOut(1e3)
			})
		}, a.fn.block = function (c) {
			if (this[0] === window) return a.blockUI(c), this;
			var d = a.extend({}, a.blockUI.defaults, c || {});
			return this.each(function () {
				var b = a(this);
				d.ignoreIfBlocked && b.data("blockUI.isBlocked") || b.unblock({
					fadeOut: 0
				})
			}), this.each(function () {
				"static" == a.css(this, "position") && (this.style.position = "relative", a(this).data("blockUI.static", !0)), this.style.zoom = 1, b(this, c)
			})
		}, a.fn.unblock = function (b) {
			return this[0] === window ? (a.unblockUI(b), this) : this.each(function () {
				c(this, b)
			})
		}, a.blockUI.version = 2.7, a.blockUI.defaults = {
			message: "<h1>Please wait...</h1>",
			title: null,
			draggable: !0,
			theme: !1,
			css: {
				padding: 0,
				margin: 0,
				width: "30%",
				top: "40%",
				left: "35%",
				textAlign: "center",
				color: "#000",
				border: "3px solid #aaa",
				backgroundColor: "#fff",
				cursor: "wait"
			},
			themedCSS: {
				width: "30%",
				top: "40%",
				left: "35%"
			},
			overlayCSS: {
				backgroundColor: "#000",
				opacity: .6,
				cursor: "wait"
			},
			cursorReset: "default",
			growlCSS: {
				width: "350px",
				top: "10px",
				left: "",
				right: "10px",
				border: "none",
				padding: "5px",
				opacity: .6,
				cursor: "default",
				color: "#fff",
				backgroundColor: "#000",
				"-webkit-border-radius": "10px",
				"-moz-border-radius": "10px",
				"border-radius": "10px"
			},
			iframeSrc: /^https/i.test(window.location.href || "") ? "javascript:false" : "about:blank",
			forceIframe: !1,
			baseZ: 1e3,
			centerX: !0,
			centerY: !0,
			allowBodyStretch: !0,
			bindEvents: !0,
			constrainTabKey: !0,
			fadeIn: 200,
			fadeOut: 400,
			timeout: 0,
			showOverlay: !0,
			focusInput: !0,
			focusableElements: ":input:enabled:visible",
			onBlock: null,
			onUnblock: null,
			onOverlayClick: null,
			quirksmodeOffsetHack: 4,
			blockMsgClass: "blockMsg",
			ignoreIfBlocked: !1
		};
		var n = null,
			o = []
	}
	"function" == typeof define && define.amd && define.amd.jQuery ? define(["jquery"], a) : a(jQuery)
}(), ! function (a) {
	"use strict";
	var b = a.HTMLCanvasElement && a.HTMLCanvasElement.prototype,
		c = a.Blob && function () {
			try {
				return Boolean(new Blob)
			} catch (a) {
				return !1
			}
		}(),
		d = c && a.Uint8Array && function () {
			try {
				return 100 === new Blob([new Uint8Array(100)]).size
			} catch (a) {
				return !1
			}
		}(),
		e = a.BlobBuilder || a.WebKitBlobBuilder || a.MozBlobBuilder || a.MSBlobBuilder,
		f = /^data:((.*?)(;charset=.*?)?)(;base64)?,/,
		g = (c || e) && a.atob && a.ArrayBuffer && a.Uint8Array && function (a) {
			var b, g, h, i, j, k, l, m, n;
			if (b = a.match(f), !b) throw new Error("invalid data URI");
			for (g = b[2] ? b[1] : "text/plain" + (b[3] || ";charset=US-ASCII"), h = !!b[4], i = a.slice(b[0].length), j = h ? atob(i) : decodeURIComponent(i), k = new ArrayBuffer(j.length), l = new Uint8Array(k), m = 0; m < j.length; m += 1) l[m] = j.charCodeAt(m);
			return c ? new Blob([d ? l : k], {
				type: g
			}) : (n = new e, n.append(k), n.getBlob(g))
		};
	a.HTMLCanvasElement && !b.toBlob && (b.mozGetAsFile ? b.toBlob = function (a, c, d) {
		a(d && b.toDataURL && g ? g(this.toDataURL(c, d)) : this.mozGetAsFile("blob", c))
	} : b.toDataURL && g && (b.toBlob = function (a, b, c) {
		a(g(this.toDataURL(b, c)))
	})), "function" == typeof define && define.amd ? define(function () {
		return g
	}) : "object" == typeof module && module.exports ? module.exports = g : a.dataURLtoBlob = g
}(window),
function (a) {
	"use strict";
	var b = function (a, c) {
		var d = /[^\w\-\.:]/.test(a) ? new Function(b.arg + ",tmpl", "var _e=tmpl.encode" + b.helper + ",_s='" + a.replace(b.regexp, b.func) + "';return _s;") : b.cache[a] = b.cache[a] || b(b.load(a));
		return c ? d(c, b) : function (a) {
			return d(a, b)
		}
	};
	b.cache = {}, b.load = function (a) {
		return document.getElementById(a).innerHTML
	}, b.regexp = /([\s'\\])(?!(?:[^{]|\{(?!%))*%\})|(?:\{%(=|#)([\s\S]+?)%\})|(\{%)|(%\})/g, b.func = function (a, b, c, d, e, f) {
		return b ? {
			"\n": "\\n",
			"\r": "\\r",
			"\t": "\\t",
			" ": " "
		}[b] || "\\" + b : c ? "=" === c ? "'+_e(" + d + ")+'" : "'+(" + d + "==null?'':" + d + ")+'" : e ? "';" : f ? "_s+='" : void 0
	}, b.encReg = /[<>&"'\x00]/g, b.encMap = {
		"<": "&lt;",
		">": "&gt;",
		"&": "&amp;",
		'"': "&quot;",
		"'": "&#39;"
	}, b.encode = function (a) {
		return (null == a ? "" : "" + a).replace(b.encReg, function (a) {
			return b.encMap[a] || ""
		})
	}, b.arg = "o", b.helper = ",print=function(s,e){_s+=e?(s==null?'':s):_e(s);},include=function(s,d){_s+=tmpl(s,d);}", "function" == typeof define && define.amd ? define(function () {
		return b
	}) : "object" == typeof module && module.exports ? module.exports = b : a.tmpl = b
}(this), ! function (a) {
	"use strict";

	function b(a, c, d) {
		var e, f = document.createElement("img");
		if (f.onerror = function (e) {
				return b.onerror(f, e, a, c, d)
			}, f.onload = function (e) {
				return b.onload(f, e, a, c, d)
			}, b.isInstanceOf("Blob", a) || b.isInstanceOf("File", a)) e = f._objectURL = b.createObjectURL(a);
		else {
			if ("string" != typeof a) return !1;
			e = a, d && d.crossOrigin && (f.crossOrigin = d.crossOrigin)
		}
		return e ? (f.src = e, f) : b.readFile(a, function (a) {
			var b = a.target;
			b && b.result ? f.src = b.result : c && c(a)
		})
	}

	function c(a, c) {
		!a._objectURL || c && c.noRevoke || (b.revokeObjectURL(a._objectURL), delete a._objectURL)
	}
	var d = window.createObjectURL && window || window.URL && URL.revokeObjectURL && URL || window.webkitURL && webkitURL;
	b.isInstanceOf = function (a, b) {
		return Object.prototype.toString.call(b) === "[object " + a + "]"
	}, b.transform = function (a, c, d, e, f) {
		d(b.scale(a, c, f), f)
	}, b.onerror = function (a, b, d, e, f) {
		c(a, f), e && e.call(a, b)
	}, b.onload = function (a, d, e, f, g) {
		c(a, g), f && b.transform(a, g, f, e, {})
	}, b.transformCoordinates = function () {}, b.getTransformedOptions = function (a, b) {
		var c, d, e, f, g = b.aspectRatio;
		if (!g) return b;
		c = {};
		for (d in b) b.hasOwnProperty(d) && (c[d] = b[d]);
		return c.crop = !0, e = a.naturalWidth || a.width, f = a.naturalHeight || a.height, e / f > g ? (c.maxWidth = f * g, c.maxHeight = f) : (c.maxWidth = e, c.maxHeight = e / g), c
	}, b.renderImageToCanvas = function (a, b, c, d, e, f, g, h, i, j) {
		return a.getContext("2d").drawImage(b, c, d, e, f, g, h, i, j), a
	}, b.hasCanvasOption = function (a) {
		return a.canvas || a.crop || !!a.aspectRatio
	}, b.scale = function (a, c, d) {
		function e() {
			var a = Math.max((i || v) / v, (j || w) / w);
			a > 1 && (v *= a, w *= a)
		}

		function f() {
			var a = Math.min((g || v) / v, (h || w) / w);
			a < 1 && (v *= a, w *= a)
		}
		c = c || {};
		var g, h, i, j, k, l, m, n, o, p, q, r = document.createElement("canvas"),
			s = a.getContext || b.hasCanvasOption(c) && r.getContext,
			t = a.naturalWidth || a.width,
			u = a.naturalHeight || a.height,
			v = t,
			w = u;
		if (s && (c = b.getTransformedOptions(a, c, d), m = c.left || 0, n = c.top || 0, c.sourceWidth ? (k = c.sourceWidth, void 0 !== c.right && void 0 === c.left && (m = t - k - c.right)) : k = t - m - (c.right || 0), c.sourceHeight ? (l = c.sourceHeight, void 0 !== c.bottom && void 0 === c.top && (n = u - l - c.bottom)) : l = u - n - (c.bottom || 0), v = k, w = l), g = c.maxWidth, h = c.maxHeight, i = c.minWidth, j = c.minHeight, s && g && h && c.crop ? (v = g, w = h, q = k / l - g / h, q < 0 ? (l = h * k / g, void 0 === c.top && void 0 === c.bottom && (n = (u - l) / 2)) : q > 0 && (k = g * l / h, void 0 === c.left && void 0 === c.right && (m = (t - k) / 2))) : ((c.contain || c.cover) && (i = g = g || i, j = h = h || j), c.cover ? (f(), e()) : (e(), f())), s) {
			if (o = c.pixelRatio, o > 1 && (r.style.width = v + "px", r.style.height = w + "px", v *= o, w *= o, r.getContext("2d").scale(o, o)), p = c.downsamplingRatio, p > 0 && p < 1 && v < k && w < l)
				for (; k * p > v;) r.width = k * p, r.height = l * p, b.renderImageToCanvas(r, a, m, n, k, l, 0, 0, r.width, r.height), k = r.width, l = r.height, a = document.createElement("canvas"), a.width = k, a.height = l, b.renderImageToCanvas(a, r, 0, 0, k, l, 0, 0, k, l);
			return r.width = v, r.height = w, b.transformCoordinates(r, c), b.renderImageToCanvas(r, a, m, n, k, l, 0, 0, v, w)
		}
		return a.width = v, a.height = w, a
	}, b.createObjectURL = function (a) {
		return !!d && d.createObjectURL(a)
	}, b.revokeObjectURL = function (a) {
		return !!d && d.revokeObjectURL(a)
	}, b.readFile = function (a, b, c) {
		if (window.FileReader) {
			var d = new FileReader;
			if (d.onload = d.onerror = b, c = c || "readAsDataURL", d[c]) return d[c](a), d
		}
		return !1
	}, "function" == typeof define && define.amd ? define(function () {
		return b
	}) : "object" == typeof module && module.exports ? module.exports = b : a.loadImage = b
}(window),
function (a) {
	"use strict";
	"function" == typeof define && define.amd ? define(["./load-image"], a) : a("object" == typeof module && module.exports ? require("./load-image") : window.loadImage)
}(function (a) {
	"use strict";
	var b = window.Blob && (Blob.prototype.slice || Blob.prototype.webkitSlice || Blob.prototype.mozSlice);
	a.blobSlice = b && function () {
		var a = this.slice || this.webkitSlice || this.mozSlice;
		return a.apply(this, arguments)
	}, a.metaDataParsers = {
		jpeg: {
			65505: []
		}
	}, a.parseMetaData = function (b, c, d, e) {
		d = d || {}, e = e || {};
		var f = this,
			g = d.maxMetaDataSize || 262144,
			h = !(window.DataView && b && b.size >= 12 && "image/jpeg" === b.type && a.blobSlice);
		!h && a.readFile(a.blobSlice.call(b, 0, g), function (b) {
			if (b.target.error) return console.log(b.target.error), void c(e);
			var g, h, i, j, k = b.target.result,
				l = new DataView(k),
				m = 2,
				n = l.byteLength - 4,
				o = m;
			if (65496 === l.getUint16(0)) {
				for (; m < n && (g = l.getUint16(m), g >= 65504 && g <= 65519 || 65534 === g);) {
					if (h = l.getUint16(m + 2) + 2, m + h > l.byteLength) {
						console.log("Invalid meta data: Invalid segment size.");
						break
					}
					if (i = a.metaDataParsers.jpeg[g])
						for (j = 0; j < i.length; j += 1) i[j].call(f, l, m, h, e, d);
					m += h, o = m
				}!d.disableImageHead && o > 6 && (k.slice ? e.imageHead = k.slice(0, o) : e.imageHead = new Uint8Array(k).subarray(0, o))
			} else console.log("Invalid JPEG file: Missing JPEG marker.");
			c(e)
		}, "readAsArrayBuffer") || c(e)
	}, a.hasMetaOption = function (a) {
		return a.meta
	};
	var c = a.transform;
	a.transform = function (b, d, e, f, g) {
		a.hasMetaOption(d || {}) ? a.parseMetaData(f, function (g) {
			c.call(a, b, d, e, f, g)
		}, d, g) : c.apply(a, arguments)
	}
}),
function (a) {
	"use strict";
	"function" == typeof define && define.amd ? define(["./load-image", "./load-image-meta"], a) : "object" == typeof module && module.exports ? a(require("./load-image"), require("./load-image-meta")) : a(window.loadImage)
}(function (a) {
	"use strict";
	a.ExifMap = function () {
		return this
	}, a.ExifMap.prototype.map = {
		Orientation: 274
	}, a.ExifMap.prototype.get = function (a) {
		return this[a] || this[this.map[a]]
	}, a.getExifThumbnail = function (a, b, c) {
		var d, e, f;
		if (!c || b + c > a.byteLength) return void console.log("Invalid Exif data: Invalid thumbnail data.");
		for (d = [], e = 0; e < c; e += 1) f = a.getUint8(b + e), d.push((f < 16 ? "0" : "") + f.toString(16));
		return "data:image/jpeg,%" + d.join("%")
	}, a.exifTagTypes = {
		1: {
			getValue: function (a, b) {
				return a.getUint8(b)
			},
			size: 1
		},
		2: {
			getValue: function (a, b) {
				return String.fromCharCode(a.getUint8(b))
			},
			size: 1,
			ascii: !0
		},
		3: {
			getValue: function (a, b, c) {
				return a.getUint16(b, c)
			},
			size: 2
		},
		4: {
			getValue: function (a, b, c) {
				return a.getUint32(b, c)
			},
			size: 4
		},
		5: {
			getValue: function (a, b, c) {
				return a.getUint32(b, c) / a.getUint32(b + 4, c)
			},
			size: 8
		},
		9: {
			getValue: function (a, b, c) {
				return a.getInt32(b, c)
			},
			size: 4
		},
		10: {
			getValue: function (a, b, c) {
				return a.getInt32(b, c) / a.getInt32(b + 4, c)
			},
			size: 8
		}
	}, a.exifTagTypes[7] = a.exifTagTypes[1], a.getExifValue = function (b, c, d, e, f, g) {
		var h, i, j, k, l, m, n = a.exifTagTypes[e];
		if (!n) return void console.log("Invalid Exif data: Invalid tag type.");
		if (h = n.size * f, i = h > 4 ? c + b.getUint32(d + 8, g) : d + 8, i + h > b.byteLength) return void console.log("Invalid Exif data: Invalid data offset.");
		if (1 === f) return n.getValue(b, i, g);
		for (j = [], k = 0; k < f; k += 1) j[k] = n.getValue(b, i + k * n.size, g);
		if (n.ascii) {
			for (l = "", k = 0; k < j.length && (m = j[k], "\0" !== m); k += 1) l += m;
			return l
		}
		return j
	}, a.parseExifTag = function (b, c, d, e, f) {
		var g = b.getUint16(d, e);
		f.exif[g] = a.getExifValue(b, c, d, b.getUint16(d + 2, e), b.getUint32(d + 4, e), e)
	}, a.parseExifTags = function (a, b, c, d, e) {
		var f, g, h;
		if (c + 6 > a.byteLength) return void console.log("Invalid Exif data: Invalid directory offset.");
		if (f = a.getUint16(c, d), g = c + 2 + 12 * f, g + 4 > a.byteLength) return void console.log("Invalid Exif data: Invalid directory size.");
		for (h = 0; h < f; h += 1) this.parseExifTag(a, b, c + 2 + 12 * h, d, e);
		return a.getUint32(g, d)
	}, a.parseExifData = function (b, c, d, e, f) {
		if (!f.disableExif) {
			var g, h, i, j = c + 10;
			if (1165519206 === b.getUint32(c + 4)) {
				if (j + 8 > b.byteLength) return void console.log("Invalid Exif data: Invalid segment size.");
				if (0 !== b.getUint16(c + 8)) return void console.log("Invalid Exif data: Missing byte alignment offset.");
				switch (b.getUint16(j)) {
					case 18761:
						g = !0;
						break;
					case 19789:
						g = !1;
						break;
					default:
						return void console.log("Invalid Exif data: Invalid byte alignment marker.")
				}
				if (42 !== b.getUint16(j + 2, g)) return void console.log("Invalid Exif data: Missing TIFF marker.");
				h = b.getUint32(j + 4, g), e.exif = new a.ExifMap, h = a.parseExifTags(b, j, j + h, g, e), h && !f.disableExifThumbnail && (i = {
					exif: {}
				}, h = a.parseExifTags(b, j, j + h, g, i), i.exif[513] && (e.exif.Thumbnail = a.getExifThumbnail(b, j + i.exif[513], i.exif[514]))), e.exif[34665] && !f.disableExifSub && a.parseExifTags(b, j, j + e.exif[34665], g, e), e.exif[34853] && !f.disableExifGps && a.parseExifTags(b, j, j + e.exif[34853], g, e)
			}
		}
	}, a.metaDataParsers.jpeg[65505].push(a.parseExifData)
}),
function (a) {
	"use strict";
	"function" == typeof define && define.amd ? define(["./load-image", "./load-image-exif"], a) : "object" == typeof module && module.exports ? a(require("./load-image"), require("./load-image-exif")) : a(window.loadImage)
}(function (a) {
	"use strict";
	a.ExifMap.prototype.tags = {
			256: "ImageWidth",
			257: "ImageHeight",
			34665: "ExifIFDPointer",
			34853: "GPSInfoIFDPointer",
			40965: "InteroperabilityIFDPointer",
			258: "BitsPerSample",
			259: "Compression",
			262: "PhotometricInterpretation",
			274: "Orientation",
			277: "SamplesPerPixel",
			284: "PlanarConfiguration",
			530: "YCbCrSubSampling",
			531: "YCbCrPositioning",
			282: "XResolution",
			283: "YResolution",
			296: "ResolutionUnit",
			273: "StripOffsets",
			278: "RowsPerStrip",
			279: "StripByteCounts",
			513: "JPEGInterchangeFormat",
			514: "JPEGInterchangeFormatLength",
			301: "TransferFunction",
			318: "WhitePoint",
			319: "PrimaryChromaticities",
			529: "YCbCrCoefficients",
			532: "ReferenceBlackWhite",
			306: "DateTime",
			270: "ImageDescription",
			271: "Make",
			272: "Model",
			305: "Software",
			315: "Artist",
			33432: "Copyright",
			36864: "ExifVersion",
			40960: "FlashpixVersion",
			40961: "ColorSpace",
			40962: "PixelXDimension",
			40963: "PixelYDimension",
			42240: "Gamma",
			37121: "ComponentsConfiguration",
			37122: "CompressedBitsPerPixel",
			37500: "MakerNote",
			37510: "UserComment",
			40964: "RelatedSoundFile",
			36867: "DateTimeOriginal",
			36868: "DateTimeDigitized",
			37520: "SubSecTime",
			37521: "SubSecTimeOriginal",
			37522: "SubSecTimeDigitized",
			33434: "ExposureTime",
			33437: "FNumber",
			34850: "ExposureProgram",
			34852: "SpectralSensitivity",
			34855: "PhotographicSensitivity",
			34856: "OECF",
			34864: "SensitivityType",
			34865: "StandardOutputSensitivity",
			34866: "RecommendedExposureIndex",
			34867: "ISOSpeed",
			34868: "ISOSpeedLatitudeyyy",
			34869: "ISOSpeedLatitudezzz",
			37377: "ShutterSpeedValue",
			37378: "ApertureValue",
			37379: "BrightnessValue",
			37380: "ExposureBias",
			37381: "MaxApertureValue",
			37382: "SubjectDistance",
			37383: "MeteringMode",
			37384: "LightSource",
			37385: "Flash",
			37396: "SubjectArea",
			37386: "FocalLength",
			41483: "FlashEnergy",
			41484: "SpatialFrequencyResponse",
			41486: "FocalPlaneXResolution",
			41487: "FocalPlaneYResolution",
			41488: "FocalPlaneResolutionUnit",
			41492: "SubjectLocation",
			41493: "ExposureIndex",
			41495: "SensingMethod",
			41728: "FileSource",
			41729: "SceneType",
			41730: "CFAPattern",
			41985: "CustomRendered",
			41986: "ExposureMode",
			41987: "WhiteBalance",
			41988: "DigitalZoomRatio",
			41989: "FocalLengthIn35mmFilm",
			41990: "SceneCaptureType",
			41991: "GainControl",
			41992: "Contrast",
			41993: "Saturation",
			41994: "Sharpness",
			41995: "DeviceSettingDescription",
			41996: "SubjectDistanceRange",
			42016: "ImageUniqueID",
			42032: "CameraOwnerName",
			42033: "BodySerialNumber",
			42034: "LensSpecification",
			42035: "LensMake",
			42036: "LensModel",
			42037: "LensSerialNumber",
			0: "GPSVersionID",
			1: "GPSLatitudeRef",
			2: "GPSLatitude",
			3: "GPSLongitudeRef",
			4: "GPSLongitude",
			5: "GPSAltitudeRef",
			6: "GPSAltitude",
			7: "GPSTimeStamp",
			8: "GPSSatellites",
			9: "GPSStatus",
			10: "GPSMeasureMode",
			11: "GPSDOP",
			12: "GPSSpeedRef",
			13: "GPSSpeed",
			14: "GPSTrackRef",
			15: "GPSTrack",
			16: "GPSImgDirectionRef",
			17: "GPSImgDirection",
			18: "GPSMapDatum",
			19: "GPSDestLatitudeRef",
			20: "GPSDestLatitude",
			21: "GPSDestLongitudeRef",
			22: "GPSDestLongitude",
			23: "GPSDestBearingRef",
			24: "GPSDestBearing",
			25: "GPSDestDistanceRef",
			26: "GPSDestDistance",
			27: "GPSProcessingMethod",
			28: "GPSAreaInformation",
			29: "GPSDateStamp",
			30: "GPSDifferential",
			31: "GPSHPositioningError"
		}, a.ExifMap.prototype.stringValues = {
			ExposureProgram: {
				0: "Undefined",
				1: "Manual",
				2: "Normal program",
				3: "Aperture priority",
				4: "Shutter priority",
				5: "Creative program",
				6: "Action program",
				7: "Portrait mode",
				8: "Landscape mode"
			},
			MeteringMode: {
				0: "Unknown",
				1: "Average",
				2: "CenterWeightedAverage",
				3: "Spot",
				4: "MultiSpot",
				5: "Pattern",
				6: "Partial",
				255: "Other"
			},
			LightSource: {
				0: "Unknown",
				1: "Daylight",
				2: "Fluorescent",
				3: "Tungsten (incandescent light)",
				4: "Flash",
				9: "Fine weather",
				10: "Cloudy weather",
				11: "Shade",
				12: "Daylight fluorescent (D 5700 - 7100K)",
				13: "Day white fluorescent (N 4600 - 5400K)",
				14: "Cool white fluorescent (W 3900 - 4500K)",
				15: "White fluorescent (WW 3200 - 3700K)",
				17: "Standard light A",
				18: "Standard light B",
				19: "Standard light C",
				20: "D55",
				21: "D65",
				22: "D75",
				23: "D50",
				24: "ISO studio tungsten",
				255: "Other"
			},
			Flash: {
				0: "Flash did not fire",
				1: "Flash fired",
				5: "Strobe return light not detected",
				7: "Strobe return light detected",
				9: "Flash fired, compulsory flash mode",
				13: "Flash fired, compulsory flash mode, return light not detected",
				15: "Flash fired, compulsory flash mode, return light detected",
				16: "Flash did not fire, compulsory flash mode",
				24: "Flash did not fire, auto mode",
				25: "Flash fired, auto mode",
				29: "Flash fired, auto mode, return light not detected",
				31: "Flash fired, auto mode, return light detected",
				32: "No flash function",
				65: "Flash fired, red-eye reduction mode",
				69: "Flash fired, red-eye reduction mode, return light not detected",
				71: "Flash fired, red-eye reduction mode, return light detected",
				73: "Flash fired, compulsory flash mode, red-eye reduction mode",
				77: "Flash fired, compulsory flash mode, red-eye reduction mode, return light not detected",
				79: "Flash fired, compulsory flash mode, red-eye reduction mode, return light detected",
				89: "Flash fired, auto mode, red-eye reduction mode",
				93: "Flash fired, auto mode, return light not detected, red-eye reduction mode",
				95: "Flash fired, auto mode, return light detected, red-eye reduction mode"
			},
			SensingMethod: {
				1: "Undefined",
				2: "One-chip color area sensor",
				3: "Two-chip color area sensor",
				4: "Three-chip color area sensor",
				5: "Color sequential area sensor",
				7: "Trilinear sensor",
				8: "Color sequential linear sensor"
			},
			SceneCaptureType: {
				0: "Standard",
				1: "Landscape",
				2: "Portrait",
				3: "Night scene"
			},
			SceneType: {
				1: "Directly photographed"
			},
			CustomRendered: {
				0: "Normal process",
				1: "Custom process"
			},
			WhiteBalance: {
				0: "Auto white balance",
				1: "Manual white balance"
			},
			GainControl: {
				0: "None",
				1: "Low gain up",
				2: "High gain up",
				3: "Low gain down",
				4: "High gain down"
			},
			Contrast: {
				0: "Normal",
				1: "Soft",
				2: "Hard"
			},
			Saturation: {
				0: "Normal",
				1: "Low saturation",
				2: "High saturation"
			},
			Sharpness: {
				0: "Normal",
				1: "Soft",
				2: "Hard"
			},
			SubjectDistanceRange: {
				0: "Unknown",
				1: "Macro",
				2: "Close view",
				3: "Distant view"
			},
			FileSource: {
				3: "DSC"
			},
			ComponentsConfiguration: {
				0: "",
				1: "Y",
				2: "Cb",
				3: "Cr",
				4: "R",
				5: "G",
				6: "B"
			},
			Orientation: {
				1: "top-left",
				2: "top-right",
				3: "bottom-right",
				4: "bottom-left",
				5: "left-top",
				6: "right-top",
				7: "right-bottom",
				8: "left-bottom"
			}
		}, a.ExifMap.prototype.getText = function (a) {
			var b = this.get(a);
			switch (a) {
				case "LightSource":
				case "Flash":
				case "MeteringMode":
				case "ExposureProgram":
				case "SensingMethod":
				case "SceneCaptureType":
				case "SceneType":
				case "CustomRendered":
				case "WhiteBalance":
				case "GainControl":
				case "Contrast":
				case "Saturation":
				case "Sharpness":
				case "SubjectDistanceRange":
				case "FileSource":
				case "Orientation":
					return this.stringValues[a][b];
				case "ExifVersion":
				case "FlashpixVersion":
					if (!b) return;
					return String.fromCharCode(b[0], b[1], b[2], b[3]);
				case "ComponentsConfiguration":
					if (!b) return;
					return this.stringValues[a][b[0]] + this.stringValues[a][b[1]] + this.stringValues[a][b[2]] + this.stringValues[a][b[3]];
				case "GPSVersionID":
					if (!b) return;
					return b[0] + "." + b[1] + "." + b[2] + "." + b[3]
			}
			return String(b)
		},
		function (a) {
			var b, c = a.tags,
				d = a.map;
			for (b in c) c.hasOwnProperty(b) && (d[c[b]] = b)
		}(a.ExifMap.prototype), a.ExifMap.prototype.getAll = function () {
			var a, b, c = {};
			for (a in this) this.hasOwnProperty(a) && (b = this.tags[a], b && (c[b] = this.getText(b)));
			return c
		}
}),
function (a) {
	"use strict";
	"function" == typeof define && define.amd ? define(["./load-image"], a) : a("object" == typeof module && module.exports ? require("./load-image") : window.loadImage)
}(function (a) {
	"use strict";
	var b = a.hasCanvasOption,
		c = a.hasMetaOption,
		d = a.transformCoordinates,
		e = a.getTransformedOptions;
	a.hasCanvasOption = function (c) {
		return !!c.orientation || b.call(a, c)
	}, a.hasMetaOption = function (b) {
		return b.orientation === !0 || c.call(a, b)
	}, a.transformCoordinates = function (b, c) {
		d.call(a, b, c);
		var e = b.getContext("2d"),
			f = b.width,
			g = b.height,
			h = b.style.width,
			i = b.style.height,
			j = c.orientation;
		if (j && !(j > 8)) switch (j > 4 && (b.width = g, b.height = f, b.style.width = i, b.style.height = h), j) {
			case 2:
				e.translate(f, 0), e.scale(-1, 1);
				break;
			case 3:
				e.translate(f, g), e.rotate(Math.PI);
				break;
			case 4:
				e.translate(0, g), e.scale(1, -1);
				break;
			case 5:
				e.rotate(.5 * Math.PI), e.scale(1, -1);
				break;
			case 6:
				e.rotate(.5 * Math.PI), e.translate(0, -g);
				break;
			case 7:
				e.rotate(.5 * Math.PI), e.translate(f, -g), e.scale(-1, 1);
				break;
			case 8:
				e.rotate(-.5 * Math.PI), e.translate(-f, 0)
		}
	}, a.getTransformedOptions = function (b, c, d) {
		var f, g, h = e.call(a, b, c),
			i = h.orientation;
		if (i === !0 && d && d.exif && (i = d.exif.get("Orientation")), !i || i > 8 || 1 === i) return h;
		f = {};
		for (g in h) h.hasOwnProperty(g) && (f[g] = h[g]);
		switch (f.orientation = i, i) {
			case 2:
				f.left = h.right, f.right = h.left;
				break;
			case 3:
				f.left = h.right, f.top = h.bottom, f.right = h.left, f.bottom = h.top;
				break;
			case 4:
				f.top = h.bottom, f.bottom = h.top;
				break;
			case 5:
				f.left = h.top, f.top = h.left, f.right = h.bottom, f.bottom = h.right;
				break;
			case 6:
				f.left = h.top, f.top = h.right, f.right = h.bottom, f.bottom = h.left;
				break;
			case 7:
				f.left = h.bottom, f.top = h.right, f.right = h.top, f.bottom = h.left;
				break;
			case 8:
				f.left = h.bottom, f.top = h.left, f.right = h.top, f.bottom = h.right
		}
		return f.orientation > 4 && (f.maxWidth = h.maxHeight, f.maxHeight = h.maxWidth, f.minWidth = h.minHeight, f.minHeight = h.minWidth, f.sourceWidth = h.sourceHeight, f.sourceHeight = h.sourceWidth), f
	}
}),
function (a) {
	"use strict";
	"function" == typeof define && define.amd ? define(["jquery"], a) : a("object" == typeof exports ? require("jquery") : window.jQuery)
}(function (a) {
	"use strict";
	var b = 0;
	a.ajaxTransport("iframe", function (c) {
		if (c.async) {
			var d, e, f, g = c.initialIframeSrc || "javascript:false;";
			return {
				send: function (h, i) {
					d = a('<form style="display:none;"></form>'), d.attr("accept-charset", c.formAcceptCharset), f = /\?/.test(c.url) ? "&" : "?", "DELETE" === c.type ? (c.url = c.url + f + "_method=DELETE", c.type = "POST") : "PUT" === c.type ? (c.url = c.url + f + "_method=PUT", c.type = "POST") : "PATCH" === c.type && (c.url = c.url + f + "_method=PATCH", c.type = "POST"), b += 1, e = a('<iframe src="' + g + '" name="iframe-transport-' + b + '"></iframe>').bind("load", function () {
						var b, f = a.isArray(c.paramName) ? c.paramName : [c.paramName];
						e.unbind("load").bind("load", function () {
							var b;
							try {
								if (b = e.contents(), !b.length || !b[0].firstChild) throw new Error
							} catch (a) {
								b = void 0
							}
							i(200, "success", {
								iframe: b
							}), a('<iframe src="' + g + '"></iframe>').appendTo(d), window.setTimeout(function () {
								d.remove()
							}, 0)
						}), d.prop("target", e.prop("name")).prop("action", c.url).prop("method", c.type), c.formData && a.each(c.formData, function (b, c) {
							a('<input type="hidden"/>').prop("name", c.name).val(c.value).appendTo(d)
						}), c.fileInput && c.fileInput.length && "POST" === c.type && (b = c.fileInput.clone(), c.fileInput.after(function (a) {
							return b[a]
						}), c.paramName && c.fileInput.each(function (b) {
							a(this).prop("name", f[b] || c.paramName)
						}), d.append(c.fileInput).prop("enctype", "multipart/form-data").prop("encoding", "multipart/form-data"), c.fileInput.removeAttr("form")), d.submit(), b && b.length && c.fileInput.each(function (c, d) {
							var e = a(b[c]);
							a(d).prop("name", e.prop("name")).attr("form", e.attr("form")), e.replaceWith(d)
						})
					}), d.append(e).appendTo(document.body)
				},
				abort: function () {
					e && e.unbind("load").prop("src", g), d && d.remove()
				}
			}
		}
	}), a.ajaxSetup({
		converters: {
			"iframe text": function (b) {
				return b && a(b[0].body).text()
			},
			"iframe json": function (b) {
				return b && a.parseJSON(a(b[0].body).text())
			},
			"iframe html": function (b) {
				return b && a(b[0].body).html()
			},
			"iframe xml": function (b) {
				var c = b && b[0];
				return c && a.isXMLDoc(c) ? c : a.parseXML(c.XMLDocument && c.XMLDocument.xml || a(c.body).html())
			},
			"iframe script": function (b) {
				return b && a.globalEval(a(b[0].body).text())
			}
		}
	})
}),
function (a) {
	"use strict";
	"function" == typeof define && define.amd ? define(["jquery", "jquery-ui/widget"], a) : "object" == typeof exports ? a(require("jquery"), require("./vendor/jquery.ui.widget")) : a(window.jQuery)
}(function (a) {
	"use strict";

	function b(b) {
		var c = "dragover" === b;
		return function (d) {
			d.dataTransfer = d.originalEvent && d.originalEvent.dataTransfer;
			var e = d.dataTransfer;
			e && a.inArray("Files", e.types) !== -1 && this._trigger(b, a.Event(b, {
				delegatedEvent: d
			})) !== !1 && (d.preventDefault(), c && (e.dropEffect = "copy"))
		}
	}
	a.support.fileInput = !(new RegExp("(Android (1\\.[0156]|2\\.[01]))|(Windows Phone (OS 7|8\\.0))|(XBLWP)|(ZuneWP)|(WPDesktop)|(w(eb)?OSBrowser)|(webOS)|(Kindle/(1\\.0|2\\.[05]|3\\.0))").test(window.navigator.userAgent) || a('<input type="file">').prop("disabled")), a.support.xhrFileUpload = !(!window.ProgressEvent || !window.FileReader), a.support.xhrFormDataFileUpload = !!window.FormData, a.support.blobSlice = window.Blob && (Blob.prototype.slice || Blob.prototype.webkitSlice || Blob.prototype.mozSlice), a.widget("blueimp.fileupload", {
		options: {
			dropZone: a(document),
			pasteZone: void 0,
			fileInput: void 0,
			replaceFileInput: !0,
			paramName: void 0,
			singleFileUploads: !0,
			limitMultiFileUploads: void 0,
			limitMultiFileUploadSize: void 0,
			limitMultiFileUploadSizeOverhead: 512,
			sequentialUploads: !1,
			limitConcurrentUploads: void 0,
			forceIframeTransport: !1,
			redirect: void 0,
			redirectParamName: void 0,
			postMessage: void 0,
			multipart: !0,
			maxChunkSize: void 0,
			uploadedBytes: void 0,
			recalculateProgress: !0,
			progressInterval: 100,
			bitrateInterval: 500,
			autoUpload: !0,
			messages: {
				uploadedBytes: "Uploaded bytes exceed file size"
			},
			i18n: function (b, c) {
				return b = this.messages[b] || b.toString(), c && a.each(c, function (a, c) {
					b = b.replace("{" + a + "}", c)
				}), b
			},
			formData: function (a) {
				return a.serializeArray()
			},
			add: function (b, c) {
				return !b.isDefaultPrevented() && void((c.autoUpload || c.autoUpload !== !1 && a(this).fileupload("option", "autoUpload")) && c.process().done(function () {
					c.submit()
				}))
			},
			processData: !1,
			contentType: !1,
			cache: !1,
			timeout: 0
		},
		_specialOptions: ["fileInput", "dropZone", "pasteZone", "multipart", "forceIframeTransport"],
		_blobSlice: a.support.blobSlice && function () {
			var a = this.slice || this.webkitSlice || this.mozSlice;
			return a.apply(this, arguments)
		},
		_BitrateTimer: function () {
			this.timestamp = Date.now ? Date.now() : (new Date).getTime(), this.loaded = 0, this.bitrate = 0, this.getBitrate = function (a, b, c) {
				var d = a - this.timestamp;
				return (!this.bitrate || !c || d > c) && (this.bitrate = (b - this.loaded) * (1e3 / d) * 8, this.loaded = b, this.timestamp = a), this.bitrate
			}
		},
		_isXHRUpload: function (b) {
			return !b.forceIframeTransport && (!b.multipart && a.support.xhrFileUpload || a.support.xhrFormDataFileUpload)
		},
		_getFormData: function (b) {
			var c;
			return "function" === a.type(b.formData) ? b.formData(b.form) : a.isArray(b.formData) ? b.formData : "object" === a.type(b.formData) ? (c = [], a.each(b.formData, function (a, b) {
				c.push({
					name: a,
					value: b
				})
			}), c) : []
		},
		_getTotal: function (b) {
			var c = 0;
			return a.each(b, function (a, b) {
				c += b.size || 1
			}), c
		},
		_initProgressObject: function (b) {
			var c = {
				loaded: 0,
				total: 0,
				bitrate: 0
			};
			b._progress ? a.extend(b._progress, c) : b._progress = c
		},
		_initResponseObject: function (a) {
			var b;
			if (a._response)
				for (b in a._response) a._response.hasOwnProperty(b) && delete a._response[b];
			else a._response = {}
		},
		_onProgress: function (b, c) {
			if (b.lengthComputable) {
				var d, e = Date.now ? Date.now() : (new Date).getTime();
				if (c._time && c.progressInterval && e - c._time < c.progressInterval && b.loaded !== b.total) return;
				c._time = e, d = Math.floor(b.loaded / b.total * (c.chunkSize || c._progress.total)) + (c.uploadedBytes || 0), this._progress.loaded += d - c._progress.loaded, this._progress.bitrate = this._bitrateTimer.getBitrate(e, this._progress.loaded, c.bitrateInterval), c._progress.loaded = c.loaded = d, c._progress.bitrate = c.bitrate = c._bitrateTimer.getBitrate(e, d, c.bitrateInterval), this._trigger("progress", a.Event("progress", {
					delegatedEvent: b
				}), c), this._trigger("progressall", a.Event("progressall", {
					delegatedEvent: b
				}), this._progress)
			}
		},
		_initProgressListener: function (b) {
			var c = this,
				d = b.xhr ? b.xhr() : a.ajaxSettings.xhr();
			d.upload && (a(d.upload).bind("progress", function (a) {
				var d = a.originalEvent;
				a.lengthComputable = d.lengthComputable, a.loaded = d.loaded, a.total = d.total, c._onProgress(a, b)
			}), b.xhr = function () {
				return d
			})
		},
		_isInstanceOf: function (a, b) {
			return Object.prototype.toString.call(b) === "[object " + a + "]"
		},
		_initXHRData: function (b) {
			var c, d = this,
				e = b.files[0],
				f = b.multipart || !a.support.xhrFileUpload,
				g = "array" === a.type(b.paramName) ? b.paramName[0] : b.paramName;
			b.headers = a.extend({}, b.headers), b.contentRange && (b.headers["Content-Range"] = b.contentRange), f && !b.blob && this._isInstanceOf("File", e) || (b.headers["Content-Disposition"] = 'attachment; filename="' + encodeURI(e.name) + '"'), f ? a.support.xhrFormDataFileUpload && (b.postMessage ? (c = this._getFormData(b), b.blob ? c.push({
				name: g,
				value: b.blob
			}) : a.each(b.files, function (d, e) {
				c.push({
					name: "array" === a.type(b.paramName) && b.paramName[d] || g,
					value: e
				})
			})) : (d._isInstanceOf("FormData", b.formData) ? c = b.formData : (c = new FormData, a.each(this._getFormData(b), function (a, b) {
				c.append(b.name, b.value)
			})), b.blob ? c.append(g, b.blob, e.name) : a.each(b.files, function (e, f) {
				(d._isInstanceOf("File", f) || d._isInstanceOf("Blob", f)) && c.append("array" === a.type(b.paramName) && b.paramName[e] || g, f, f.uploadName || f.name)
			})), b.data = c) : (b.contentType = e.type || "application/octet-stream", b.data = b.blob || e), b.blob = null
		},
		_initIframeSettings: function (b) {
			var c = a("<a></a>").prop("href", b.url).prop("host");
			b.dataType = "iframe " + (b.dataType || ""), b.formData = this._getFormData(b), b.redirect && c && c !== location.host && b.formData.push({
				name: b.redirectParamName || "redirect",
				value: b.redirect
			})
		},
		_initDataSettings: function (a) {
			this._isXHRUpload(a) ? (this._chunkedUpload(a, !0) || (a.data || this._initXHRData(a), this._initProgressListener(a)), a.postMessage && (a.dataType = "postmessage " + (a.dataType || ""))) : this._initIframeSettings(a)
		},
		_getParamName: function (b) {
			var c = a(b.fileInput),
				d = b.paramName;
			return d ? a.isArray(d) || (d = [d]) : (d = [], c.each(function () {
				for (var b = a(this), c = b.prop("name") || "files[]", e = (b.prop("files") || [1]).length; e;) d.push(c), e -= 1
			}), d.length || (d = [c.prop("name") || "files[]"])), d
		},
		_initFormSettings: function (b) {
			b.form && b.form.length || (b.form = a(b.fileInput.prop("form")), b.form.length || (b.form = a(this.options.fileInput.prop("form")))), b.paramName = this._getParamName(b), b.url || (b.url = b.form.prop("action") || location.href), b.type = (b.type || "string" === a.type(b.form.prop("method")) && b.form.prop("method") || "").toUpperCase(), "POST" !== b.type && "PUT" !== b.type && "PATCH" !== b.type && (b.type = "POST"), b.formAcceptCharset || (b.formAcceptCharset = b.form.attr("accept-charset"))
		},
		_getAJAXSettings: function (b) {
			var c = a.extend({}, this.options, b);
			return this._initFormSettings(c), this._initDataSettings(c), c
		},
		_getDeferredState: function (a) {
			return a.state ? a.state() : a.isResolved() ? "resolved" : a.isRejected() ? "rejected" : "pending"
		},
		_enhancePromise: function (a) {
			return a.success = a.done, a.error = a.fail, a.complete = a.always, a
		},
		_getXHRPromise: function (b, c, d) {
			var e = a.Deferred(),
				f = e.promise();
			return c = c || this.options.context || f, b === !0 ? e.resolveWith(c, d) : b === !1 && e.rejectWith(c, d), f.abort = e.promise, this._enhancePromise(f)
		},
		_addConvenienceMethods: function (b, c) {
			var d = this,
				e = function (b) {
					return a.Deferred().resolveWith(d, b).promise()
				};
			c.process = function (b, f) {
				return (b || f) && (c._processQueue = this._processQueue = (this._processQueue || e([this])).then(function () {
					return c.errorThrown ? a.Deferred().rejectWith(d, [c]).promise() : e(arguments)
				}).then(b, f)), this._processQueue || e([this])
			}, c.submit = function () {
				return "pending" !== this.state() && (c.jqXHR = this.jqXHR = d._trigger("submit", a.Event("submit", {
					delegatedEvent: b
				}), this) !== !1 && d._onSend(b, this)), this.jqXHR || d._getXHRPromise()
			}, c.abort = function () {
				return this.jqXHR ? this.jqXHR.abort() : (this.errorThrown = "abort", d._trigger("fail", null, this), d._getXHRPromise(!1))
			}, c.state = function () {
				return this.jqXHR ? d._getDeferredState(this.jqXHR) : this._processQueue ? d._getDeferredState(this._processQueue) : void 0
			}, c.processing = function () {
				return !this.jqXHR && this._processQueue && "pending" === d._getDeferredState(this._processQueue)
			}, c.progress = function () {
				return this._progress
			}, c.response = function () {
				return this._response
			}
		},
		_getUploadedBytes: function (a) {
			var b = a.getResponseHeader("Range"),
				c = b && b.split("-"),
				d = c && c.length > 1 && parseInt(c[1], 10);
			return d && d + 1
		},
		_chunkedUpload: function (b, c) {
			b.uploadedBytes = b.uploadedBytes || 0;
			var d, e, f = this,
				g = b.files[0],
				h = g.size,
				i = b.uploadedBytes,
				j = b.maxChunkSize || h,
				k = this._blobSlice,
				l = a.Deferred(),
				m = l.promise();
			return !(!(this._isXHRUpload(b) && k && (i || j < h)) || b.data) && (!!c || (i >= h ? (g.error = b.i18n("uploadedBytes"), this._getXHRPromise(!1, b.context, [null, "error", g.error])) : (e = function () {
				var c = a.extend({}, b),
					m = c._progress.loaded;
				c.blob = k.call(g, i, i + j, g.type), c.chunkSize = c.blob.size, c.contentRange = "bytes " + i + "-" + (i + c.chunkSize - 1) + "/" + h, f._initXHRData(c), f._initProgressListener(c), d = (f._trigger("chunksend", null, c) !== !1 && a.ajax(c) || f._getXHRPromise(!1, c.context)).done(function (d, g, j) {
					i = f._getUploadedBytes(j) || i + c.chunkSize, m + c.chunkSize - c._progress.loaded && f._onProgress(a.Event("progress", {
						lengthComputable: !0,
						loaded: i - c.uploadedBytes,
						total: i - c.uploadedBytes
					}), c), b.uploadedBytes = c.uploadedBytes = i, c.result = d, c.textStatus = g, c.jqXHR = j, f._trigger("chunkdone", null, c), f._trigger("chunkalways", null, c), i < h ? e() : l.resolveWith(c.context, [d, g, j])
				}).fail(function (a, b, d) {
					c.jqXHR = a, c.textStatus = b, c.errorThrown = d, f._trigger("chunkfail", null, c), f._trigger("chunkalways", null, c), l.rejectWith(c.context, [a, b, d])
				})
			}, this._enhancePromise(m), m.abort = function () {
				return d.abort()
			}, e(), m)))
		},
		_beforeSend: function (a, b) {
			0 === this._active && (this._trigger("start"), this._bitrateTimer = new this._BitrateTimer, this._progress.loaded = this._progress.total = 0, this._progress.bitrate = 0), this._initResponseObject(b), this._initProgressObject(b), b._progress.loaded = b.loaded = b.uploadedBytes || 0, b._progress.total = b.total = this._getTotal(b.files) || 1, b._progress.bitrate = b.bitrate = 0, this._active += 1, this._progress.loaded += b.loaded, this._progress.total += b.total
		},
		_onDone: function (b, c, d, e) {
			var f = e._progress.total,
				g = e._response;
			e._progress.loaded < f && this._onProgress(a.Event("progress", {
				lengthComputable: !0,
				loaded: f,
				total: f
			}), e), g.result = e.result = b, g.textStatus = e.textStatus = c, g.jqXHR = e.jqXHR = d, this._trigger("done", null, e)
		},
		_onFail: function (a, b, c, d) {
			var e = d._response;
			d.recalculateProgress && (this._progress.loaded -= d._progress.loaded, this._progress.total -= d._progress.total), e.jqXHR = d.jqXHR = a, e.textStatus = d.textStatus = b, e.errorThrown = d.errorThrown = c, this._trigger("fail", null, d)
		},
		_onAlways: function (a, b, c, d) {
			this._trigger("always", null, d)
		},
		_onSend: function (b, c) {
			c.submit || this._addConvenienceMethods(b, c);
			var d, e, f, g, h = this,
				i = h._getAJAXSettings(c),
				j = function () {
					return h._sending += 1, i._bitrateTimer = new h._BitrateTimer, d = d || ((e || h._trigger("send", a.Event("send", {
						delegatedEvent: b
					}), i) === !1) && h._getXHRPromise(!1, i.context, e) || h._chunkedUpload(i) || a.ajax(i)).done(function (a, b, c) {
						h._onDone(a, b, c, i)
					}).fail(function (a, b, c) {
						h._onFail(a, b, c, i)
					}).always(function (a, b, c) {
						if (h._onAlways(a, b, c, i), h._sending -= 1, h._active -= 1, i.limitConcurrentUploads && i.limitConcurrentUploads > h._sending)
							for (var d = h._slots.shift(); d;) {
								if ("pending" === h._getDeferredState(d)) {
									d.resolve();
									break
								}
								d = h._slots.shift()
							}
						0 === h._active && h._trigger("stop")
					})
				};
			return this._beforeSend(b, i), this.options.sequentialUploads || this.options.limitConcurrentUploads && this.options.limitConcurrentUploads <= this._sending ? (this.options.limitConcurrentUploads > 1 ? (f = a.Deferred(), this._slots.push(f), g = f.then(j)) : (this._sequence = this._sequence.then(j, j), g = this._sequence), g.abort = function () {
				return e = [void 0, "abort", "abort"], d ? d.abort() : (f && f.rejectWith(i.context, e), j())
			}, this._enhancePromise(g)) : j()
		},
		_onAdd: function (b, c) {
			var d, e, f, g, h = this,
				i = !0,
				j = a.extend({}, this.options, c),
				k = c.files,
				l = k.length,
				m = j.limitMultiFileUploads,
				n = j.limitMultiFileUploadSize,
				o = j.limitMultiFileUploadSizeOverhead,
				p = 0,
				q = this._getParamName(j),
				r = 0;
			if (!l) return !1;
			if (n && void 0 === k[0].size && (n = void 0), (j.singleFileUploads || m || n) && this._isXHRUpload(j))
				if (j.singleFileUploads || n || !m)
					if (!j.singleFileUploads && n)
						for (f = [], d = [], g = 0; g < l; g += 1) p += k[g].size + o, (g + 1 === l || p + k[g + 1].size + o > n || m && g + 1 - r >= m) && (f.push(k.slice(r, g + 1)), e = q.slice(r, g + 1), e.length || (e = q), d.push(e), r = g + 1, p = 0);
					else d = q;
			else
				for (f = [], d = [], g = 0; g < l; g += m) f.push(k.slice(g, g + m)), e = q.slice(g, g + m), e.length || (e = q), d.push(e);
			else f = [k], d = [q];
			return c.originalFiles = k, a.each(f || k, function (e, g) {
				var j = a.extend({}, c);
				return j.files = f ? g : [g], j.paramName = d[e], h._initResponseObject(j), h._initProgressObject(j), h._addConvenienceMethods(b, j), i = h._trigger("add", a.Event("add", {
					delegatedEvent: b
				}), j)
			}), i
		},
		_replaceFileInput: function (b) {
			var c = b.fileInput,
				d = c.clone(!0),
				e = c.is(document.activeElement);
			b.fileInputClone = d, a("<form></form>").append(d)[0].reset(), c.after(d).detach(), e && d.focus(), a.cleanData(c.unbind("remove")), this.options.fileInput = this.options.fileInput.map(function (a, b) {
				return b === c[0] ? d[0] : b
			}), c[0] === this.element[0] && (this.element = d)
		},
		_handleFileTreeEntry: function (b, c) {
			var d, e = this,
				f = a.Deferred(),
				g = [],
				h = function (a) {
					a && !a.entry && (a.entry = b), f.resolve([a])
				},
				i = function (a) {
					e._handleFileTreeEntries(a, c + b.name + "/").done(function (a) {
						f.resolve(a)
					}).fail(h)
				},
				j = function () {
					d.readEntries(function (a) {
						a.length ? (g = g.concat(a), j()) : i(g)
					}, h)
				};
			return c = c || "", b.isFile ? b._file ? (b._file.relativePath = c, f.resolve(b._file)) : b.file(function (a) {
				a.relativePath = c, f.resolve(a)
			}, h) : b.isDirectory ? (d = b.createReader(), j()) : f.resolve([]), f.promise()
		},
		_handleFileTreeEntries: function (b, c) {
			var d = this;
			return a.when.apply(a, a.map(b, function (a) {
				return d._handleFileTreeEntry(a, c)
			})).then(function () {
				return Array.prototype.concat.apply([], arguments)
			})
		},
		_getDroppedFiles: function (b) {
			b = b || {};
			var c = b.items;
			return c && c.length && (c[0].webkitGetAsEntry || c[0].getAsEntry) ? this._handleFileTreeEntries(a.map(c, function (a) {
				var b;
				return a.webkitGetAsEntry ? (b = a.webkitGetAsEntry(), b && (b._file = a.getAsFile()), b) : a.getAsEntry()
			})) : a.Deferred().resolve(a.makeArray(b.files)).promise()
		},
		_getSingleFileInputFiles: function (b) {
			b = a(b);
			var c, d, e = b.prop("webkitEntries") || b.prop("entries");
			if (e && e.length) return this._handleFileTreeEntries(e);
			if (c = a.makeArray(b.prop("files")), c.length) void 0 === c[0].name && c[0].fileName && a.each(c, function (a, b) {
				b.name = b.fileName, b.size = b.fileSize
			});
			else {
				if (d = b.prop("value"), !d) return a.Deferred().resolve([]).promise();
				c = [{
					name: d.replace(/^.*\\/, "")
				}]
			}
			return a.Deferred().resolve(c).promise()
		},
		_getFileInputFiles: function (b) {
			return b instanceof a && 1 !== b.length ? a.when.apply(a, a.map(b, this._getSingleFileInputFiles)).then(function () {
				return Array.prototype.concat.apply([], arguments)
			}) : this._getSingleFileInputFiles(b)
		},
		_onChange: function (b) {
			var c = this,
				d = {
					fileInput: a(b.target),
					form: a(b.target.form)
				};
			this._getFileInputFiles(d.fileInput).always(function (e) {
				d.files = e, c.options.replaceFileInput && c._replaceFileInput(d), c._trigger("change", a.Event("change", {
					delegatedEvent: b
				}), d) !== !1 && c._onAdd(b, d)
			})
		},
		_onPaste: function (b) {
			var c = b.originalEvent && b.originalEvent.clipboardData && b.originalEvent.clipboardData.items,
				d = {
					files: []
				};
			c && c.length && (a.each(c, function (a, b) {
				var c = b.getAsFile && b.getAsFile();
				c && d.files.push(c)
			}), this._trigger("paste", a.Event("paste", {
				delegatedEvent: b
			}), d) !== !1 && this._onAdd(b, d))
		},
		_onDrop: function (b) {
			b.dataTransfer = b.originalEvent && b.originalEvent.dataTransfer;
			var c = this,
				d = b.dataTransfer,
				e = {};
			d && d.files && d.files.length && (b.preventDefault(), this._getDroppedFiles(d).always(function (d) {
				e.files = d, c._trigger("drop", a.Event("drop", {
					delegatedEvent: b
				}), e) !== !1 && c._onAdd(b, e)
			}))
		},
		_onDragOver: b("dragover"),
		_onDragEnter: b("dragenter"),
		_onDragLeave: b("dragleave"),
		_initEventHandlers: function () {
			this._isXHRUpload(this.options) && (this._on(this.options.dropZone, {
				dragover: this._onDragOver,
				drop: this._onDrop,
				dragenter: this._onDragEnter,
				dragleave: this._onDragLeave
			}), this._on(this.options.pasteZone, {
				paste: this._onPaste
			})), a.support.fileInput && this._on(this.options.fileInput, {
				change: this._onChange
			})
		},
		_destroyEventHandlers: function () {
			this._off(this.options.dropZone, "dragenter dragleave dragover drop"), this._off(this.options.pasteZone, "paste"), this._off(this.options.fileInput, "change")
		},
		_destroy: function () {
			this._destroyEventHandlers()
		},
		_setOption: function (b, c) {
			var d = a.inArray(b, this._specialOptions) !== -1;
			d && this._destroyEventHandlers(), this._super(b, c), d && (this._initSpecialOptions(), this._initEventHandlers())
		},
		_initSpecialOptions: function () {
			var b = this.options;
			void 0 === b.fileInput ? b.fileInput = this.element.is('input[type="file"]') ? this.element : this.element.find('input[type="file"]') : b.fileInput instanceof a || (b.fileInput = a(b.fileInput)), b.dropZone instanceof a || (b.dropZone = a(b.dropZone)), b.pasteZone instanceof a || (b.pasteZone = a(b.pasteZone))
		},
		_getRegExp: function (a) {
			var b = a.split("/"),
				c = b.pop();
			return b.shift(), new RegExp(b.join("/"), c)
		},
		_isRegExpOption: function (b, c) {
			return "url" !== b && "string" === a.type(c) && /^\/.*\/[igm]{0,3}$/.test(c)
		},
		_initDataAttributes: function () {
			var b = this,
				c = this.options,
				d = this.element.data();
			a.each(this.element[0].attributes, function (a, e) {
				var f, g = e.name.toLowerCase();
				/^data-/.test(g) && (g = g.slice(5).replace(/-[a-z]/g, function (a) {
					return a.charAt(1).toUpperCase()
				}), f = d[g], b._isRegExpOption(g, f) && (f = b._getRegExp(f)), c[g] = f)
			})
		},
		_create: function () {
			this._initDataAttributes(), this._initSpecialOptions(), this._slots = [], this._sequence = this._getXHRPromise(!0), this._sending = this._active = 0, this._initProgressObject(this), this._initEventHandlers()
		},
		active: function () {
			return this._active
		},
		progress: function () {
			return this._progress
		},
		add: function (b) {
			var c = this;
			b && !this.options.disabled && (b.fileInput && !b.files ? this._getFileInputFiles(b.fileInput).always(function (a) {
				b.files = a, c._onAdd(null, b)
			}) : (b.files = a.makeArray(b.files), this._onAdd(null, b)))
		},
		send: function (b) {
			if (b && !this.options.disabled) {
				if (b.fileInput && !b.files) {
					var c, d, e = this,
						f = a.Deferred(),
						g = f.promise();
					return g.abort = function () {
						return d = !0, c ? c.abort() : (f.reject(null, "abort", "abort"), g)
					}, this._getFileInputFiles(b.fileInput).always(function (a) {
						if (!d) {
							if (!a.length) return void f.reject();
							b.files = a, c = e._onSend(null, b), c.then(function (a, b, c) {
								f.resolve(a, b, c)
							}, function (a, b, c) {
								f.reject(a, b, c)
							})
						}
					}), this._enhancePromise(g)
				}
				if (b.files = a.makeArray(b.files), b.files.length) return this._onSend(null, b)
			}
			return this._getXHRPromise(!1, b && b.context)
		}
	})
}),
function (a) {
	"use strict";
	"function" == typeof define && define.amd ? define(["jquery", "./jquery.fileupload"], a) : "object" == typeof exports ? a(require("jquery"), require("./jquery.fileupload")) : a(window.jQuery)
}(function (a) {
	"use strict";
	var b = a.blueimp.fileupload.prototype.options.add;
	a.widget("blueimp.fileupload", a.blueimp.fileupload, {
		options: {
			processQueue: [],
			add: function (c, d) {
				var e = a(this);
				d.process(function () {
					return e.fileupload("process", d)
				}), b.call(this, c, d)
			}
		},
		processActions: {},
		_processFile: function (b, c) {
			var d = this,
				e = a.Deferred().resolveWith(d, [b]),
				f = e.promise();
			return this._trigger("process", null, b), a.each(b.processQueue, function (b, e) {
				var g = function (b) {
					return c.errorThrown ? a.Deferred().rejectWith(d, [c]).promise() : d.processActions[e.action].call(d, b, e)
				};
				f = f.then(g, e.always && g)
			}), f.done(function () {
				d._trigger("processdone", null, b), d._trigger("processalways", null, b)
			}).fail(function () {
				d._trigger("processfail", null, b), d._trigger("processalways", null, b)
			}), f
		},
		_transformProcessQueue: function (b) {
			var c = [];
			a.each(b.processQueue, function () {
				var d = {},
					e = this.action,
					f = this.prefix === !0 ? e : this.prefix;
				a.each(this, function (c, e) {
					"string" === a.type(e) && "@" === e.charAt(0) ? d[c] = b[e.slice(1) || (f ? f + c.charAt(0).toUpperCase() + c.slice(1) : c)] : d[c] = e
				}), c.push(d)
			}), b.processQueue = c
		},
		processing: function () {
			return this._processing
		},
		process: function (b) {
			var c = this,
				d = a.extend({}, this.options, b);
			return d.processQueue && d.processQueue.length && (this._transformProcessQueue(d), 0 === this._processing && this._trigger("processstart"), a.each(b.files, function (e) {
				var f = e ? a.extend({}, d) : d,
					g = function () {
						return b.errorThrown ? a.Deferred().rejectWith(c, [b]).promise() : c._processFile(f, b)
					};
				f.index = e, c._processing += 1, c._processingQueue = c._processingQueue.then(g, g).always(function () {
					c._processing -= 1, 0 === c._processing && c._trigger("processstop")
				})
			})), this._processingQueue
		},
		_create: function () {
			this._super(), this._processing = 0, this._processingQueue = a.Deferred().resolveWith(this).promise()
		}
	})
}),
function (a) {
	"use strict";
	"function" == typeof define && define.amd ? define(["jquery", "load-image", "load-image-meta", "load-image-exif", "canvas-to-blob", "./jquery.fileupload-process"], a) : "object" == typeof exports ? a(require("jquery"), require("blueimp-load-image/js/load-image"), require("blueimp-load-image/js/load-image-meta"), require("blueimp-load-image/js/load-image-exif"), require("blueimp-canvas-to-blob"), require("./jquery.fileupload-process")) : a(window.jQuery, window.loadImage)
}(function (a, b) {
	"use strict";
	a.blueimp.fileupload.prototype.options.processQueue.unshift({
		action: "loadImageMetaData",
		disableImageHead: "@",
		disableExif: "@",
		disableExifThumbnail: "@",
		disableExifSub: "@",
		disableExifGps: "@",
		disabled: "@disableImageMetaDataLoad"
	}, {
		action: "loadImage",
		prefix: !0,
		fileTypes: "@",
		maxFileSize: "@",
		noRevoke: "@",
		disabled: "@disableImageLoad"
	}, {
		action: "resizeImage",
		prefix: "image",
		maxWidth: "@",
		maxHeight: "@",
		minWidth: "@",
		minHeight: "@",
		crop: "@",
		orientation: "@",
		forceResize: "@",
		disabled: "@disableImageResize"
	}, {
		action: "saveImage",
		quality: "@imageQuality",
		type: "@imageType",
		disabled: "@disableImageResize"
	}, {
		action: "saveImageMetaData",
		disabled: "@disableImageMetaDataSave"
	}, {
		action: "resizeImage",
		prefix: "preview",
		maxWidth: "@",
		maxHeight: "@",
		minWidth: "@",
		minHeight: "@",
		crop: "@",
		orientation: "@",
		thumbnail: "@",
		canvas: "@",
		disabled: "@disableImagePreview"
	}, {
		action: "setImage",
		name: "@imagePreviewName",
		disabled: "@disableImagePreview"
	}, {
		action: "deleteImageReferences",
		disabled: "@disableImageReferencesDeletion"
	}), a.widget("blueimp.fileupload", a.blueimp.fileupload, {
		options: {
			loadImageFileTypes: /^image\/(gif|jpeg|png|svg\+xml)$/,
			loadImageMaxFileSize: 1e7,
			imageMaxWidth: 1920,
			imageMaxHeight: 1080,
			imageOrientation: !1,
			imageCrop: !1,
			disableImageResize: !0,
			previewMaxWidth: 80,
			previewMaxHeight: 80,
			previewOrientation: !0,
			previewThumbnail: !0,
			previewCrop: !1,
			previewCanvas: !0
		},
		processActions: {
			loadImage: function (c, d) {
				if (d.disabled) return c;
				var e = this,
					f = c.files[c.index],
					g = a.Deferred();
				return "number" === a.type(d.maxFileSize) && f.size > d.maxFileSize || d.fileTypes && !d.fileTypes.test(f.type) || !b(f, function (a) {
					a.src && (c.img = a), g.resolveWith(e, [c])
				}, d) ? c : g.promise()
			},
			resizeImage: function (c, d) {
				if (d.disabled || !c.canvas && !c.img) return c;
				d = a.extend({
					canvas: !0
				}, d);
				var e, f = this,
					g = a.Deferred(),
					h = d.canvas && c.canvas || c.img,
					i = function (a) {
						a && (a.width !== h.width || a.height !== h.height || d.forceResize) && (c[a.getContext ? "canvas" : "img"] = a), c.preview = a, g.resolveWith(f, [c])
					};
				if (c.exif) {
					if (d.orientation === !0 && (d.orientation = c.exif.get("Orientation")), d.thumbnail && (e = c.exif.get("Thumbnail"))) return b(e, i, d), g.promise();
					c.orientation ? delete d.orientation : c.orientation = d.orientation
				}
				return h ? (i(b.scale(h, d)), g.promise()) : c
			},
			saveImage: function (b, c) {
				if (!b.canvas || c.disabled) return b;
				var d = this,
					e = b.files[b.index],
					f = a.Deferred();
				return b.canvas.toBlob ? (b.canvas.toBlob(function (a) {
					a.name || (e.type === a.type ? a.name = e.name : e.name && (a.name = e.name.replace(/\.\w+$/, "." + a.type.substr(6)))), e.type !== a.type && delete b.imageHead, b.files[b.index] = a, f.resolveWith(d, [b])
				}, c.type || e.type, c.quality), f.promise()) : b
			},
			loadImageMetaData: function (c, d) {
				if (d.disabled) return c;
				var e = this,
					f = a.Deferred();
				return b.parseMetaData(c.files[c.index], function (b) {
					a.extend(c, b), f.resolveWith(e, [c])
				}, d), f.promise()
			},
			saveImageMetaData: function (a, b) {
				if (!(a.imageHead && a.canvas && a.canvas.toBlob) || b.disabled) return a;
				var c = a.files[a.index],
					d = new Blob([a.imageHead, this._blobSlice.call(c, 20)], {
						type: c.type
					});
				return d.name = c.name, a.files[a.index] = d, a
			},
			setImage: function (a, b) {
				return a.preview && !b.disabled && (a.files[a.index][b.name || "preview"] = a.preview), a
			},
			deleteImageReferences: function (a, b) {
				return b.disabled || (delete a.img, delete a.canvas, delete a.preview, delete a.imageHead), a
			}
		}
	})
}),
function (a) {
	"use strict";
	"function" == typeof define && define.amd ? define(["jquery", "blueimp-tmpl", "./jquery.fileupload-image", "./jquery.fileupload-audio", "./jquery.fileupload-video", "./jquery.fileupload-validate"], a) : "object" == typeof exports ? a(require("jquery"), require("blueimp-tmpl"), require("./jquery.fileupload-image"), require("./jquery.fileupload-video"), require("./jquery.fileupload-validate")) : a(window.jQuery, window.tmpl)
}(function (a, b) {
	"use strict";
	a.blueimp.fileupload.prototype._specialOptions.push("filesContainer", "uploadTemplateId", "downloadTemplateId"), a.widget("blueimp.fileupload", a.blueimp.fileupload, {
		options: {
			autoUpload: !1,
			uploadTemplateId: "template-upload",
			downloadTemplateId: "template-download",
			filesContainer: void 0,
			prependFiles: !1,
			dataType: "json",
			messages: {
				unknownError: "Unknown error"
			},
			getNumberOfFiles: function () {
				return this.filesContainer.children().not(".processing").length
			},
			getFilesFromResponse: function (b) {
				return b.result && a.isArray(b.result.files) ? b.result.files : []
			},
			add: function (b, c) {
				if (b.isDefaultPrevented()) return !1;
				var d = a(this),
					e = d.data("blueimp-fileupload") || d.data("fileupload"),
					f = e.options;
				c.context = e._renderUpload(c.files).data("data", c).addClass("processing"), f.filesContainer[f.prependFiles ? "prepend" : "append"](c.context), e._forceReflow(c.context), e._transition(c.context), c.process(function () {
					return d.fileupload("process", c)
				}).always(function () {
					c.context.each(function (b) {
						a(this).find(".size").text(e._formatFileSize(c.files[b].size))
					}).removeClass("processing"), e._renderPreviews(c)
				}).done(function () {
					c.context.find(".start").prop("disabled", !1), e._trigger("added", b, c) !== !1 && (f.autoUpload || c.autoUpload) && c.autoUpload !== !1 && c.submit()
				}).fail(function () {
					c.files.error && c.context.each(function (b) {
						var d = c.files[b].error;
						d && a(this).find(".error").text(d);
					})
				})
			},
			send: function (b, c) {
				if (b.isDefaultPrevented()) return !1;
				var d = a(this).data("blueimp-fileupload") || a(this).data("fileupload");
				return c.context && c.dataType && "iframe" === c.dataType.substr(0, 6) && c.context.find(".progress").addClass(!a.support.transition && "progress-animated").attr("aria-valuenow", 100).children().first().css("width", "100%"), d._trigger("sent", b, c)
			},
			done: function (b, c) {
				if (b.isDefaultPrevented()) return !1;
				var d, e, f = a(this).data("blueimp-fileupload") || a(this).data("fileupload"),
					g = c.getFilesFromResponse || f.options.getFilesFromResponse,
					h = g(c);
				c.context ? c.context.each(function (g) {
					var i = h[g] || {
						error: "Empty file upload result"
					};
					e = f._addFinishedDeferreds(), f._transition(a(this)).done(function () {
						var g = a(this);
						d = f._renderDownload([i]).replaceAll(g), f._forceReflow(d), f._transition(d).done(function () {
							c.context = a(this), f._trigger("completed", b, c), f._trigger("finished", b, c), e.resolve()
						})
					})
				}) : (d = f._renderDownload(h)[f.options.prependFiles ? "prependTo" : "appendTo"](f.options.filesContainer), f._forceReflow(d), e = f._addFinishedDeferreds(), f._transition(d).done(function () {
					c.context = a(this), f._trigger("completed", b, c), f._trigger("finished", b, c), e.resolve()
				}))
			},
			fail: function (b, c) {
				if (b.isDefaultPrevented()) return !1;
				var d, e, f = a(this).data("blueimp-fileupload") || a(this).data("fileupload");
				c.context ? c.context.each(function (g) {
					if ("abort" !== c.errorThrown) {
						var h = c.files[g];
						h.error = h.error || c.errorThrown || c.i18n("unknownError"), e = f._addFinishedDeferreds(), f._transition(a(this)).done(function () {
							var g = a(this);
							d = f._renderDownload([h]).replaceAll(g), f._forceReflow(d), f._transition(d).done(function () {
								c.context = a(this), f._trigger("failed", b, c), f._trigger("finished", b, c), e.resolve()
							})
						})
					} else e = f._addFinishedDeferreds(), f._transition(a(this)).done(function () {
						a(this).remove(), f._trigger("failed", b, c), f._trigger("finished", b, c), e.resolve()
					})
				}) : "abort" !== c.errorThrown ? (c.context = f._renderUpload(c.files)[f.options.prependFiles ? "prependTo" : "appendTo"](f.options.filesContainer).data("data", c), f._forceReflow(c.context), e = f._addFinishedDeferreds(), f._transition(c.context).done(function () {
					c.context = a(this), f._trigger("failed", b, c), f._trigger("finished", b, c), e.resolve()
				})) : (f._trigger("failed", b, c), f._trigger("finished", b, c), f._addFinishedDeferreds().resolve())
			},
			progress: function (b, c) {
				if (b.isDefaultPrevented()) return !1;
				var d = Math.floor(c.loaded / c.total * 100);
				c.context && c.context.each(function () {
					a(this).find(".progress").attr("aria-valuenow", d).children().first().css("width", d + "%")
				})
			},
			progressall: function (b, c) {
				if (b.isDefaultPrevented()) return !1;
				var d = a(this),
					e = Math.floor(c.loaded / c.total * 100),
					f = d.find(".fileupload-progress"),
					g = f.find(".progress-extended");
				g.length && g.html((d.data("blueimp-fileupload") || d.data("fileupload"))._renderExtendedProgress(c)), f.find(".progress").attr("aria-valuenow", e).children().first().css("width", e + "%")
			},
			start: function (b) {
				if (b.isDefaultPrevented()) return !1;
				var c = a(this).data("blueimp-fileupload") || a(this).data("fileupload");
				c._resetFinishedDeferreds(), c._transition(a(this).find(".fileupload-progress")).done(function () {
					c._trigger("started", b)
				})
			},
			stop: function (b) {
				if (b.isDefaultPrevented()) return !1;
				var c = a(this).data("blueimp-fileupload") || a(this).data("fileupload"),
					d = c._addFinishedDeferreds();
				a.when.apply(a, c._getFinishedDeferreds()).done(function () {
					c._trigger("stopped", b)
				}), c._transition(a(this).find(".fileupload-progress")).done(function () {
					a(this).find(".progress").attr("aria-valuenow", "0").children().first().css("width", "0%"), a(this).find(".progress-extended").html("&nbsp;"), d.resolve()
				})
			},
			processstart: function (b) {
				return !b.isDefaultPrevented() && void a(this).addClass("fileupload-processing")
			},
			processstop: function (b) {
				return !b.isDefaultPrevented() && void a(this).removeClass("fileupload-processing")
			},
			destroy: function (b, c) {
				if (b.isDefaultPrevented()) return !1;
				var d = a(this).data("blueimp-fileupload") || a(this).data("fileupload"),
					e = function () {
						d._transition(c.context).done(function () {
							a(this).remove(), d._trigger("destroyed", b, c)
						})
					};
				c.url ? (c.dataType = c.dataType || d.options.dataType, a.ajax(c).done(e).fail(function () {
					d._trigger("destroyfailed", b, c)
				})) : e()
			}
		},
		_resetFinishedDeferreds: function () {
			this._finishedUploads = []
		},
		_addFinishedDeferreds: function (b) {
			return b || (b = a.Deferred()), this._finishedUploads.push(b), b
		},
		_getFinishedDeferreds: function () {
			return this._finishedUploads
		},
		_enableDragToDesktop: function () {
			var b = a(this),
				c = b.prop("href"),
				d = b.prop("download"),
				e = "application/octet-stream";
			b.bind("dragstart", function (a) {
				try {
					a.originalEvent.dataTransfer.setData("DownloadURL", [e, d, c].join(":"))
				} catch (a) {}
			})
		},
		_formatFileSize: function (a) {
			return "number" != typeof a ? "" : a >= 1e9 ? (a / 1e9).toFixed(2) + " GB" : a >= 1e6 ? (a / 1e6).toFixed(2) + " MB" : (a / 1e3).toFixed(2) + " KB"
		},
		_formatBitrate: function (a) {
			return "number" != typeof a ? "" : a >= 1e9 ? (a / 1e9).toFixed(2) + " Gbit/s" : a >= 1e6 ? (a / 1e6).toFixed(2) + " Mbit/s" : a >= 1e3 ? (a / 1e3).toFixed(2) + " kbit/s" : a.toFixed(2) + " bit/s"
		},
		_formatTime: function (a) {
			var b = new Date(1e3 * a),
				c = Math.floor(a / 86400);
			return c = c ? c + "d " : "", c + ("0" + b.getUTCHours()).slice(-2) + ":" + ("0" + b.getUTCMinutes()).slice(-2) + ":" + ("0" + b.getUTCSeconds()).slice(-2)
		},
		_formatPercentage: function (a) {
			return (100 * a).toFixed(2) + " %"
		},
		_renderExtendedProgress: function (a) {
			return this._formatBitrate(a.bitrate) + " | " + this._formatTime(8 * (a.total - a.loaded) / a.bitrate) + " | " + this._formatPercentage(a.loaded / a.total) + " | " + this._formatFileSize(a.loaded) + " / " + this._formatFileSize(a.total)
		},
		_renderTemplate: function (b, c) {
			if (!b) return a();
			var d = b({
				files: c,
				formatFileSize: this._formatFileSize,
				options: this.options
			});
			return d instanceof a ? d : a(this.options.templatesContainer).html(d).children()
		},
		_renderPreviews: function (b) {
			b.context.find(".preview").each(function (c, d) {
				a(d).append(b.files[c].preview)
			})
		},
		_renderUpload: function (a) {
			return this._renderTemplate(this.options.uploadTemplate, a)
		},
		_renderDownload: function (a) {
			return this._renderTemplate(this.options.downloadTemplate, a).find("a[download]").each(this._enableDragToDesktop).end()
		},
		_startHandler: function (b) {
			b.preventDefault();
			var c = a(b.currentTarget),
				d = c.closest(".template-upload"),
				e = d.data("data");
			c.prop("disabled", !0), e && e.submit && e.submit()
		},
		_cancelHandler: function (b) {
			b.preventDefault();
			var c = a(b.currentTarget).closest(".template-upload,.template-download"),
				d = c.data("data") || {};
			d.context = d.context || c, d.abort ? d.abort() : (d.errorThrown = "abort", this._trigger("fail", b, d))
		},
		_deleteHandler: function (b) {
			b.preventDefault();
			var c = a(b.currentTarget);
			this._trigger("destroy", b, a.extend({
				context: c.closest(".template-download"),
				type: "DELETE"
			}, c.data()))
		},
		_forceReflow: function (b) {
			return a.support.transition && b.length && b[0].offsetWidth
		},
		_transition: function (b) {
			var c = a.Deferred();
			return a.support.transition && b.hasClass("fade") && b.is(":visible") ? b.bind(a.support.transition.end, function (d) {
				d.target === b[0] && (b.unbind(a.support.transition.end), c.resolveWith(b))
			}).toggleClass("in") : (b.toggleClass("in"), c.resolveWith(b)), c
		},
		_initButtonBarEventHandlers: function () {
			var b = this.element.find(".fileupload-buttonbar"),
				c = this.options.filesContainer;
			this._on(b.find(".start"), {
				click: function (a) {
					a.preventDefault(), c.find(".start").click()
				}
			}), this._on(b.find(".cancel"), {
				click: function (a) {
					a.preventDefault(), c.find(".cancel").click()
				}
			}), this._on(b.find(".delete"), {
				click: function (a) {
					a.preventDefault(), c.find(".toggle:checked").closest(".template-download").find(".delete").click(), b.find(".toggle").prop("checked", !1)
				}
			}), this._on(b.find(".toggle"), {
				change: function (b) {
					c.find(".toggle").prop("checked", a(b.currentTarget).is(":checked"))
				}
			})
		},
		_destroyButtonBarEventHandlers: function () {
			this._off(this.element.find(".fileupload-buttonbar").find(".start, .cancel, .delete"), "click"), this._off(this.element.find(".fileupload-buttonbar .toggle"), "change.")
		},
		_initEventHandlers: function () {
			this._super(), this._on(this.options.filesContainer, {
				"click .start": this._startHandler,
				"click .cancel": this._cancelHandler,
				"click .delete": this._deleteHandler
			}), this._initButtonBarEventHandlers()
		},
		_destroyEventHandlers: function () {
			this._destroyButtonBarEventHandlers(), this._off(this.options.filesContainer, "click"), this._super()
		},
		_enableFileInputButton: function () {
			this.element.find(".fileinput-button input").prop("disabled", !1).parent().removeClass("disabled")
		},
		_disableFileInputButton: function () {
			this.element.find(".fileinput-button input").prop("disabled", !0).parent().addClass("disabled")
		},
		_initTemplates: function () {
			var a = this.options;
			a.templatesContainer = this.document[0].createElement(a.filesContainer.prop("nodeName")), b && (a.uploadTemplateId && (a.uploadTemplate = b(a.uploadTemplateId)), a.downloadTemplateId && (a.downloadTemplate = b(a.downloadTemplateId)))
		},
		_initFilesContainer: function () {
			var b = this.options;
			void 0 === b.filesContainer ? b.filesContainer = this.element.find(".files") : b.filesContainer instanceof a || (b.filesContainer = a(b.filesContainer))
		},
		_initSpecialOptions: function () {
			this._super(), this._initFilesContainer(), this._initTemplates()
		},
		_create: function () {
			this._super(), this._resetFinishedDeferreds(), a.support.fileInput || this._disableFileInputButton()
		},
		enable: function () {
			var a = !1;
			this.options.disabled && (a = !0), this._super(), a && (this.element.find("input, button").prop("disabled", !1), this._enableFileInputButton())
		},
		disable: function () {
			this.options.disabled || (this.element.find("input, button").prop("disabled", !0), this._disableFileInputButton()), this._super()
		}
	})
}),
/*!
 * Datepicker for Bootstrap v1.6.4 (https://github.com/eternicode/bootstrap-datepicker)
 *
 * Copyright 2012 Stefan Petre
 * Improvements by Andrew Rowls
 * Licensed under the Apache License v2.0 (http://www.apache.org/licenses/LICENSE-2.0)
 */
function (a) {
	"function" == typeof define && define.amd ? define(["jquery"], a) : a("object" == typeof exports ? require("jquery") : jQuery)
}(function (a, b) {
	function c() {
		return new Date(Date.UTC.apply(Date, arguments))
	}

	function d() {
		var a = new Date;
		return c(a.getFullYear(), a.getMonth(), a.getDate())
	}

	function e(a, b) {
		return a.getUTCFullYear() === b.getUTCFullYear() && a.getUTCMonth() === b.getUTCMonth() && a.getUTCDate() === b.getUTCDate()
	}

	function f(a) {
		return function () {
			return this[a].apply(this, arguments)
		}
	}

	function g(a) {
		return a && !isNaN(a.getTime())
	}

	function h(b, c) {
		function d(a, b) {
			return b.toLowerCase()
		}
		var e, f = a(b).data(),
			g = {},
			h = new RegExp("^" + c.toLowerCase() + "([A-Z])");
		c = new RegExp("^" + c.toLowerCase());
		for (var i in f) c.test(i) && (e = i.replace(h, d), g[e] = f[i]);
		return g
	}

	function i(b) {
		var c = {};
		if (q[b] || (b = b.split("-")[0], q[b])) {
			var d = q[b];
			return a.each(p, function (a, b) {
				b in d && (c[b] = d[b])
			}), c
		}
	}
	var j = function () {
			var b = {
				get: function (a) {
					return this.slice(a)[0]
				},
				contains: function (a) {
					for (var b = a && a.valueOf(), c = 0, d = this.length; c < d; c++)
						if (this[c].valueOf() === b) return c;
					return -1
				},
				remove: function (a) {
					this.splice(a, 1)
				},
				replace: function (b) {
					b && (a.isArray(b) || (b = [b]), this.clear(), this.push.apply(this, b))
				},
				clear: function () {
					this.length = 0
				},
				copy: function () {
					var a = new j;
					return a.replace(this), a
				}
			};
			return function () {
				var c = [];
				return c.push.apply(c, arguments), a.extend(c, b), c
			}
		}(),
		k = function (b, c) {
			a(b).data("datepicker", this), this._process_options(c), this.dates = new j, this.viewDate = this.o.defaultViewDate, this.focusDate = null, this.element = a(b), this.isInput = this.element.is("input"), this.inputField = this.isInput ? this.element : this.element.find("input"), this.component = !!this.element.hasClass("date") && this.element.find(".add-on, .input-group-addon, .btn"), this.hasInput = this.component && this.inputField.length, this.component && 0 === this.component.length && (this.component = !1), this.isInline = !this.component && this.element.is("div"), this.picker = a(r.template), this._check_template(this.o.templates.leftArrow) && this.picker.find(".prev").html(this.o.templates.leftArrow), this._check_template(this.o.templates.rightArrow) && this.picker.find(".next").html(this.o.templates.rightArrow), this._buildEvents(), this._attachEvents(), this.isInline ? this.picker.addClass("datepicker-inline").appendTo(this.element) : this.picker.addClass("datepicker-dropdown dropdown-menu"), this.o.rtl && this.picker.addClass("datepicker-rtl"), this.viewMode = this.o.startView, this.o.calendarWeeks && this.picker.find("thead .datepicker-title, tfoot .today, tfoot .clear").attr("colspan", function (a, b) {
				return parseInt(b) + 1
			}), this._allow_update = !1, this.setStartDate(this._o.startDate), this.setEndDate(this._o.endDate), this.setDaysOfWeekDisabled(this.o.daysOfWeekDisabled), this.setDaysOfWeekHighlighted(this.o.daysOfWeekHighlighted), this.setDatesDisabled(this.o.datesDisabled), this.fillDow(), this.fillMonths(), this._allow_update = !0, this.update(), this.showMode(), this.isInline && this.show()
		};
	k.prototype = {
		constructor: k,
		_resolveViewName: function (a, c) {
			return 0 === a || "days" === a || "month" === a ? 0 : 1 === a || "months" === a || "year" === a ? 1 : 2 === a || "years" === a || "decade" === a ? 2 : 3 === a || "decades" === a || "century" === a ? 3 : 4 === a || "centuries" === a || "millennium" === a ? 4 : c !== b && c
		},
		_check_template: function (c) {
			try {
				if (c === b || "" === c) return !1;
				if ((c.match(/[<>]/g) || []).length <= 0) return !0;
				var d = a(c);
				return d.length > 0
			} catch (a) {
				return !1
			}
		},
		_process_options: function (b) {
			this._o = a.extend({}, this._o, b);
			var e = this.o = a.extend({}, this._o),
				f = e.language;
			q[f] || (f = f.split("-")[0], q[f] || (f = o.language)), e.language = f, e.startView = this._resolveViewName(e.startView, 0), e.minViewMode = this._resolveViewName(e.minViewMode, 0), e.maxViewMode = this._resolveViewName(e.maxViewMode, 4), e.startView = Math.min(e.startView, e.maxViewMode), e.startView = Math.max(e.startView, e.minViewMode), e.multidate !== !0 && (e.multidate = Number(e.multidate) || !1, e.multidate !== !1 && (e.multidate = Math.max(0, e.multidate))), e.multidateSeparator = String(e.multidateSeparator), e.weekStart %= 7, e.weekEnd = (e.weekStart + 6) % 7;
			var g = r.parseFormat(e.format);
			e.startDate !== -(1 / 0) && (e.startDate ? e.startDate instanceof Date ? e.startDate = this._local_to_utc(this._zero_time(e.startDate)) : e.startDate = r.parseDate(e.startDate, g, e.language, e.assumeNearbyYear) : e.startDate = -(1 / 0)), e.endDate !== 1 / 0 && (e.endDate ? e.endDate instanceof Date ? e.endDate = this._local_to_utc(this._zero_time(e.endDate)) : e.endDate = r.parseDate(e.endDate, g, e.language, e.assumeNearbyYear) : e.endDate = 1 / 0), e.daysOfWeekDisabled = e.daysOfWeekDisabled || [], a.isArray(e.daysOfWeekDisabled) || (e.daysOfWeekDisabled = e.daysOfWeekDisabled.split(/[,\s]*/)), e.daysOfWeekDisabled = a.map(e.daysOfWeekDisabled, function (a) {
				return parseInt(a, 10)
			}), e.daysOfWeekHighlighted = e.daysOfWeekHighlighted || [], a.isArray(e.daysOfWeekHighlighted) || (e.daysOfWeekHighlighted = e.daysOfWeekHighlighted.split(/[,\s]*/)), e.daysOfWeekHighlighted = a.map(e.daysOfWeekHighlighted, function (a) {
				return parseInt(a, 10)
			}), e.datesDisabled = e.datesDisabled || [], a.isArray(e.datesDisabled) || (e.datesDisabled = [e.datesDisabled]), e.datesDisabled = a.map(e.datesDisabled, function (a) {
				return r.parseDate(a, g, e.language, e.assumeNearbyYear)
			});
			var h = String(e.orientation).toLowerCase().split(/\s+/g),
				i = e.orientation.toLowerCase();
			if (h = a.grep(h, function (a) {
					return /^auto|left|right|top|bottom$/.test(a)
				}), e.orientation = {
					x: "auto",
					y: "auto"
				}, i && "auto" !== i)
				if (1 === h.length) switch (h[0]) {
					case "top":
					case "bottom":
						e.orientation.y = h[0];
						break;
					case "left":
					case "right":
						e.orientation.x = h[0]
				} else i = a.grep(h, function (a) {
					return /^left|right$/.test(a)
				}), e.orientation.x = i[0] || "auto", i = a.grep(h, function (a) {
					return /^top|bottom$/.test(a)
				}), e.orientation.y = i[0] || "auto";
				else;
			if (e.defaultViewDate) {
				var j = e.defaultViewDate.year || (new Date).getFullYear(),
					k = e.defaultViewDate.month || 0,
					l = e.defaultViewDate.day || 1;
				e.defaultViewDate = c(j, k, l)
			} else e.defaultViewDate = d()
		},
		_events: [],
		_secondaryEvents: [],
		_applyEvents: function (a) {
			for (var c, d, e, f = 0; f < a.length; f++) c = a[f][0], 2 === a[f].length ? (d = b, e = a[f][1]) : 3 === a[f].length && (d = a[f][1], e = a[f][2]), c.on(e, d)
		},
		_unapplyEvents: function (a) {
			for (var c, d, e, f = 0; f < a.length; f++) c = a[f][0], 2 === a[f].length ? (e = b, d = a[f][1]) : 3 === a[f].length && (e = a[f][1], d = a[f][2]), c.off(d, e)
		},
		_buildEvents: function () {
			var b = {
				keyup: a.proxy(function (b) {
					a.inArray(b.keyCode, [27, 37, 39, 38, 40, 32, 13, 9]) === -1 && this.update()
				}, this),
				keydown: a.proxy(this.keydown, this),
				paste: a.proxy(this.paste, this)
			};
			this.o.showOnFocus === !0 && (b.focus = a.proxy(this.show, this)), this.isInput ? this._events = [
				[this.element, b]
			] : this.component && this.hasInput ? this._events = [
				[this.inputField, b],
				[this.component, {
					click: a.proxy(this.show, this)
				}]
			] : this._events = [
				[this.element, {
					click: a.proxy(this.show, this),
					keydown: a.proxy(this.keydown, this)
				}]
			], this._events.push([this.element, "*", {
				blur: a.proxy(function (a) {
					this._focused_from = a.target
				}, this)
			}], [this.element, {
				blur: a.proxy(function (a) {
					this._focused_from = a.target
				}, this)
			}]), this.o.immediateUpdates && this._events.push([this.element, {
				"changeYear changeMonth": a.proxy(function (a) {
					this.update(a.date)
				}, this)
			}]), this._secondaryEvents = [
				[this.picker, {
					click: a.proxy(this.click, this)
				}],
				[a(window), {
					resize: a.proxy(this.place, this)
				}],
				[a(document), {
					mousedown: a.proxy(function (a) {
						this.element.is(a.target) || this.element.find(a.target).length || this.picker.is(a.target) || this.picker.find(a.target).length || this.isInline || this.hide()
					}, this)
				}]
			]
		},
		_attachEvents: function () {
			this._detachEvents(), this._applyEvents(this._events)
		},
		_detachEvents: function () {
			this._unapplyEvents(this._events)
		},
		_attachSecondaryEvents: function () {
			this._detachSecondaryEvents(), this._applyEvents(this._secondaryEvents)
		},
		_detachSecondaryEvents: function () {
			this._unapplyEvents(this._secondaryEvents)
		},
		_trigger: function (b, c) {
			var d = c || this.dates.get(-1),
				e = this._utc_to_local(d);
			this.element.trigger({
				type: b,
				date: e,
				dates: a.map(this.dates, this._utc_to_local),
				format: a.proxy(function (a, b) {
					0 === arguments.length ? (a = this.dates.length - 1, b = this.o.format) : "string" == typeof a && (b = a, a = this.dates.length - 1), b = b || this.o.format;
					var c = this.dates.get(a);
					return r.formatDate(c, b, this.o.language)
				}, this)
			})
		},
		show: function () {
			if (!(this.inputField.prop("disabled") || this.inputField.prop("readonly") && this.o.enableOnReadonly === !1)) return this.isInline || this.picker.appendTo(this.o.container), this.place(), this.picker.show(), this._attachSecondaryEvents(), this._trigger("show"), (window.navigator.msMaxTouchPoints || "ontouchstart" in document) && this.o.disableTouchKeyboard && a(this.element).blur(), this
		},
		hide: function () {
			return this.isInline || !this.picker.is(":visible") ? this : (this.focusDate = null, this.picker.hide().detach(), this._detachSecondaryEvents(), this.viewMode = this.o.startView, this.showMode(), this.o.forceParse && this.inputField.val() && this.setValue(), this._trigger("hide"), this)
		},
		destroy: function () {
			return this.hide(), this._detachEvents(), this._detachSecondaryEvents(), this.picker.remove(), delete this.element.data().datepicker, this.isInput || delete this.element.data().date, this
		},
		paste: function (b) {
			var c;
			if (b.originalEvent.clipboardData && b.originalEvent.clipboardData.types && a.inArray("text/plain", b.originalEvent.clipboardData.types) !== -1) c = b.originalEvent.clipboardData.getData("text/plain");
			else {
				if (!window.clipboardData) return;
				c = window.clipboardData.getData("Text")
			}
			this.setDate(c), this.update(), b.preventDefault()
		},
		_utc_to_local: function (a) {
			return a && new Date(a.getTime() + 6e4 * a.getTimezoneOffset())
		},
		_local_to_utc: function (a) {
			return a && new Date(a.getTime() - 6e4 * a.getTimezoneOffset())
		},
		_zero_time: function (a) {
			return a && new Date(a.getFullYear(), a.getMonth(), a.getDate())
		},
		_zero_utc_time: function (a) {
			return a && new Date(Date.UTC(a.getUTCFullYear(), a.getUTCMonth(), a.getUTCDate()))
		},
		getDates: function () {
			return a.map(this.dates, this._utc_to_local)
		},
		getUTCDates: function () {
			return a.map(this.dates, function (a) {
				return new Date(a)
			})
		},
		getDate: function () {
			return this._utc_to_local(this.getUTCDate())
		},
		getUTCDate: function () {
			var a = this.dates.get(-1);
			return "undefined" != typeof a ? new Date(a) : null
		},
		clearDates: function () {
			this.inputField && this.inputField.val(""), this.update(), this._trigger("changeDate"), this.o.autoclose && this.hide()
		},
		setDates: function () {
			var b = a.isArray(arguments[0]) ? arguments[0] : arguments;
			return this.update.apply(this, b), this._trigger("changeDate"), this.setValue(), this
		},
		setUTCDates: function () {
			var b = a.isArray(arguments[0]) ? arguments[0] : arguments;
			return this.update.apply(this, a.map(b, this._utc_to_local)), this._trigger("changeDate"), this.setValue(), this
		},
		setDate: f("setDates"),
		setUTCDate: f("setUTCDates"),
		remove: f("destroy"),
		setValue: function () {
			var a = this.getFormattedDate();
			return this.inputField.val(a), this
		},
		getFormattedDate: function (c) {
			c === b && (c = this.o.format);
			var d = this.o.language;
			return a.map(this.dates, function (a) {
				return r.formatDate(a, c, d)
			}).join(this.o.multidateSeparator)
		},
		getStartDate: function () {
			return this.o.startDate
		},
		setStartDate: function (a) {
			return this._process_options({
				startDate: a
			}), this.update(), this.updateNavArrows(), this
		},
		getEndDate: function () {
			return this.o.endDate
		},
		setEndDate: function (a) {
			return this._process_options({
				endDate: a
			}), this.update(), this.updateNavArrows(), this
		},
		setDaysOfWeekDisabled: function (a) {
			return this._process_options({
				daysOfWeekDisabled: a
			}), this.update(), this.updateNavArrows(), this
		},
		setDaysOfWeekHighlighted: function (a) {
			return this._process_options({
				daysOfWeekHighlighted: a
			}), this.update(), this
		},
		setDatesDisabled: function (a) {
			this._process_options({
				datesDisabled: a
			}), this.update(), this.updateNavArrows()
		},
		place: function () {
			if (this.isInline) return this;
			var b = this.picker.outerWidth(),
				c = this.picker.outerHeight(),
				d = 10,
				e = a(this.o.container),
				f = e.width(),
				g = "body" === this.o.container ? a(document).scrollTop() : e.scrollTop(),
				h = e.offset(),
				i = [];
			this.element.parents().each(function () {
				var b = a(this).css("z-index");
				"auto" !== b && 0 !== b && i.push(parseInt(b))
			});
			var j = Math.max.apply(Math, i) + this.o.zIndexOffset,
				k = this.component ? this.component.parent().offset() : this.element.offset(),
				l = this.component ? this.component.outerHeight(!0) : this.element.outerHeight(!1),
				m = this.component ? this.component.outerWidth(!0) : this.element.outerWidth(!1),
				n = k.left - h.left,
				o = k.top - h.top;
			"body" !== this.o.container && (o += g), this.picker.removeClass("datepicker-orient-top datepicker-orient-bottom datepicker-orient-right datepicker-orient-left"), "auto" !== this.o.orientation.x ? (this.picker.addClass("datepicker-orient-" + this.o.orientation.x), "right" === this.o.orientation.x && (n -= b - m)) : k.left < 0 ? (this.picker.addClass("datepicker-orient-left"), n -= k.left - d) : n + b > f ? (this.picker.addClass("datepicker-orient-right"), n += m - b) : this.picker.addClass("datepicker-orient-left");
			var p, q = this.o.orientation.y;
			if ("auto" === q && (p = -g + o - c, q = p < 0 ? "bottom" : "top"), this.picker.addClass("datepicker-orient-" + q), "top" === q ? o -= c + parseInt(this.picker.css("padding-top")) : o += l, this.o.rtl) {
				var r = f - (n + m);
				this.picker.css({
					top: o,
					right: r,
					zIndex: j
				})
			} else this.picker.css({
				top: o,
				left: n,
				zIndex: j
			});
			return this
		},
		_allow_update: !0,
		update: function () {
			if (!this._allow_update) return this;
			var b = this.dates.copy(),
				c = [],
				d = !1;
			return arguments.length ? (a.each(arguments, a.proxy(function (a, b) {
				b instanceof Date && (b = this._local_to_utc(b)), c.push(b)
			}, this)), d = !0) : (c = this.isInput ? this.element.val() : this.element.data("date") || this.inputField.val(), c = c && this.o.multidate ? c.split(this.o.multidateSeparator) : [c], delete this.element.data().date), c = a.map(c, a.proxy(function (a) {
				return r.parseDate(a, this.o.format, this.o.language, this.o.assumeNearbyYear)
			}, this)), c = a.grep(c, a.proxy(function (a) {
				return !this.dateWithinRange(a) || !a
			}, this), !0), this.dates.replace(c), this.dates.length ? this.viewDate = new Date(this.dates.get(-1)) : this.viewDate < this.o.startDate ? this.viewDate = new Date(this.o.startDate) : this.viewDate > this.o.endDate ? this.viewDate = new Date(this.o.endDate) : this.viewDate = this.o.defaultViewDate, d ? this.setValue() : c.length && String(b) !== String(this.dates) && this._trigger("changeDate"), !this.dates.length && b.length && this._trigger("clearDate"), this.fill(), this.element.change(), this
		},
		fillDow: function () {
			var b = this.o.weekStart,
				c = "<tr>";
			for (this.o.calendarWeeks && (this.picker.find(".datepicker-days .datepicker-switch").attr("colspan", function (a, b) {
					return parseInt(b) + 1
				}), c += '<th class="cw">&#160;</th>'); b < this.o.weekStart + 7;) c += '<th class="dow', a.inArray(b, this.o.daysOfWeekDisabled) > -1 && (c += " disabled"), c += '">' + q[this.o.language].daysMin[b++ % 7] + "</th>";
			c += "</tr>", this.picker.find(".datepicker-days thead").append(c)
		},
		fillMonths: function () {
			for (var a = this._utc_to_local(this.viewDate), b = "", c = 0; c < 12;) {
				var d = a && a.getMonth() === c ? " focused" : "";
				b += '<span class="month' + d + '">' + q[this.o.language].monthsShort[c++] + "</span>"
			}
			this.picker.find(".datepicker-months td").html(b)
		},
		setRange: function (b) {
			b && b.length ? this.range = a.map(b, function (a) {
				return a.valueOf()
			}) : delete this.range, this.fill()
		},
		getClassNames: function (b) {
			var c = [],
				d = this.viewDate.getUTCFullYear(),
				e = this.viewDate.getUTCMonth(),
				f = new Date;
			return b.getUTCFullYear() < d || b.getUTCFullYear() === d && b.getUTCMonth() < e ? c.push("old") : (b.getUTCFullYear() > d || b.getUTCFullYear() === d && b.getUTCMonth() > e) && c.push("new"), this.focusDate && b.valueOf() === this.focusDate.valueOf() && c.push("focused"), this.o.todayHighlight && b.getUTCFullYear() === f.getFullYear() && b.getUTCMonth() === f.getMonth() && b.getUTCDate() === f.getDate() && c.push("today"), this.dates.contains(b) !== -1 && c.push("active"), this.dateWithinRange(b) || c.push("disabled"), this.dateIsDisabled(b) && c.push("disabled", "disabled-date"), a.inArray(b.getUTCDay(), this.o.daysOfWeekHighlighted) !== -1 && c.push("highlighted"), this.range && (b > this.range[0] && b < this.range[this.range.length - 1] && c.push("range"), a.inArray(b.valueOf(), this.range) !== -1 && c.push("selected"), b.valueOf() === this.range[0] && c.push("range-start"), b.valueOf() === this.range[this.range.length - 1] && c.push("range-end")), c
		},
		_fill_yearsView: function (c, d, e, f, g, h, i, j) {
			var k, l, m, n, o, p, q, r, s, t, u;
			for (k = "", l = this.picker.find(c), m = parseInt(g / e, 10) * e, o = parseInt(h / f, 10) * f, p = parseInt(i / f, 10) * f, n = a.map(this.dates, function (a) {
					return parseInt(a.getUTCFullYear() / f, 10) * f
				}), l.find(".datepicker-switch").text(m + "-" + (m + 9 * f)), q = m - f, r = -1; r < 11; r += 1) s = [d], t = null, r === -1 ? s.push("old") : 10 === r && s.push("new"), a.inArray(q, n) !== -1 && s.push("active"), (q < o || q > p) && s.push("disabled"), q === this.viewDate.getFullYear() && s.push("focused"), j !== a.noop && (u = j(new Date(q, 0, 1)), u === b ? u = {} : "boolean" == typeof u ? u = {
				enabled: u
			} : "string" == typeof u && (u = {
				classes: u
			}), u.enabled === !1 && s.push("disabled"), u.classes && (s = s.concat(u.classes.split(/\s+/))), u.tooltip && (t = u.tooltip)), k += '<span class="' + s.join(" ") + '"' + (t ? ' title="' + t + '"' : "") + ">" + q + "</span>", q += f;
			l.find("td").html(k)
		},
		fill: function () {
			var d, e, f = new Date(this.viewDate),
				g = f.getUTCFullYear(),
				h = f.getUTCMonth(),
				i = this.o.startDate !== -(1 / 0) ? this.o.startDate.getUTCFullYear() : -(1 / 0),
				j = this.o.startDate !== -(1 / 0) ? this.o.startDate.getUTCMonth() : -(1 / 0),
				k = this.o.endDate !== 1 / 0 ? this.o.endDate.getUTCFullYear() : 1 / 0,
				l = this.o.endDate !== 1 / 0 ? this.o.endDate.getUTCMonth() : 1 / 0,
				m = q[this.o.language].today || q.en.today || "",
				n = q[this.o.language].clear || q.en.clear || "",
				o = q[this.o.language].titleFormat || q.en.titleFormat;
			if (!isNaN(g) && !isNaN(h)) {
				this.picker.find(".datepicker-days .datepicker-switch").text(r.formatDate(f, o, this.o.language)), this.picker.find("tfoot .today").text(m).toggle(this.o.todayBtn !== !1), this.picker.find("tfoot .clear").text(n).toggle(this.o.clearBtn !== !1), this.picker.find("thead .datepicker-title").text(this.o.title).toggle("" !== this.o.title), this.updateNavArrows(), this.fillMonths();
				var p = c(g, h - 1, 28),
					s = r.getDaysInMonth(p.getUTCFullYear(), p.getUTCMonth());
				p.setUTCDate(s), p.setUTCDate(s - (p.getUTCDay() - this.o.weekStart + 7) % 7);
				var t = new Date(p);
				p.getUTCFullYear() < 100 && t.setUTCFullYear(p.getUTCFullYear()), t.setUTCDate(t.getUTCDate() + 42), t = t.valueOf();
				for (var u, v = []; p.valueOf() < t;) {
					if (p.getUTCDay() === this.o.weekStart && (v.push("<tr>"), this.o.calendarWeeks)) {
						var w = new Date(+p + (this.o.weekStart - p.getUTCDay() - 7) % 7 * 864e5),
							x = new Date(Number(w) + (11 - w.getUTCDay()) % 7 * 864e5),
							y = new Date(Number(y = c(x.getUTCFullYear(), 0, 1)) + (11 - y.getUTCDay()) % 7 * 864e5),
							z = (x - y) / 864e5 / 7 + 1;
						v.push('<td class="cw">' + z + "</td>")
					}
					u = this.getClassNames(p), u.push("day"), this.o.beforeShowDay !== a.noop && (e = this.o.beforeShowDay(this._utc_to_local(p)), e === b ? e = {} : "boolean" == typeof e ? e = {
						enabled: e
					} : "string" == typeof e && (e = {
						classes: e
					}), e.enabled === !1 && u.push("disabled"), e.classes && (u = u.concat(e.classes.split(/\s+/))), e.tooltip && (d = e.tooltip)), u = a.isFunction(a.uniqueSort) ? a.uniqueSort(u) : a.unique(u), v.push('<td class="' + u.join(" ") + '"' + (d ? ' title="' + d + '"' : "") + ">" + p.getUTCDate() + "</td>"), d = null, p.getUTCDay() === this.o.weekEnd && v.push("</tr>"), p.setUTCDate(p.getUTCDate() + 1)
				}
				this.picker.find(".datepicker-days tbody").empty().append(v.join(""));
				var A = q[this.o.language].monthsTitle || q.en.monthsTitle || "Months",
					B = this.picker.find(".datepicker-months").find(".datepicker-switch").text(this.o.maxViewMode < 2 ? A : g).end().find("span").removeClass("active");
				if (a.each(this.dates, function (a, b) {
						b.getUTCFullYear() === g && B.eq(b.getUTCMonth()).addClass("active")
					}), (g < i || g > k) && B.addClass("disabled"), g === i && B.slice(0, j).addClass("disabled"), g === k && B.slice(l + 1).addClass("disabled"), this.o.beforeShowMonth !== a.noop) {
					var C = this;
					a.each(B, function (c, d) {
						var e = new Date(g, c, 1),
							f = C.o.beforeShowMonth(e);
						f === b ? f = {} : "boolean" == typeof f ? f = {
							enabled: f
						} : "string" == typeof f && (f = {
							classes: f
						}), f.enabled !== !1 || a(d).hasClass("disabled") || a(d).addClass("disabled"), f.classes && a(d).addClass(f.classes), f.tooltip && a(d).prop("title", f.tooltip)
					})
				}
				this._fill_yearsView(".datepicker-years", "year", 10, 1, g, i, k, this.o.beforeShowYear), this._fill_yearsView(".datepicker-decades", "decade", 100, 10, g, i, k, this.o.beforeShowDecade), this._fill_yearsView(".datepicker-centuries", "century", 1e3, 100, g, i, k, this.o.beforeShowCentury)
			}
		},
		updateNavArrows: function () {
			if (this._allow_update) {
				var a = new Date(this.viewDate),
					b = a.getUTCFullYear(),
					c = a.getUTCMonth();
				switch (this.viewMode) {
					case 0:
						this.o.startDate !== -(1 / 0) && b <= this.o.startDate.getUTCFullYear() && c <= this.o.startDate.getUTCMonth() ? this.picker.find(".prev").css({
							visibility: "hidden"
						}) : this.picker.find(".prev").css({
							visibility: "visible"
						}), this.o.endDate !== 1 / 0 && b >= this.o.endDate.getUTCFullYear() && c >= this.o.endDate.getUTCMonth() ? this.picker.find(".next").css({
							visibility: "hidden"
						}) : this.picker.find(".next").css({
							visibility: "visible"
						});
						break;
					case 1:
					case 2:
					case 3:
					case 4:
						this.o.startDate !== -(1 / 0) && b <= this.o.startDate.getUTCFullYear() || this.o.maxViewMode < 2 ? this.picker.find(".prev").css({
							visibility: "hidden"
						}) : this.picker.find(".prev").css({
							visibility: "visible"
						}), this.o.endDate !== 1 / 0 && b >= this.o.endDate.getUTCFullYear() || this.o.maxViewMode < 2 ? this.picker.find(".next").css({
							visibility: "hidden"
						}) : this.picker.find(".next").css({
							visibility: "visible"
						})
				}
			}
		},
		click: function (b) {
			b.preventDefault(), b.stopPropagation();
			var e, f, g, h, i, j, k;
			e = a(b.target), e.hasClass("datepicker-switch") && this.showMode(1);
			var l = e.closest(".prev, .next");
			l.length > 0 && (f = r.modes[this.viewMode].navStep * (l.hasClass("prev") ? -1 : 1), 0 === this.viewMode ? (this.viewDate = this.moveMonth(this.viewDate, f), this._trigger("changeMonth", this.viewDate)) : (this.viewDate = this.moveYear(this.viewDate, f), 1 === this.viewMode && this._trigger("changeYear", this.viewDate)), this.fill()), e.hasClass("today") && !e.hasClass("day") && (this.showMode(-2), this._setDate(d(), "linked" === this.o.todayBtn ? null : "view")), e.hasClass("clear") && this.clearDates(), e.hasClass("disabled") || (e.hasClass("day") && (g = parseInt(e.text(), 10) || 1, h = this.viewDate.getUTCFullYear(), i = this.viewDate.getUTCMonth(), e.hasClass("old") && (0 === i ? (i = 11, h -= 1, j = !0, k = !0) : (i -= 1, j = !0)), e.hasClass("new") && (11 === i ? (i = 0, h += 1, j = !0, k = !0) : (i += 1, j = !0)), this._setDate(c(h, i, g)), k && this._trigger("changeYear", this.viewDate), j && this._trigger("changeMonth", this.viewDate)), e.hasClass("month") && (this.viewDate.setUTCDate(1), g = 1, i = e.parent().find("span").index(e), h = this.viewDate.getUTCFullYear(), this.viewDate.setUTCMonth(i), this._trigger("changeMonth", this.viewDate), 1 === this.o.minViewMode ? (this._setDate(c(h, i, g)), this.showMode()) : this.showMode(-1), this.fill()), (e.hasClass("year") || e.hasClass("decade") || e.hasClass("century")) && (this.viewDate.setUTCDate(1), g = 1, i = 0, h = parseInt(e.text(), 10) || 0, this.viewDate.setUTCFullYear(h), e.hasClass("year") && (this._trigger("changeYear", this.viewDate), 2 === this.o.minViewMode && this._setDate(c(h, i, g))), e.hasClass("decade") && (this._trigger("changeDecade", this.viewDate), 3 === this.o.minViewMode && this._setDate(c(h, i, g))), e.hasClass("century") && (this._trigger("changeCentury", this.viewDate), 4 === this.o.minViewMode && this._setDate(c(h, i, g))), this.showMode(-1), this.fill())), this.picker.is(":visible") && this._focused_from && a(this._focused_from).focus(), delete this._focused_from
		},
		_toggle_multidate: function (a) {
			var b = this.dates.contains(a);
			if (a || this.dates.clear(), b !== -1 ? (this.o.multidate === !0 || this.o.multidate > 1 || this.o.toggleActive) && this.dates.remove(b) : this.o.multidate === !1 ? (this.dates.clear(), this.dates.push(a)) : this.dates.push(a), "number" == typeof this.o.multidate)
				for (; this.dates.length > this.o.multidate;) this.dates.remove(0)
		},
		_setDate: function (a, b) {
			b && "date" !== b || this._toggle_multidate(a && new Date(a)), b && "view" !== b || (this.viewDate = a && new Date(a)), this.fill(), this.setValue(), b && "view" === b || this._trigger("changeDate"), this.inputField && this.inputField.change(), !this.o.autoclose || b && "date" !== b || this.hide()
		},
		moveDay: function (a, b) {
			var c = new Date(a);
			return c.setUTCDate(a.getUTCDate() + b), c
		},
		moveWeek: function (a, b) {
			return this.moveDay(a, 7 * b)
		},
		moveMonth: function (a, b) {
			if (!g(a)) return this.o.defaultViewDate;
			if (!b) return a;
			var c, d, e = new Date(a.valueOf()),
				f = e.getUTCDate(),
				h = e.getUTCMonth(),
				i = Math.abs(b);
			if (b = b > 0 ? 1 : -1, 1 === i) d = b === -1 ? function () {
				return e.getUTCMonth() === h
			} : function () {
				return e.getUTCMonth() !== c
			}, c = h + b, e.setUTCMonth(c), (c < 0 || c > 11) && (c = (c + 12) % 12);
			else {
				for (var j = 0; j < i; j++) e = this.moveMonth(e, b);
				c = e.getUTCMonth(), e.setUTCDate(f), d = function () {
					return c !== e.getUTCMonth()
				}
			}
			for (; d();) e.setUTCDate(--f), e.setUTCMonth(c);
			return e
		},
		moveYear: function (a, b) {
			return this.moveMonth(a, 12 * b)
		},
		moveAvailableDate: function (a, b, c) {
			do {
				if (a = this[c](a, b), !this.dateWithinRange(a)) return !1;
				c = "moveDay"
			} while (this.dateIsDisabled(a));
			return a
		},
		weekOfDateIsDisabled: function (b) {
			return a.inArray(b.getUTCDay(), this.o.daysOfWeekDisabled) !== -1
		},
		dateIsDisabled: function (b) {
			return this.weekOfDateIsDisabled(b) || a.grep(this.o.datesDisabled, function (a) {
				return e(b, a)
			}).length > 0
		},
		dateWithinRange: function (a) {
			return a >= this.o.startDate && a <= this.o.endDate
		},
		keydown: function (a) {
			if (!this.picker.is(":visible")) return void(40 !== a.keyCode && 27 !== a.keyCode || (this.show(), a.stopPropagation()));
			var b, c, d = !1,
				e = this.focusDate || this.viewDate;
			switch (a.keyCode) {
				case 27:
					this.focusDate ? (this.focusDate = null, this.viewDate = this.dates.get(-1) || this.viewDate, this.fill()) : this.hide(), a.preventDefault(), a.stopPropagation();
					break;
				case 37:
				case 38:
				case 39:
				case 40:
					if (!this.o.keyboardNavigation || 7 === this.o.daysOfWeekDisabled.length) break;
					b = 37 === a.keyCode || 38 === a.keyCode ? -1 : 1, 0 === this.viewMode ? a.ctrlKey ? (c = this.moveAvailableDate(e, b, "moveYear"), c && this._trigger("changeYear", this.viewDate)) : a.shiftKey ? (c = this.moveAvailableDate(e, b, "moveMonth"), c && this._trigger("changeMonth", this.viewDate)) : 37 === a.keyCode || 39 === a.keyCode ? c = this.moveAvailableDate(e, b, "moveDay") : this.weekOfDateIsDisabled(e) || (c = this.moveAvailableDate(e, b, "moveWeek")) : 1 === this.viewMode ? (38 !== a.keyCode && 40 !== a.keyCode || (b *= 4), c = this.moveAvailableDate(e, b, "moveMonth")) : 2 === this.viewMode && (38 !== a.keyCode && 40 !== a.keyCode || (b *= 4), c = this.moveAvailableDate(e, b, "moveYear")), c && (this.focusDate = this.viewDate = c, this.setValue(), this.fill(), a.preventDefault());
					break;
				case 13:
					if (!this.o.forceParse) break;
					e = this.focusDate || this.dates.get(-1) || this.viewDate, this.o.keyboardNavigation && (this._toggle_multidate(e), d = !0), this.focusDate = null, this.viewDate = this.dates.get(-1) || this.viewDate, this.setValue(), this.fill(), this.picker.is(":visible") && (a.preventDefault(), a.stopPropagation(), this.o.autoclose && this.hide());
					break;
				case 9:
					this.focusDate = null, this.viewDate = this.dates.get(-1) || this.viewDate, this.fill(), this.hide()
			}
			d && (this.dates.length ? this._trigger("changeDate") : this._trigger("clearDate"), this.inputField && this.inputField.change())
		},
		showMode: function (a) {
			a && (this.viewMode = Math.max(this.o.minViewMode, Math.min(this.o.maxViewMode, this.viewMode + a))), this.picker.children("div").hide().filter(".datepicker-" + r.modes[this.viewMode].clsName).show(), this.updateNavArrows()
		}
	};
	var l = function (b, c) {
		a(b).data("datepicker", this), this.element = a(b), this.inputs = a.map(c.inputs, function (a) {
			return a.jquery ? a[0] : a
		}), delete c.inputs, n.call(a(this.inputs), c).on("changeDate", a.proxy(this.dateUpdated, this)), this.pickers = a.map(this.inputs, function (b) {
			return a(b).data("datepicker")
		}), this.updateDates()
	};
	l.prototype = {
		updateDates: function () {
			this.dates = a.map(this.pickers, function (a) {
				return a.getUTCDate()
			}), this.updateRanges()
		},
		updateRanges: function () {
			var b = a.map(this.dates, function (a) {
				return a.valueOf()
			});
			a.each(this.pickers, function (a, c) {
				c.setRange(b)
			})
		},
		dateUpdated: function (b) {
			if (!this.updating) {
				this.updating = !0;
				var c = a(b.target).data("datepicker");
				if ("undefined" != typeof c) {
					var d = c.getUTCDate(),
						e = a.inArray(b.target, this.inputs),
						f = e - 1,
						g = e + 1,
						h = this.inputs.length;
					if (e !== -1) {
						if (a.each(this.pickers, function (a, b) {
								b.getUTCDate() || b.setUTCDate(d)
							}), d < this.dates[f])
							for (; f >= 0 && d < this.dates[f];) this.pickers[f--].setUTCDate(d);
						else if (d > this.dates[g])
							for (; g < h && d > this.dates[g];) this.pickers[g++].setUTCDate(d);
						this.updateDates(), delete this.updating
					}
				}
			}
		},
		remove: function () {
			a.map(this.pickers, function (a) {
				a.remove()
			}), delete this.element.data().datepicker
		}
	};
	var m = a.fn.datepicker,
		n = function (c) {
			var d = Array.apply(null, arguments);
			d.shift();
			var e;
			if (this.each(function () {
					var b = a(this),
						f = b.data("datepicker"),
						g = "object" == typeof c && c;
					if (!f) {
						var j = h(this, "date"),
							m = a.extend({}, o, j, g),
							n = i(m.language),
							p = a.extend({}, o, n, j, g);
						b.hasClass("input-daterange") || p.inputs ? (a.extend(p, {
							inputs: p.inputs || b.find("input").toArray()
						}), f = new l(this, p)) : f = new k(this, p), b.data("datepicker", f)
					}
					"string" == typeof c && "function" == typeof f[c] && (e = f[c].apply(f, d))
				}), e === b || e instanceof k || e instanceof l) return this;
			if (this.length > 1) throw new Error("Using only allowed for the collection of a single element (" + c + " function)");
			return e
		};
	a.fn.datepicker = n;
	var o = a.fn.datepicker.defaults = {
			assumeNearbyYear: !1,
			autoclose: 1,
			beforeShowDay: a.noop,
			beforeShowMonth: a.noop,
			beforeShowYear: a.noop,
			beforeShowDecade: a.noop,
			beforeShowCentury: a.noop,
			calendarWeeks: !1,
			clearBtn: !1,
			toggleActive: !1,
			daysOfWeekDisabled: [],
			daysOfWeekHighlighted: [],
			datesDisabled: [],
			endDate: 1 / 0,
			forceParse: !0,
			format: "mm/dd/yyyy",
			keyboardNavigation: !0,
			language: "en",
			minViewMode: 0,
			maxViewMode: 4,
			multidate: !1,
			multidateSeparator: ",",
			orientation: "auto",
			rtl: !1,
			startDate: -(1 / 0),
			startView: 0,
			todayBtn: !1,
			todayHighlight: !1,
			weekStart: 0,
			disableTouchKeyboard: !1,
			enableOnReadonly: !0,
			showOnFocus: !0,
			zIndexOffset: 10,
			container: "body",
			immediateUpdates: !1,
			title: "",
			templates: {
				leftArrow: "&laquo;",
				rightArrow: "&raquo;"
			}
		},
		p = a.fn.datepicker.locale_opts = ["format", "rtl", "weekStart"];
	a.fn.datepicker.Constructor = k;
	var q = a.fn.datepicker.dates = {
	        en: {
	            days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
	            daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
	            daysMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
	            months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
	            monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
	            today: "Today",
	            clear: "Clear",
	            titleFormat: "MM yyyy"
	        },
	        "zh-CHT": {
	            days: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六", "星期日"],
	            daysShort: ["周日", "周一", "周二", "周三", "周四", "周五", "周六", "周日"],
	            daysMin: ["日", "一", "二", "三", "四", "五", "六", "日"],
	            months: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
	            monthsShort: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
	            today: "今天",
	            clear: "清除",
	            titleFormat: "yyyy年mm月",
	            //suffix: [],
	            //meridiem: ["上午", "下午"]
	        },
	        "zh-CHT": {
	            days: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
	            daysShort: ["週日", "週一", "週二", "週三", "週四", "週五", "週六"], 
	            daysMin: ["日", "一", "二", "三", "四", "五", "六"],
	            months: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
	            monthsShort: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"], 
	            today: "今天",
	            clear: "清除",
	            titleFormat: "yyyy年mm月",
	            //format: "yyyy年mm月dd日",
	            //weekStart: 1,
	        }
	    },
		r = {
			modes: [{
				clsName: "days",
				navFnc: "Month",
				navStep: 1
			}, {
				clsName: "months",
				navFnc: "FullYear",
				navStep: 1
			}, {
				clsName: "years",
				navFnc: "FullYear",
				navStep: 10
			}, {
				clsName: "decades",
				navFnc: "FullDecade",
				navStep: 100
			}, {
				clsName: "centuries",
				navFnc: "FullCentury",
				navStep: 1e3
			}],
			isLeapYear: function (a) {
				return a % 4 === 0 && a % 100 !== 0 || a % 400 === 0
			},
			getDaysInMonth: function (a, b) {
				return [31, r.isLeapYear(a) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][b]
			},
			validParts: /dd?|DD?|mm?|MM?|yy(?:yy)?/g,
			nonpunctuation: /[^ -\/:-@\u5e74\u6708\u65e5\[-`{-~\t\n\r]+/g,
			parseFormat: function (a) {
				if ("function" == typeof a.toValue && "function" == typeof a.toDisplay) return a;
				var b = a.replace(this.validParts, "\0").split("\0"),
					c = a.match(this.validParts);
				if (!b || !b.length || !c || 0 === c.length) throw new Error("Invalid date format.");
				return {
					separators: b,
					parts: c
				}
			},
			parseDate: function (e, f, g, h) {
				function i(a, b) {
					return b === !0 && (b = 10), a < 100 && (a += 2e3, a > (new Date).getFullYear() + b && (a -= 100)), a
				}

				function j() {
					var a = this.slice(0, s[n].length),
						b = s[n].slice(0, a.length);
					return a.toLowerCase() === b.toLowerCase()
				}
				if (!e) return b;
				if (e instanceof Date) return e;
				if ("string" == typeof f && (f = r.parseFormat(f)), f.toValue) return f.toValue(e, f, g);
				var l, m, n, o, p = /([\-+]\d+)([dmwy])/,
					s = e.match(/([\-+]\d+)([dmwy])/g),
					t = {
						d: "moveDay",
						m: "moveMonth",
						w: "moveWeek",
						y: "moveYear"
					},
					u = {
						yesterday: "-1d",
						today: "+0d",
						tomorrow: "+1d"
					};
				if (/^[\-+]\d+[dmwy]([\s,]+[\-+]\d+[dmwy])*$/.test(e)) {
					for (e = new Date, n = 0; n < s.length; n++) l = p.exec(s[n]), m = parseInt(l[1]), o = t[l[2]], e = k.prototype[o](e, m);
					return c(e.getUTCFullYear(), e.getUTCMonth(), e.getUTCDate())
				}
				if ("undefined" != typeof u[e] && (e = u[e], s = e.match(/([\-+]\d+)([dmwy])/g), /^[\-+]\d+[dmwy]([\s,]+[\-+]\d+[dmwy])*$/.test(e))) {
					for (e = new Date, n = 0; n < s.length; n++) l = p.exec(s[n]), m = parseInt(l[1]), o = t[l[2]], e = k.prototype[o](e, m);
					return c(e.getUTCFullYear(), e.getUTCMonth(), e.getUTCDate())
				}
				s = e && e.match(this.nonpunctuation) || [], e = new Date;
				var v, w, x = {},
					y = ["yyyy", "yy", "M", "MM", "m", "mm", "d", "dd"],
					z = {
						yyyy: function (a, b) {
							return a.setUTCFullYear(h ? i(b, h) : b)
						},
						yy: function (a, b) {
							return a.setUTCFullYear(h ? i(b, h) : b)
						},
						m: function (a, b) {
							if (isNaN(a)) return a;
							for (b -= 1; b < 0;) b += 12;
							for (b %= 12, a.setUTCMonth(b); a.getUTCMonth() !== b;) a.setUTCDate(a.getUTCDate() - 1);
							return a
						},
						d: function (a, b) {
							return a.setUTCDate(b)
						}
					};
				z.M = z.MM = z.mm = z.m, z.dd = z.d, e = d();
				var A = f.parts.slice();
				if (s.length !== A.length && (A = a(A).filter(function (b, c) {
						return a.inArray(c, y) !== -1
					}).toArray()), s.length === A.length) {
					var B;
					for (n = 0, B = A.length; n < B; n++) {
						if (v = parseInt(s[n], 10), l = A[n], isNaN(v)) switch (l) {
							case "MM":
								w = a(q[g].months).filter(j), v = a.inArray(w[0], q[g].months) + 1;
								break;
							case "M":
								w = a(q[g].monthsShort).filter(j), v = a.inArray(w[0], q[g].monthsShort) + 1
						}
						x[l] = v
					}
					var C, D;
					for (n = 0; n < y.length; n++) D = y[n], D in x && !isNaN(x[D]) && (C = new Date(e), z[D](C, x[D]), isNaN(C) || (e = C))
				}
				return e
			},
			formatDate: function (b, c, d) {
				if (!b) return "";
				if ("string" == typeof c && (c = r.parseFormat(c)),
					c.toDisplay) return c.toDisplay(b, c, d);
				var e = {
					d: b.getUTCDate(),
					D: q[d].daysShort[b.getUTCDay()],
					DD: q[d].days[b.getUTCDay()],
					m: b.getUTCMonth() + 1,
					M: q[d].monthsShort[b.getUTCMonth()],
					MM: q[d].months[b.getUTCMonth()],
					yy: b.getUTCFullYear().toString().substring(2),
					yyyy: b.getUTCFullYear()
				};
				e.dd = (e.d < 10 ? "0" : "") + e.d, e.mm = (e.m < 10 ? "0" : "") + e.m, b = [];
				for (var f = a.extend([], c.separators), g = 0, h = c.parts.length; g <= h; g++) f.length && b.push(f.shift()), b.push(e[c.parts[g]]);
				return b.join("")
			},
			headTemplate: '<thead><tr><th colspan="7" class="datepicker-title"></th></tr><tr><th class="prev">&laquo;</th><th colspan="5" class="datepicker-switch"></th><th class="next">&raquo;</th></tr></thead>',
			contTemplate: '<tbody><tr><td colspan="7"></td></tr></tbody>',
			footTemplate: '<tfoot><tr><th colspan="7" class="today"></th></tr><tr><th colspan="7" class="clear"></th></tr></tfoot>'
		};
	r.template = '<div class="datepicker"><div class="datepicker-days"><table class="table-condensed">' + r.headTemplate + "<tbody></tbody>" + r.footTemplate + '</table></div><div class="datepicker-months"><table class="table-condensed">' + r.headTemplate + r.contTemplate + r.footTemplate + '</table></div><div class="datepicker-years"><table class="table-condensed">' + r.headTemplate + r.contTemplate + r.footTemplate + '</table></div><div class="datepicker-decades"><table class="table-condensed">' + r.headTemplate + r.contTemplate + r.footTemplate + '</table></div><div class="datepicker-centuries"><table class="table-condensed">' + r.headTemplate + r.contTemplate + r.footTemplate + "</table></div></div>", a.fn.datepicker.DPGlobal = r, a.fn.datepicker.noConflict = function () {
		return a.fn.datepicker = m, this
	}, a.fn.datepicker.version = "1.6.4", a(document).on("focus.datepicker.data-api click.datepicker.data-api", '[data-provide="datepicker"]', function (b) {
		var c = a(this);
		c.data("datepicker") || (b.preventDefault(), n.call(c, "show"))
	}), a(function () {
		n.call(a('[data-provide="datepicker-inline"]'))
	})
}),
/*!
 * Bootstrap-select v1.12.1 (http://silviomoreto.github.io/bootstrap-select)
 *
 * Copyright 2013-2016 bootstrap-select
 * Licensed under MIT (https://github.com/silviomoreto/bootstrap-select/blob/master/LICENSE)
 */
function (a, b) {
	"function" == typeof define && define.amd ? define(["jquery"], function (a) {
		return b(a)
	}) : "object" == typeof module && module.exports ? module.exports = b(require("jquery")) : b(a.jQuery)
}(this, function (a) {
	! function (a) {
		"use strict";

		function b(b) {
			var c = [{
				re: /[\xC0-\xC6]/g,
				ch: "A"
			}, {
				re: /[\xE0-\xE6]/g,
				ch: "a"
			}, {
				re: /[\xC8-\xCB]/g,
				ch: "E"
			}, {
				re: /[\xE8-\xEB]/g,
				ch: "e"
			}, {
				re: /[\xCC-\xCF]/g,
				ch: "I"
			}, {
				re: /[\xEC-\xEF]/g,
				ch: "i"
			}, {
				re: /[\xD2-\xD6]/g,
				ch: "O"
			}, {
				re: /[\xF2-\xF6]/g,
				ch: "o"
			}, {
				re: /[\xD9-\xDC]/g,
				ch: "U"
			}, {
				re: /[\xF9-\xFC]/g,
				ch: "u"
			}, {
				re: /[\xC7-\xE7]/g,
				ch: "c"
			}, {
				re: /[\xD1]/g,
				ch: "N"
			}, {
				re: /[\xF1]/g,
				ch: "n"
			}];
			return a.each(c, function () {
				b = b ? b.replace(this.re, this.ch) : ""
			}), b
		}

		function c(b) {
			var c = arguments,
				d = b;
			[].shift.apply(c);
			var e, f = this.each(function () {
				var b = a(this);
				if (b.is("select")) {
					var f = b.data("selectpicker"),
						g = "object" == typeof d && d;
					if (f) {
						if (g)
							for (var h in g) g.hasOwnProperty(h) && (f.options[h] = g[h])
					} else {
						var i = a.extend({}, k.DEFAULTS, a.fn.selectpicker.defaults || {}, b.data(), g);
						i.template = a.extend({}, k.DEFAULTS.template, a.fn.selectpicker.defaults ? a.fn.selectpicker.defaults.template : {}, b.data().template, g.template), b.data("selectpicker", f = new k(this, i))
					}
					"string" == typeof d && (e = f[d] instanceof Function ? f[d].apply(f, c) : f.options[d])
				}
			});
			return "undefined" != typeof e ? e : f
		}
		String.prototype.includes || ! function () {
			var a = {}.toString,
				b = function () {
					try {
						var a = {},
							b = Object.defineProperty,
							c = b(a, a, a) && b
					} catch (a) {}
					return c
				}(),
				c = "".indexOf,
				d = function (b) {
					if (null == this) throw new TypeError;
					var d = String(this);
					if (b && "[object RegExp]" == a.call(b)) throw new TypeError;
					var e = d.length,
						f = String(b),
						g = f.length,
						h = arguments.length > 1 ? arguments[1] : void 0,
						i = h ? Number(h) : 0;
					i != i && (i = 0);
					var j = Math.min(Math.max(i, 0), e);
					return !(g + j > e) && c.call(d, f, i) != -1
				};
			b ? b(String.prototype, "includes", {
				value: d,
				configurable: !0,
				writable: !0
			}) : String.prototype.includes = d
		}(), String.prototype.startsWith || ! function () {
			var a = function () {
					try {
						var a = {},
							b = Object.defineProperty,
							c = b(a, a, a) && b
					} catch (a) {}
					return c
				}(),
				b = {}.toString,
				c = function (a) {
					if (null == this) throw new TypeError;
					var c = String(this);
					if (a && "[object RegExp]" == b.call(a)) throw new TypeError;
					var d = c.length,
						e = String(a),
						f = e.length,
						g = arguments.length > 1 ? arguments[1] : void 0,
						h = g ? Number(g) : 0;
					h != h && (h = 0);
					var i = Math.min(Math.max(h, 0), d);
					if (f + i > d) return !1;
					for (var j = -1; ++j < f;)
						if (c.charCodeAt(i + j) != e.charCodeAt(j)) return !1;
					return !0
				};
			a ? a(String.prototype, "startsWith", {
				value: c,
				configurable: !0,
				writable: !0
			}) : String.prototype.startsWith = c
		}(), Object.keys || (Object.keys = function (a, b, c) {
			c = [];
			for (b in a) c.hasOwnProperty.call(a, b) && c.push(b);
			return c
		});
		var d = {
			useDefault: !1,
			_set: a.valHooks.select.set
		};
		a.valHooks.select.set = function (b, c) {
			return c && !d.useDefault && a(b).data("selected", !0), d._set.apply(this, arguments)
		};
		var e = null;
		a.fn.triggerNative = function (a) {
			var b, c = this[0];
			c.dispatchEvent ? ("function" == typeof Event ? b = new Event(a, {
				bubbles: !0
			}) : (b = document.createEvent("Event"), b.initEvent(a, !0, !1)), c.dispatchEvent(b)) : c.fireEvent ? (b = document.createEventObject(), b.eventType = a, c.fireEvent("on" + a, b)) : this.trigger(a)
		}, a.expr.pseudos.icontains = function (b, c, d) {
			var e = a(b),
				f = (e.data("tokens") || e.text()).toString().toUpperCase();
			return f.includes(d[3].toUpperCase())
		}, a.expr.pseudos.ibegins = function (b, c, d) {
			var e = a(b),
				f = (e.data("tokens") || e.text()).toString().toUpperCase();
			return f.startsWith(d[3].toUpperCase())
		}, a.expr.pseudos.aicontains = function (b, c, d) {
			var e = a(b),
				f = (e.data("tokens") || e.data("normalizedText") || e.text()).toString().toUpperCase();
			return f.includes(d[3].toUpperCase())
		}, a.expr.pseudos.aibegins = function (b, c, d) {
			var e = a(b),
				f = (e.data("tokens") || e.data("normalizedText") || e.text()).toString().toUpperCase();
			return f.startsWith(d[3].toUpperCase())
		};
		var f = {
				"&": "&amp;",
				"<": "&lt;",
				">": "&gt;",
				'"': "&quot;",
				"'": "&#x27;",
				"`": "&#x60;"
			},
			g = {
				"&amp;": "&",
				"&lt;": "<",
				"&gt;": ">",
				"&quot;": '"',
				"&#x27;": "'",
				"&#x60;": "`"
			},
			h = function (a) {
				var b = function (b) {
						return a[b]
					},
					c = "(?:" + Object.keys(a).join("|") + ")",
					d = RegExp(c),
					e = RegExp(c, "g");
				return function (a) {
					return a = null == a ? "" : "" + a, d.test(a) ? a.replace(e, b) : a
				}
			},
			i = h(f),
			j = h(g),
			k = function (b, c) {
				d.useDefault || (a.valHooks.select.set = d._set, d.useDefault = !0), this.$element = a(b), this.$newElement = null, this.$button = null, this.$menu = null, this.$lis = null, this.options = c, null === this.options.title && (this.options.title = this.$element.attr("title"));
				var e = this.options.windowPadding;
				"number" == typeof e && (this.options.windowPadding = [e, e, e, e]), this.val = k.prototype.val, this.render = k.prototype.render, this.refresh = k.prototype.refresh, this.setStyle = k.prototype.setStyle, this.selectAll = k.prototype.selectAll, this.deselectAll = k.prototype.deselectAll, this.destroy = k.prototype.destroy, this.remove = k.prototype.remove, this.show = k.prototype.show, this.hide = k.prototype.hide, this.init()
			};
		k.VERSION = "1.12.1", k.DEFAULTS = {
			noneSelectedText: "Nothing selected",
			noneResultsText: "No results matched {0}",
			countSelectedText: function (a, b) {
				return 1 == a ? "{0} item selected" : "{0} items selected"
			},
			maxOptionsText: function (a, b) {
				return [1 == a ? "Limit reached ({n} item max)" : "Limit reached ({n} items max)", 1 == b ? "Group limit reached ({n} item max)" : "Group limit reached ({n} items max)"]
			},
			selectAllText: "Select All",
			deselectAllText: "Deselect All",
			doneButton: !1,
			doneButtonText: "Close",
			multipleSeparator: ", ",
			styleBase: "btn",
			style: "btn-default",
			size: "auto",
			title: null,
			selectedTextFormat: "values",
			width: !1,
			container: !1,
			hideDisabled: !1,
			showSubtext: !1,
			showIcon: !0,
			showContent: !0,
			dropupAuto: !0,
			header: !1,
			liveSearch: !1,
			liveSearchPlaceholder: null,
			liveSearchNormalize: !1,
			liveSearchStyle: "contains",
			actionsBox: !1,
			iconBase: "glyphicon",
			tickIcon: "glyphicon-ok",
			showTick: !1,
			template: {
				caret: '<span class="caret"></span>'
			},
			maxOptions: !1,
			mobile: !1,
			selectOnTab: !1,
			dropdownAlignRight: !1,
			windowPadding: 0
		}, k.prototype = {
			constructor: k,
			init: function () {
				var b = this,
					c = this.$element.attr("id");
				this.$element.addClass("bs-select-hidden"), this.liObj = {}, this.multiple = this.$element.prop("multiple"), this.autofocus = this.$element.prop("autofocus"), this.$newElement = this.createView(), this.$element.after(this.$newElement).appendTo(this.$newElement), this.$button = this.$newElement.children("button"), this.$menu = this.$newElement.children(".dropdown-menu"), this.$menuInner = this.$menu.children(".inner"), this.$searchbox = this.$menu.find("input"), this.$element.removeClass("bs-select-hidden"), this.options.dropdownAlignRight === !0 && this.$menu.addClass("dropdown-menu-right"), "undefined" != typeof c && (this.$button.attr("data-id", c), a('label[for="' + c + '"]').click(function (a) {
					a.preventDefault(), b.$button.focus()
				})), this.checkDisabled(), this.clickListener(), this.options.liveSearch && this.liveSearchListener(), this.render(), this.setStyle(), this.setWidth(), this.options.container && this.selectPosition(), this.$menu.data("this", this), this.$newElement.data("this", this), this.options.mobile && this.mobile(), this.$newElement.on({
					"hide.bs.dropdown": function (a) {
						b.$menuInner.attr("aria-expanded", !1), b.$element.trigger("hide.bs.select", a)
					},
					"hidden.bs.dropdown": function (a) {
						b.$element.trigger("hidden.bs.select", a)
					},
					"show.bs.dropdown": function (a) {
						b.$menuInner.attr("aria-expanded", !0), b.$element.trigger("show.bs.select", a)
					},
					"shown.bs.dropdown": function (a) {
						b.$element.trigger("shown.bs.select", a)
					}
				}), b.$element[0].hasAttribute("required") && this.$element.on("invalid", function () {
					b.$button.addClass("bs-invalid").focus(), b.$element.on({
						"focus.bs.select": function () {
							b.$button.focus(), b.$element.off("focus.bs.select")
						},
						"shown.bs.select": function () {
							b.$element.val(b.$element.val()).off("shown.bs.select")
						},
						"rendered.bs.select": function () {
							this.validity.valid && b.$button.removeClass("bs-invalid"), b.$element.off("rendered.bs.select")
						}
					})
				}), setTimeout(function () {
					b.$element.trigger("loaded.bs.select")
				})
			},
			createDropdown: function () {
				var b = this.multiple || this.options.showTick ? " show-tick" : "",
					c = this.$element.parent().hasClass("input-group") ? " input-group-btn" : "",
					d = this.autofocus ? " autofocus" : "",
					e = this.options.header ? '<div class="popover-title"><button type="button" class="close" aria-hidden="true">&times;</button>' + this.options.header + "</div>" : "",
					f = this.options.liveSearch ? '<div class="bs-searchbox"><input type="text" class="form-control" autocomplete="off"' + (null === this.options.liveSearchPlaceholder ? "" : ' placeholder="' + i(this.options.liveSearchPlaceholder) + '"') + ' role="textbox" aria-label="Search"></div>' : "",
					g = this.multiple && this.options.actionsBox ? '<div class="bs-actionsbox"><div class="btn-group btn-group-sm btn-block"><button type="button" class="actions-btn bs-select-all btn btn-default">' + this.options.selectAllText + '</button><button type="button" class="actions-btn bs-deselect-all btn btn-default">' + this.options.deselectAllText + "</button></div></div>" : "",
					h = this.multiple && this.options.doneButton ? '<div class="bs-donebutton"><div class="btn-group btn-block"><button type="button" class="btn btn-sm btn-default">' + this.options.doneButtonText + "</button></div></div>" : "",
					j = '<div class="btn-group bootstrap-select' + b + c + '"><button type="button" class="' + this.options.styleBase + ' dropdown-toggle" data-toggle="dropdown"' + d + ' role="button"><span class="filter-option pull-left"></span>&nbsp;<span class="bs-caret">' + this.options.template.caret + '</span></button><div class="dropdown-menu open" role="combobox">' + e + f + g + '<ul class="dropdown-menu inner" role="listbox" aria-expanded="false"></ul>' + h + "</div></div>";
				return a(j)
			},
			createView: function () {
				var a = this.createDropdown(),
					b = this.createLi();
				return a.find("ul")[0].innerHTML = b, a
			},
			reloadLi: function () {
				var a = this.createLi();
				this.$menuInner[0].innerHTML = a
			},
			createLi: function () {
				var c = this,
					d = [],
					e = 0,
					f = document.createElement("option"),
					g = -1,
					h = function (a, b, c, d) {
						return "<li" + ("undefined" != typeof c & "" !== c ? ' class="' + c + '"' : "") + ("undefined" != typeof b & null !== b ? ' data-original-index="' + b + '"' : "") + ("undefined" != typeof d & null !== d ? 'data-optgroup="' + d + '"' : "") + ">" + a + "</li>"
					},
					j = function (d, e, f, g) {
						return '<a tabindex="0"' + ("undefined" != typeof e ? ' class="' + e + '"' : "") + (f ? ' style="' + f + '"' : "") + (c.options.liveSearchNormalize ? ' data-normalized-text="' + b(i(a(d).html())) + '"' : "") + ("undefined" != typeof g || null !== g ? ' data-tokens="' + g + '"' : "") + ' role="option">' + d + '<span class="' + c.options.iconBase + " " + c.options.tickIcon + ' check-mark"></span></a>'
					};
				if (this.options.title && !this.multiple && (g--, !this.$element.find(".bs-title-option").length)) {
					var k = this.$element[0];
					f.className = "bs-title-option", f.innerHTML = this.options.title, f.value = "", k.insertBefore(f, k.firstChild);
					var l = a(k.options[k.selectedIndex]);
					void 0 === l.attr("selected") && void 0 === this.$element.data("selected") && (f.selected = !0)
				}
				return this.$element.find("option").each(function (b) {
					var f = a(this);
					if (g++, !f.hasClass("bs-title-option")) {
						var k = this.className || "",
							l = this.style.cssText,
							m = f.data("content") ? f.data("content") : f.html(),
							n = f.data("tokens") ? f.data("tokens") : null,
							o = "undefined" != typeof f.data("subtext") ? '<small class="text-muted">' + f.data("subtext") + "</small>" : "",
							p = "undefined" != typeof f.data("icon") ? '<span class="' + c.options.iconBase + " " + f.data("icon") + '"></span> ' : "",
							q = f.parent(),
							r = "OPTGROUP" === q[0].tagName,
							s = r && q[0].disabled,
							t = this.disabled || s;
						if ("" !== p && t && (p = "<span>" + p + "</span>"), c.options.hideDisabled && (t && !r || s)) return void g--;
						if (f.data("content") || (m = p + '<span class="text">' + m + o + "</span>"), r && f.data("divider") !== !0) {
							if (c.options.hideDisabled && t) {
								if (void 0 === q.data("allOptionsDisabled")) {
									var u = q.children();
									q.data("allOptionsDisabled", u.filter(":disabled").length === u.length)
								}
								if (q.data("allOptionsDisabled")) return void g--
							}
							var v = " " + q[0].className || "";
							if (0 === f.index()) {
								e += 1;
								var w = q[0].label,
									x = "undefined" != typeof q.data("subtext") ? '<small class="text-muted">' + q.data("subtext") + "</small>" : "",
									y = q.data("icon") ? '<span class="' + c.options.iconBase + " " + q.data("icon") + '"></span> ' : "";
								w = y + '<span class="text">' + i(w) + x + "</span>", 0 !== b && d.length > 0 && (g++, d.push(h("", null, "divider", e + "div"))), g++, d.push(h(w, null, "dropdown-header" + v, e))
							}
							if (c.options.hideDisabled && t) return void g--;
							d.push(h(j(m, "opt " + k + v, l, n), b, "", e))
						} else if (f.data("divider") === !0) d.push(h("", b, "divider"));
						else if (f.data("hidden") === !0) d.push(h(j(m, k, l, n), b, "hidden is-hidden"));
						else {
							var z = this.previousElementSibling && "OPTGROUP" === this.previousElementSibling.tagName;
							if (!z && c.options.hideDisabled)
								for (var A = a(this).prevAll(), B = 0; B < A.length; B++)
									if ("OPTGROUP" === A[B].tagName) {
										for (var C = 0, D = 0; D < B; D++) {
											var E = A[D];
											(E.disabled || a(E).data("hidden") === !0) && C++
										}
										C === B && (z = !0);
										break
									}
							z && (g++, d.push(h("", null, "divider", e + "div"))), d.push(h(j(m, k, l, n), b))
						}
						c.liObj[b] = g
					}
				}), this.multiple || 0 !== this.$element.find("option:selected").length || this.options.title || this.$element.find("option").eq(0).prop("selected", !0).attr("selected", "selected"), d.join("")
			},
			findLis: function () {
				return null == this.$lis && (this.$lis = this.$menu.find("li")), this.$lis
			},
			render: function (b) {
				var c, d = this;
				b !== !1 && this.$element.find("option").each(function (a) {
					var b = d.findLis().eq(d.liObj[a]);
					d.setDisabled(a, this.disabled || "OPTGROUP" === this.parentNode.tagName && this.parentNode.disabled, b), d.setSelected(a, this.selected, b)
				}), this.togglePlaceholder(), this.tabIndex();
				var e = this.$element.find("option").map(function () {
						if (this.selected) {
							if (d.options.hideDisabled && (this.disabled || "OPTGROUP" === this.parentNode.tagName && this.parentNode.disabled)) return;
							var b, c = a(this),
								e = c.data("icon") && d.options.showIcon ? '<i class="' + d.options.iconBase + " " + c.data("icon") + '"></i> ' : "";
							return b = d.options.showSubtext && c.data("subtext") && !d.multiple ? ' <small class="text-muted">' + c.data("subtext") + "</small>" : "", "undefined" != typeof c.attr("title") ? c.attr("title") : c.data("content") && d.options.showContent ? c.data("content").toString() : e + c.html() + b
						}
					}).toArray(),
					f = this.multiple ? e.join(this.options.multipleSeparator) : e[0];
				if (this.multiple && this.options.selectedTextFormat.indexOf("count") > -1) {
					var g = this.options.selectedTextFormat.split(">");
					if (g.length > 1 && e.length > g[1] || 1 == g.length && e.length >= 2) {
						c = this.options.hideDisabled ? ", [disabled]" : "";
						var h = this.$element.find("option").not('[data-divider="true"], [data-hidden="true"]' + c).length,
							i = "function" == typeof this.options.countSelectedText ? this.options.countSelectedText(e.length, h) : this.options.countSelectedText;
						f = i.replace("{0}", e.length.toString()).replace("{1}", h.toString())
					}
				}
				void 0 == this.options.title && (this.options.title = this.$element.attr("title")), "static" == this.options.selectedTextFormat && (f = this.options.title), f || (f = "undefined" != typeof this.options.title ? this.options.title : this.options.noneSelectedText), this.$button.attr("title", j(a.trim(f.replace(/<[^>]*>?/g, "")))), this.$button.children(".filter-option").html(f), this.$element.trigger("rendered.bs.select")
			},
			setStyle: function (a, b) {
				this.$element.attr("class") && this.$newElement.addClass(this.$element.attr("class").replace(/selectpicker|mobile-device|bs-select-hidden|validate\[.*\]/gi, ""));
				var c = a ? a : this.options.style;
				"add" == b ? this.$button.addClass(c) : "remove" == b ? this.$button.removeClass(c) : (this.$button.removeClass(this.options.style), this.$button.addClass(c))
			},
			liHeight: function (b) {
				if (b || this.options.size !== !1 && !this.sizeInfo) {
					var c = document.createElement("div"),
						d = document.createElement("div"),
						e = document.createElement("ul"),
						f = document.createElement("li"),
						g = document.createElement("li"),
						h = document.createElement("a"),
						i = document.createElement("span"),
						j = this.options.header && this.$menu.find(".popover-title").length > 0 ? this.$menu.find(".popover-title")[0].cloneNode(!0) : null,
						k = this.options.liveSearch ? document.createElement("div") : null,
						l = this.options.actionsBox && this.multiple && this.$menu.find(".bs-actionsbox").length > 0 ? this.$menu.find(".bs-actionsbox")[0].cloneNode(!0) : null,
						m = this.options.doneButton && this.multiple && this.$menu.find(".bs-donebutton").length > 0 ? this.$menu.find(".bs-donebutton")[0].cloneNode(!0) : null;
					if (i.className = "text", c.className = this.$menu[0].parentNode.className + " open", d.className = "dropdown-menu open", e.className = "dropdown-menu inner", f.className = "divider", i.appendChild(document.createTextNode("Inner text")), h.appendChild(i), g.appendChild(h), e.appendChild(g), e.appendChild(f), j && d.appendChild(j), k) {
						var n = document.createElement("span");
						k.className = "bs-searchbox", n.className = "form-control", k.appendChild(n), d.appendChild(k)
					}
					l && d.appendChild(l), d.appendChild(e), m && d.appendChild(m), c.appendChild(d), document.body.appendChild(c);
					var o = h.offsetHeight,
						p = j ? j.offsetHeight : 0,
						q = k ? k.offsetHeight : 0,
						r = l ? l.offsetHeight : 0,
						s = m ? m.offsetHeight : 0,
						t = a(f).outerHeight(!0),
						u = "function" == typeof getComputedStyle && getComputedStyle(d),
						v = u ? null : a(d),
						w = {
							vert: parseInt(u ? u.paddingTop : v.css("paddingTop")) + parseInt(u ? u.paddingBottom : v.css("paddingBottom")) + parseInt(u ? u.borderTopWidth : v.css("borderTopWidth")) + parseInt(u ? u.borderBottomWidth : v.css("borderBottomWidth")),
							horiz: parseInt(u ? u.paddingLeft : v.css("paddingLeft")) + parseInt(u ? u.paddingRight : v.css("paddingRight")) + parseInt(u ? u.borderLeftWidth : v.css("borderLeftWidth")) + parseInt(u ? u.borderRightWidth : v.css("borderRightWidth"))
						},
						x = {
							vert: w.vert + parseInt(u ? u.marginTop : v.css("marginTop")) + parseInt(u ? u.marginBottom : v.css("marginBottom")) + 2,
							horiz: w.horiz + parseInt(u ? u.marginLeft : v.css("marginLeft")) + parseInt(u ? u.marginRight : v.css("marginRight")) + 2
						};
					document.body.removeChild(c), this.sizeInfo = {
						liHeight: o,
						headerHeight: p,
						searchHeight: q,
						actionsHeight: r,
						doneButtonHeight: s,
						dividerHeight: t,
						menuPadding: w,
						menuExtras: x
					}
				}
			},
			setSize: function () {
				if (this.findLis(), this.liHeight(), this.options.header && this.$menu.css("padding-top", 0), this.options.size !== !1) {
					var b, c, d, e, f, g, h, i, j = this,
						k = this.$menu,
						l = this.$menuInner,
						m = a(window),
						n = this.$newElement[0].offsetHeight,
						o = this.$newElement[0].offsetWidth,
						p = this.sizeInfo.liHeight,
						q = this.sizeInfo.headerHeight,
						r = this.sizeInfo.searchHeight,
						s = this.sizeInfo.actionsHeight,
						t = this.sizeInfo.doneButtonHeight,
						u = this.sizeInfo.dividerHeight,
						v = this.sizeInfo.menuPadding,
						w = this.sizeInfo.menuExtras,
						x = this.options.hideDisabled ? ".disabled" : "",
						y = function () {
							var b, c = j.$newElement.offset(),
								d = a(j.options.container);
							j.options.container && !d.is("body") ? (b = d.offset(), b.top += parseInt(d.css("borderTopWidth")), b.left += parseInt(d.css("borderLeftWidth"))) : b = {
								top: 0,
								left: 0
							};
							var e = j.options.windowPadding;
							f = c.top - b.top - m.scrollTop(), g = m.height() - f - n - b.top - e[2], h = c.left - b.left - m.scrollLeft(), i = m.width() - h - o - b.left - e[1], f -= e[0], h -= e[3]
						};
					if (y(), "auto" === this.options.size) {
						var z = function () {
							var m, n = function (b, c) {
									return function (d) {
										return c ? d.classList ? d.classList.contains(b) : a(d).hasClass(b) : !(d.classList ? d.classList.contains(b) : a(d).hasClass(b))
									}
								},
								u = j.$menuInner[0].getElementsByTagName("li"),
								x = Array.prototype.filter ? Array.prototype.filter.call(u, n("hidden", !1)) : j.$lis.not(".hidden"),
								z = Array.prototype.filter ? Array.prototype.filter.call(x, n("dropdown-header", !0)) : x.filter(".dropdown-header");
							y(), b = g - w.vert, c = i - w.horiz, j.options.container ? (k.data("height") || k.data("height", k.height()), d = k.data("height"), k.data("width") || k.data("width", k.width()), e = k.data("width")) : (d = k.height(), e = k.width()), j.options.dropupAuto && j.$newElement.toggleClass("dropup", f > g && b - w.vert < d), j.$newElement.hasClass("dropup") && (b = f - w.vert), "auto" === j.options.dropdownAlignRight && k.toggleClass("dropdown-menu-right", h > i && c - w.horiz < e - o), m = x.length + z.length > 3 ? 3 * p + w.vert - 2 : 0, k.css({
								"max-height": b + "px",
								overflow: "hidden",
								"min-height": m + q + r + s + t + "px"
							}), l.css({
								"max-height": b - q - r - s - t - v.vert + "px",
								"overflow-y": "auto",
								"min-height": Math.max(m - v.vert, 0) + "px"
							})
						};
						z(), this.$searchbox.off("input.getSize propertychange.getSize").on("input.getSize propertychange.getSize", z), m.off("resize.getSize scroll.getSize").on("resize.getSize scroll.getSize", z)
					} else if (this.options.size && "auto" != this.options.size && this.$lis.not(x).length > this.options.size) {
						var A = this.$lis.not(".divider").not(x).children().slice(0, this.options.size).last().parent().index(),
							B = this.$lis.slice(0, A + 1).filter(".divider").length;
						b = p * this.options.size + B * u + v.vert, j.options.container ? (k.data("height") || k.data("height", k.height()), d = k.data("height")) : d = k.height(), j.options.dropupAuto && this.$newElement.toggleClass("dropup", f > g && b - w.vert < d), k.css({
							"max-height": b + q + r + s + t + "px",
							overflow: "hidden",
							"min-height": ""
						}), l.css({
							"max-height": b - v.vert + "px",
							"overflow-y": "auto",
							"min-height": ""
						})
					}
				}
			},
			setWidth: function () {
				if ("auto" === this.options.width) {
					this.$menu.css("min-width", "0");
					var a = this.$menu.parent().clone().appendTo("body"),
						b = this.options.container ? this.$newElement.clone().appendTo("body") : a,
						c = a.children(".dropdown-menu").outerWidth(),
						d = b.css("width", "auto").children("button").outerWidth();
					a.remove(), b.remove(), this.$newElement.css("width", Math.max(c, d) + "px")
				} else "fit" === this.options.width ? (this.$menu.css("min-width", ""), this.$newElement.css("width", "").addClass("fit-width")) : this.options.width ? (this.$menu.css("min-width", ""), this.$newElement.css("width", this.options.width)) : (this.$menu.css("min-width", ""), this.$newElement.css("width", ""));
				this.$newElement.hasClass("fit-width") && "fit" !== this.options.width && this.$newElement.removeClass("fit-width")
			},
			selectPosition: function () {
				this.$bsContainer = a('<div class="bs-container" />');
				var b, c, d, e = this,
					f = a(this.options.container),
					g = function (a) {
						e.$bsContainer.addClass(a.attr("class").replace(/form-control|fit-width/gi, "")).toggleClass("dropup", a.hasClass("dropup")), b = a.offset(), f.is("body") ? c = {
							top: 0,
							left: 0
						} : (c = f.offset(), c.top += parseInt(f.css("borderTopWidth")) - f.scrollTop(), c.left += parseInt(f.css("borderLeftWidth")) - f.scrollLeft()), d = a.hasClass("dropup") ? 0 : a[0].offsetHeight, e.$bsContainer.css({
							top: b.top - c.top + d,
							left: b.left - c.left,
							width: a[0].offsetWidth
						})
					};
				this.$button.on("click", function () {
					var b = a(this);
					e.isDisabled() || (g(e.$newElement), e.$bsContainer.appendTo(e.options.container).toggleClass("open", !b.hasClass("open")).append(e.$menu))
				}), a(window).on("resize scroll", function () {
					g(e.$newElement)
				}), this.$element.on("hide.bs.select", function () {
					e.$menu.data("height", e.$menu.height()), e.$bsContainer.detach()
				})
			},
			setSelected: function (a, b, c) {
				c || (this.togglePlaceholder(), c = this.findLis().eq(this.liObj[a])), c.toggleClass("selected", b).find("a").attr("aria-selected", b)
			},
			setDisabled: function (a, b, c) {
				c || (c = this.findLis().eq(this.liObj[a])), b ? c.addClass("disabled").children("a").attr("href", "#").attr("tabindex", -1).attr("aria-disabled", !0) : c.removeClass("disabled").children("a").removeAttr("href").attr("tabindex", 0).attr("aria-disabled", !1)
			},
			isDisabled: function () {
				return this.$element[0].disabled
			},
			checkDisabled: function () {
				var a = this;
				this.isDisabled() ? (this.$newElement.addClass("disabled"), this.$button.addClass("disabled").attr("tabindex", -1).attr("aria-disabled", !0)) : (this.$button.hasClass("disabled") && (this.$newElement.removeClass("disabled"), this.$button.removeClass("disabled").attr("aria-disabled", !1)), this.$button.attr("tabindex") != -1 || this.$element.data("tabindex") || this.$button.removeAttr("tabindex")), this.$button.click(function () {
					return !a.isDisabled()
				})
			},
			togglePlaceholder: function () {
				var a = this.$element.val();
				this.$button.toggleClass("bs-placeholder", null === a || "" === a || a.constructor === Array && 0 === a.length)
			},
			tabIndex: function () {
				this.$element.data("tabindex") !== this.$element.attr("tabindex") && this.$element.attr("tabindex") !== -98 && "-98" !== this.$element.attr("tabindex") && (this.$element.data("tabindex", this.$element.attr("tabindex")), this.$button.attr("tabindex", this.$element.data("tabindex"))), this.$element.attr("tabindex", -98)
			},
			clickListener: function () {
				var b = this,
					c = a(document);
				c.data("spaceSelect", !1), this.$button.on("keyup", function (a) {
					/(32)/.test(a.keyCode.toString(10)) && c.data("spaceSelect") && (a.preventDefault(), c.data("spaceSelect", !1))
				}), this.$button.on("click", function () {
					b.setSize()
				}), this.$element.on("shown.bs.select", function () {
					if (b.options.liveSearch || b.multiple) {
						if (!b.multiple) {
							var a = b.liObj[b.$element[0].selectedIndex];
							if ("number" != typeof a || b.options.size === !1) return;
							var c = b.$lis.eq(a)[0].offsetTop - b.$menuInner[0].offsetTop;
							c = c - b.$menuInner[0].offsetHeight / 2 + b.sizeInfo.liHeight / 2, b.$menuInner[0].scrollTop = c
						}
					} else b.$menuInner.find(".selected a").focus()
				}), this.$menuInner.on("click", "li a", function (c) {
					var d = a(this),
						f = d.parent().data("originalIndex"),
						g = b.$element.val(),
						h = b.$element.prop("selectedIndex"),
						i = !0;
					if (b.multiple && 1 !== b.options.maxOptions && c.stopPropagation(), c.preventDefault(), !b.isDisabled() && !d.parent().hasClass("disabled")) {
						var j = b.$element.find("option"),
							k = j.eq(f),
							l = k.prop("selected"),
							m = k.parent("optgroup"),
							n = b.options.maxOptions,
							o = m.data("maxOptions") || !1;
						if (b.multiple) {
							if (k.prop("selected", !l), b.setSelected(f, !l), d.blur(), n !== !1 || o !== !1) {
								var p = n < j.filter(":selected").length,
									q = o < m.find("option:selected").length;
								if (n && p || o && q)
									if (n && 1 == n) j.prop("selected", !1), k.prop("selected", !0), b.$menuInner.find(".selected").removeClass("selected"), b.setSelected(f, !0);
									else if (o && 1 == o) {
									m.find("option:selected").prop("selected", !1), k.prop("selected", !0);
									var r = d.parent().data("optgroup");
									b.$menuInner.find('[data-optgroup="' + r + '"]').removeClass("selected"), b.setSelected(f, !0)
								} else {
									var s = "string" == typeof b.options.maxOptionsText ? [b.options.maxOptionsText, b.options.maxOptionsText] : b.options.maxOptionsText,
										t = "function" == typeof s ? s(n, o) : s,
										u = t[0].replace("{n}", n),
										v = t[1].replace("{n}", o),
										w = a('<div class="notify"></div>');
									t[2] && (u = u.replace("{var}", t[2][n > 1 ? 0 : 1]), v = v.replace("{var}", t[2][o > 1 ? 0 : 1])), k.prop("selected", !1), b.$menu.append(w), n && p && (w.append(a("<div>" + u + "</div>")), i = !1, b.$element.trigger("maxReached.bs.select")), o && q && (w.append(a("<div>" + v + "</div>")), i = !1, b.$element.trigger("maxReachedGrp.bs.select")), setTimeout(function () {
										b.setSelected(f, !1)
									}, 10), w.delay(750).fadeOut(300, function () {
										a(this).remove()
									})
								}
							}
						} else j.prop("selected", !1), k.prop("selected", !0), b.$menuInner.find(".selected").removeClass("selected").find("a").attr("aria-selected", !1), b.setSelected(f, !0);
						!b.multiple || b.multiple && 1 === b.options.maxOptions ? b.$button.focus() : b.options.liveSearch && b.$searchbox.focus(), i && (g != b.$element.val() && b.multiple || h != b.$element.prop("selectedIndex") && !b.multiple) && (e = [f, k.prop("selected"), l], b.$element.triggerNative("change"))
					}
				}), this.$menu.on("click", "li.disabled a, .popover-title, .popover-title :not(.close)", function (c) {
					c.currentTarget == this && (c.preventDefault(), c.stopPropagation(), b.options.liveSearch && !a(c.target).hasClass("close") ? b.$searchbox.focus() : b.$button.focus())
				}), this.$menuInner.on("click", ".divider, .dropdown-header", function (a) {
					a.preventDefault(), a.stopPropagation(), b.options.liveSearch ? b.$searchbox.focus() : b.$button.focus()
				}), this.$menu.on("click", ".popover-title .close", function () {
					b.$button.click()
				}), this.$searchbox.on("click", function (a) {
					a.stopPropagation()
				}), this.$menu.on("click", ".actions-btn", function (c) {
					b.options.liveSearch ? b.$searchbox.focus() : b.$button.focus(), c.preventDefault(), c.stopPropagation(), a(this).hasClass("bs-select-all") ? b.selectAll() : b.deselectAll()
				}), this.$element.change(function () {
					b.render(!1), b.$element.trigger("changed.bs.select", e), e = null
				})
			},
			liveSearchListener: function () {
				var c = this,
					d = a('<li class="no-results"></li>');
				this.$button.on("click.dropdown.data-api", function () {
					c.$menuInner.find(".active").removeClass("active"), c.$searchbox.val() && (c.$searchbox.val(""), c.$lis.not(".is-hidden").removeClass("hidden"), d.parent().length && d.remove()), c.multiple || c.$menuInner.find(".selected").addClass("active"), setTimeout(function () {
						c.$searchbox.focus()
					}, 10)
				}), this.$searchbox.on("click.dropdown.data-api focus.dropdown.data-api touchend.dropdown.data-api", function (a) {
					a.stopPropagation()
				}), this.$searchbox.on("input propertychange", function () {
					if (c.$lis.not(".is-hidden").removeClass("hidden"), c.$lis.filter(".active").removeClass("active"), d.remove(), c.$searchbox.val()) {
						var e, f = c.$lis.not(".is-hidden, .divider, .dropdown-header");
						if (e = c.options.liveSearchNormalize ? f.not(":a" + c._searchStyle() + '("' + b(c.$searchbox.val()) + '")') : f.not(":" + c._searchStyle() + '("' + c.$searchbox.val() + '")'), e.length === f.length) d.html(c.options.noneResultsText.replace("{0}", '"' + i(c.$searchbox.val()) + '"')), c.$menuInner.append(d), c.$lis.addClass("hidden");
						else {
							e.addClass("hidden");
							var g, h = c.$lis.not(".hidden");
							h.each(function (b) {
								var c = a(this);
								c.hasClass("divider") ? void 0 === g ? c.addClass("hidden") : (g && g.addClass("hidden"), g = c) : c.hasClass("dropdown-header") && h.eq(b + 1).data("optgroup") !== c.data("optgroup") ? c.addClass("hidden") : g = null
							}), g && g.addClass("hidden"), f.not(".hidden").first().addClass("active")
						}
					}
				})
			},
			_searchStyle: function () {
				var a = {
					begins: "ibegins",
					startsWith: "ibegins"
				};
				return a[this.options.liveSearchStyle] || "icontains"
			},
			val: function (a) {
				return "undefined" != typeof a ? (this.$element.val(a), this.render(), this.$element) : this.$element.val()
			},
			changeAll: function (b) {
				if (this.multiple) {
					"undefined" == typeof b && (b = !0), this.findLis();
					var c = this.$element.find("option"),
						d = this.$lis.not(".divider, .dropdown-header, .disabled, .hidden"),
						e = d.length,
						f = [];
					if (b) {
						if (d.filter(".selected").length === d.length) return
					} else if (0 === d.filter(".selected").length) return;
					d.toggleClass("selected", b);
					for (var g = 0; g < e; g++) {
						var h = d[g].getAttribute("data-original-index");
						f[f.length] = c.eq(h)[0]
					}
					a(f).prop("selected", b), this.render(!1), this.togglePlaceholder(), this.$element.triggerNative("change")
				}
			},
			selectAll: function () {
				return this.changeAll(!0)
			},
			deselectAll: function () {
				return this.changeAll(!1)
			},
			toggle: function (a) {
				a = a || window.event, a && a.stopPropagation(), this.$button.trigger("click")
			},
			keydown: function (c) {
				var d, e, f, g, h, i, j, k, l, m = a(this),
					n = m.is("input") ? m.parent().parent() : m.parent(),
					o = n.data("this"),
					p = ":not(.disabled, .hidden, .dropdown-header, .divider)",
					q = {
						32: " ",
						48: "0",
						49: "1",
						50: "2",
						51: "3",
						52: "4",
						53: "5",
						54: "6",
						55: "7",
						56: "8",
						57: "9",
						59: ";",
						65: "a",
						66: "b",
						67: "c",
						68: "d",
						69: "e",
						70: "f",
						71: "g",
						72: "h",
						73: "i",
						74: "j",
						75: "k",
						76: "l",
						77: "m",
						78: "n",
						79: "o",
						80: "p",
						81: "q",
						82: "r",
						83: "s",
						84: "t",
						85: "u",
						86: "v",
						87: "w",
						88: "x",
						89: "y",
						90: "z",
						96: "0",
						97: "1",
						98: "2",
						99: "3",
						100: "4",
						101: "5",
						102: "6",
						103: "7",
						104: "8",
						105: "9"
					};
				if (o.options.liveSearch && (n = m.parent().parent()), o.options.container && (n = o.$menu), d = a('[role="listbox"] li', n), l = o.$newElement.hasClass("open"), !l && (c.keyCode >= 48 && c.keyCode <= 57 || c.keyCode >= 96 && c.keyCode <= 105 || c.keyCode >= 65 && c.keyCode <= 90)) return o.options.container ? o.$button.trigger("click") : (o.setSize(), o.$menu.parent().addClass("open"), l = !0), void o.$searchbox.focus();
				if (o.options.liveSearch && (/(^9$|27)/.test(c.keyCode.toString(10)) && l && (c.preventDefault(), c.stopPropagation(), o.$menuInner.click(), o.$button.focus()), d = a('[role="listbox"] li' + p, n), m.val() || /(38|40)/.test(c.keyCode.toString(10)) || 0 === d.filter(".active").length && (d = o.$menuInner.find("li"), d = o.options.liveSearchNormalize ? d.filter(":a" + o._searchStyle() + "(" + b(q[c.keyCode]) + ")") : d.filter(":" + o._searchStyle() + "(" + q[c.keyCode] + ")"))), d.length) {
					if (/(38|40)/.test(c.keyCode.toString(10))) e = d.index(d.find("a").filter(":focus").parent()), g = d.filter(p).first().index(), h = d.filter(p).last().index(), f = d.eq(e).nextAll(p).eq(0).index(), i = d.eq(e).prevAll(p).eq(0).index(), j = d.eq(f).prevAll(p).eq(0).index(), o.options.liveSearch && (d.each(function (b) {
						a(this).hasClass("disabled") || a(this).data("index", b)
					}), e = d.index(d.filter(".active")), g = d.first().data("index"), h = d.last().data("index"), f = d.eq(e).nextAll().eq(0).data("index"), i = d.eq(e).prevAll().eq(0).data("index"), j = d.eq(f).prevAll().eq(0).data("index")), k = m.data("prevIndex"), 38 == c.keyCode ? (o.options.liveSearch && e--, e != j && e > i && (e = i), e < g && (e = g), e == k && (e = h)) : 40 == c.keyCode && (o.options.liveSearch && e++, e == -1 && (e = 0), e != j && e < f && (e = f), e > h && (e = h), e == k && (e = g)), m.data("prevIndex", e), o.options.liveSearch ? (c.preventDefault(), m.hasClass("dropdown-toggle") || (d.removeClass("active").eq(e).addClass("active").children("a").focus(), m.focus())) : d.eq(e).children("a").focus();
					else if (!m.is("input")) {
						var r, s, t = [];
						d.each(function () {
							a(this).hasClass("disabled") || a.trim(a(this).children("a").text().toLowerCase()).substring(0, 1) == q[c.keyCode] && t.push(a(this).index())
						}), r = a(document).data("keycount"), r++, a(document).data("keycount", r), s = a.trim(a(":focus").text().toLowerCase()).substring(0, 1), s != q[c.keyCode] ? (r = 1, a(document).data("keycount", r)) : r >= t.length && (a(document).data("keycount", 0), r > t.length && (r = 1)), d.eq(t[r - 1]).children("a").focus()
					}
					if ((/(13|32)/.test(c.keyCode.toString(10)) || /(^9$)/.test(c.keyCode.toString(10)) && o.options.selectOnTab) && l) {
						if (/(32)/.test(c.keyCode.toString(10)) || c.preventDefault(), o.options.liveSearch) /(32)/.test(c.keyCode.toString(10)) || (o.$menuInner.find(".active a").click(), m.focus());
						else {
							var u = a(":focus");
							u.click(), u.focus(), c.preventDefault(), a(document).data("spaceSelect", !0)
						}
						a(document).data("keycount", 0)
					}(/(^9$|27)/.test(c.keyCode.toString(10)) && l && (o.multiple || o.options.liveSearch) || /(27)/.test(c.keyCode.toString(10)) && !l) && (o.$menu.parent().removeClass("open"), o.options.container && o.$newElement.removeClass("open"), o.$button.focus())
				}
			},
			mobile: function () {
				this.$element.addClass("mobile-device")
			},
			refresh: function () {
				this.$lis = null, this.liObj = {}, this.reloadLi(), this.render(), this.checkDisabled(), this.liHeight(!0), this.setStyle(), this.setWidth(), this.$lis && this.$searchbox.trigger("propertychange"), this.$element.trigger("refreshed.bs.select")
			},
			hide: function () {
				this.$newElement.hide()
			},
			show: function () {
				this.$newElement.show()
			},
			remove: function () {
				this.$newElement.remove(), this.$element.remove()
			},
			destroy: function () {
				this.$newElement.before(this.$element).remove(), this.$bsContainer ? this.$bsContainer.remove() : this.$menu.remove(), this.$element.off(".bs.select").removeData("selectpicker").removeClass("bs-select-hidden selectpicker")
			}
		};
		var l = a.fn.selectpicker;
		a.fn.selectpicker = c, a.fn.selectpicker.Constructor = k, a.fn.selectpicker.noConflict = function () {
			return a.fn.selectpicker = l, this
		}, a(document).data("keycount", 0).on("keydown.bs.select", '.bootstrap-select [data-toggle=dropdown], .bootstrap-select [role="listbox"], .bs-searchbox input', k.prototype.keydown).on("focusin.modal", '.bootstrap-select [data-toggle=dropdown], .bootstrap-select [role="listbox"], .bs-searchbox input', function (a) {
			a.stopPropagation()
		}), a(window).on("load.bs.select.data-api", function () {
			a(".selectpicker").each(function () {
				var b = a(this);
				c.call(b, b.data())
			})
		})
	}(a)
}),
function (a) {
	"use strict";
	var b = null,
		c = function (a) {
			var b = arguments,
				c = !0,
				d = 1;
			return a = a.replace(/%s/g, function () {
				var a = b[d++];
				return "undefined" == typeof a ? (c = !1, "") : a
			}), c ? a : ""
		},
		d = function (b, c, d, e) {
			var f = "";
			return a.each(b, function (a, b) {
				return b[c] !== e || (f = b[d], !1)
			}), f
		},
		e = function (b, c) {
			var d = -1;
			return a.each(b, function (a, b) {
				return b.field !== c || (d = a, !1)
			}), d
		},
		f = function (b) {
			var c, d, e, f = 0,
				g = [];
			for (c = 0; c < b[0].length; c++) f += b[0][c].colspan || 1;
			for (c = 0; c < b.length; c++)
				for (g[c] = [], d = 0; d < f; d++) g[c][d] = !1;
			for (c = 0; c < b.length; c++)
				for (d = 0; d < b[c].length; d++) {
					var h = b[c][d],
						i = h.rowspan || 1,
						j = h.colspan || 1,
						k = a.inArray(!1, g[c]);
					for (1 === j && (h.fieldIndex = k, "undefined" == typeof h.field && (h.field = k)), e = 0; e < i; e++) g[c + e][k] = !0;
					for (e = 0; e < j; e++) g[c][k + e] = !0
				}
		},
		g = function () {
			if (null === b) {
				var c, d, e = a("<p/>").addClass("fixed-table-scroll-inner"),
					f = a("<div/>").addClass("fixed-table-scroll-outer");
				f.append(e), a("body").append(f), c = e[0].offsetWidth, f.css("overflow", "scroll"), d = e[0].offsetWidth, c === d && (d = f[0].clientWidth), f.remove(), b = c - d
			}
			return b
		},
		h = function (b, d, e, f) {
			var g = d;
			if ("string" == typeof d) {
				var h = d.split(".");
				h.length > 1 ? (g = window, a.each(h, function (a, b) {
					g = g[b]
				})) : g = window[d]
			}
			return "object" == typeof g ? g : "function" == typeof g ? g.apply(b, e) : !g && "string" == typeof d && c.apply(this, [d].concat(e)) ? c.apply(this, [d].concat(e)) : f
		},
		i = function (b, c, d) {
			var e = Object.getOwnPropertyNames(b),
				f = Object.getOwnPropertyNames(c),
				g = "";
			if (d && e.length !== f.length) return !1;
			for (var h = 0; h < e.length; h++)
				if (g = e[h], a.inArray(g, f) > -1 && b[g] !== c[g]) return !1;
			return !0
		},
		j = function (a) {
			return "string" == typeof a ? a.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;").replace(/`/g, "&#x60;") : a
		},
		k = function (b) {
			var c = 0;
			return b.children().each(function () {
				c < a(this).outerHeight(!0) && (c = a(this).outerHeight(!0))
			}), c
		},
		l = function (a) {
			for (var b in a) {
				var c = b.split(/(?=[A-Z])/).join("-").toLowerCase();
				c !== b && (a[c] = a[b], delete a[b])
			}
			return a
		},
		m = function (a, b, c) {
			var d = a;
			if ("string" != typeof b || a.hasOwnProperty(b)) return c ? j(a[b]) : a[b];
			var e = b.split(".");
			for (var f in e) d = d && d[e[f]];
			return c ? j(d) : d
		},
		n = function () {
			return !!(navigator.userAgent.indexOf("MSIE ") > 0 || navigator.userAgent.match(/Trident.*rv\:11\./))
		},
		o = function () {
			Object.keys || (Object.keys = function () {
				var a = Object.prototype.hasOwnProperty,
					b = !{
						toString: null
					}.propertyIsEnumerable("toString"),
					c = ["toString", "toLocaleString", "valueOf", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "constructor"],
					d = c.length;
				return function (e) {
					if ("object" != typeof e && ("function" != typeof e || null === e)) throw new TypeError("Object.keys called on non-object");
					var f, g, h = [];
					for (f in e) a.call(e, f) && h.push(f);
					if (b)
						for (g = 0; g < d; g++) a.call(e, c[g]) && h.push(c[g]);
					return h
				}
			}())
		},
		p = function (b, c) {
			this.options = c, this.$el = a(b), this.$el_ = this.$el.clone(), this.timeoutId_ = 0, this.timeoutFooter_ = 0, this.init()
		};
	p.DEFAULTS = {
		classes: "table table-hover",
		locale: void 0,
		height: void 0,
		undefinedText: "-",
		sortName: void 0,
		sortOrder: "asc",
		sortStable: !1,
		striped: !1,
		columns: [
			[]
		],
		data: [],
		dataField: "rows",
		method: "get",
		url: void 0,
		ajax: void 0,
		cache: !0,
		contentType: "application/json",
		dataType: "json",
		ajaxOptions: {},
		queryParams: function (a) {
			return a
		},
		queryParamsType: "limit",
		responseHandler: function (a) {
			return a
		},
		pagination: !1,
		onlyInfoPagination: !1,
		sidePagination: "client",
		totalRows: 0,
		pageNumber: 1,
		pageSize: 10,
		pageList: [10, 25, 50, 100],
		paginationHAlign: "right",
		paginationVAlign: "bottom",
		paginationDetailHAlign: "left",
		paginationPreText: "&lsaquo;",
		paginationNextText: "&rsaquo;",
		search: !1,
		searchOnEnterKey: !1,
		strictSearch: !1,
		searchAlign: "right",
		selectItemName: "btSelectItem",
		showHeader: !0,
		showFooter: !1,
		showColumns: !1,
		showPaginationSwitch: !1,
		showRefresh: !1,
		showToggle: !1,
		buttonsAlign: "right",
		smartDisplay: !0,
		escape: !1,
		minimumCountColumns: 1,
		idField: void 0,
		uniqueId: void 0,
		cardView: !1,
		detailView: !1,
		detailFormatter: function (a, b) {
			return ""
		},
		trimOnSearch: !0,
		clickToSelect: !1,
		singleSelect: !1,
		toolbar: void 0,
		toolbarAlign: "left",
		checkboxHeader: !0,
		sortable: !0,
		silentSort: !0,
		maintainSelected: !1,
		searchTimeOut: 500,
		searchText: "",
		iconSize: void 0,
		buttonsClass: "default",
		iconsPrefix: "glyphicon",
		icons: {
			paginationSwitchDown: "glyphicon-collapse-down icon-chevron-down",
			paginationSwitchUp: "glyphicon-collapse-up icon-chevron-up",
			refresh: "glyphicon-refresh icon-refresh",
			toggle: "glyphicon-list-alt icon-list-alt",
			columns: "glyphicon-th icon-th",
			detailOpen: "glyphicon-plus icon-plus",
			detailClose: "glyphicon-minus icon-minus"
		},
		customSearch: a.noop,
		customSort: a.noop,
		rowStyle: function (a, b) {
			return {}
		},
		rowAttributes: function (a, b) {
			return {}
		},
		footerStyle: function (a, b) {
			return {}
		},
		onAll: function (a, b) {
			return !1
		},
		onClickCell: function (a, b, c, d) {
			return !1
		},
		onDblClickCell: function (a, b, c, d) {
			return !1
		},
		onClickRow: function (a, b) {
			return !1
		},
		onDblClickRow: function (a, b) {
			return !1
		},
		onSort: function (a, b) {
			return !1
		},
		onCheck: function (a) {
			return !1
		},
		onUncheck: function (a) {
			return !1
		},
		onCheckAll: function (a) {
			return !1
		},
		onUncheckAll: function (a) {
			return !1
		},
		onCheckSome: function (a) {
			return !1
		},
		onUncheckSome: function (a) {
			return !1
		},
		onLoadSuccess: function (a) {
			return !1
		},
		onLoadError: function (a) {
			return !1
		},
		onColumnSwitch: function (a, b) {
			return !1
		},
		onPageChange: function (a, b) {
			return !1
		},
		onSearch: function (a) {
			return !1
		},
		onToggle: function (a) {
			return !1
		},
		onPreBody: function (a) {
			return !1
		},
		onPostBody: function () {
			return !1
		},
		onPostHeader: function () {
			return !1
		},
		onExpandRow: function (a, b, c) {
			return !1
		},
		onCollapseRow: function (a, b) {
			return !1
		},
		onRefreshOptions: function (a) {
			return !1
		},
		onRefresh: function (a) {
			return !1
		},
		onResetView: function () {
			return !1
		}
	}, p.LOCALES = {}, p.LOCALES["en-US"] = p.LOCALES.en = {
		formatLoadingMessage: function () {
			return "Loading, please wait..."
		},
		formatRecordsPerPage: function (a) {
			return c("%s rows per page", a)
		},
		formatShowingRows: function (a, b, d) {
			return c("Showing %s to %s of %s rows", a, b, d)
		},
		formatDetailPagination: function (a) {
			return c("Showing %s rows", a)
		},
		formatSearch: function () {
			return "Search"
		},
		formatNoMatches: function () {
			return "No matching records found"
		},
		formatPaginationSwitch: function () {
			return "Hide/Show pagination"
		},
		formatRefresh: function () {
			return "Refresh"
		},
		formatToggle: function () {
			return "Toggle"
		},
		formatColumns: function () {
			return "Columns"
		},
		formatAllRows: function () {
			return "All"
		}
	}, a.extend(p.DEFAULTS, p.LOCALES["en-US"]), p.COLUMN_DEFAULTS = {
		radio: !1,
		checkbox: !1,
		checkboxEnabled: !0,
		field: void 0,
		title: void 0,
		titleTooltip: void 0,
		class: void 0,
		align: void 0,
		halign: void 0,
		falign: void 0,
		valign: void 0,
		width: void 0,
		sortable: !1,
		order: "asc",
		visible: !0,
		switchable: !0,
		clickToSelect: !0,
		formatter: void 0,
		footerFormatter: void 0,
		events: void 0,
		sorter: void 0,
		sortName: void 0,
		cellStyle: void 0,
		searchable: !0,
		searchFormatter: !0,
		cardVisible: !0
	}, p.EVENTS = {
		"all.bs.table": "onAll",
		"click-cell.bs.table": "onClickCell",
		"dbl-click-cell.bs.table": "onDblClickCell",
		"click-row.bs.table": "onClickRow",
		"dbl-click-row.bs.table": "onDblClickRow",
		"sort.bs.table": "onSort",
		"check.bs.table": "onCheck",
		"uncheck.bs.table": "onUncheck",
		"check-all.bs.table": "onCheckAll",
		"uncheck-all.bs.table": "onUncheckAll",
		"check-some.bs.table": "onCheckSome",
		"uncheck-some.bs.table": "onUncheckSome",
		"load-success.bs.table": "onLoadSuccess",
		"load-error.bs.table": "onLoadError",
		"column-switch.bs.table": "onColumnSwitch",
		"page-change.bs.table": "onPageChange",
		"search.bs.table": "onSearch",
		"toggle.bs.table": "onToggle",
		"pre-body.bs.table": "onPreBody",
		"post-body.bs.table": "onPostBody",
		"post-header.bs.table": "onPostHeader",
		"expand-row.bs.table": "onExpandRow",
		"collapse-row.bs.table": "onCollapseRow",
		"refresh-options.bs.table": "onRefreshOptions",
		"reset-view.bs.table": "onResetView",
		"refresh.bs.table": "onRefresh"
	}, p.prototype.init = function () {
		this.initLocale(), this.initContainer(), this.initTable(), this.initHeader(), this.initData(), this.initFooter(), this.initToolbar(), this.initPagination(), this.initBody(), this.initSearchText(), this.initServer()
	}, p.prototype.initLocale = function () {
		if (this.options.locale) {
			var b = this.options.locale.split(/-|_/);
			b[0].toLowerCase(), b[1] && b[1].toUpperCase(), a.fn.bootstrapTable.locales[this.options.locale] ? a.extend(this.options, a.fn.bootstrapTable.locales[this.options.locale]) : a.fn.bootstrapTable.locales[b.join("-")] ? a.extend(this.options, a.fn.bootstrapTable.locales[b.join("-")]) : a.fn.bootstrapTable.locales[b[0]] && a.extend(this.options, a.fn.bootstrapTable.locales[b[0]])
		}
	}, p.prototype.initContainer = function () {
		this.$container = a(['<div class="bootstrap-table">', '<div class="fixed-table-toolbar"></div>', "top" === this.options.paginationVAlign || "both" === this.options.paginationVAlign ? '<div class="fixed-table-pagination" style="clear: both;"></div>' : "", '<div class="fixed-table-container">', '<div class="fixed-table-header"><table></table></div>', '<div class="fixed-table-body">', '<div class="fixed-table-loading">', this.options.formatLoadingMessage(), "</div>", "</div>", '<div class="fixed-table-footer"><table><tr></tr></table></div>', "bottom" === this.options.paginationVAlign || "both" === this.options.paginationVAlign ? '<div class="fixed-table-pagination"></div>' : "", "</div>", "</div>"].join("")), this.$container.insertAfter(this.$el), this.$tableContainer = this.$container.find(".fixed-table-container"), this.$tableHeader = this.$container.find(".fixed-table-header"), this.$tableBody = this.$container.find(".fixed-table-body"), this.$tableLoading = this.$container.find(".fixed-table-loading"), this.$tableFooter = this.$container.find(".fixed-table-footer"), this.$toolbar = this.$container.find(".fixed-table-toolbar"), this.$pagination = this.$container.find(".fixed-table-pagination"), this.$tableBody.append(this.$el), this.$container.after('<div class="clearfix"></div>'), this.$el.addClass(this.options.classes), this.options.striped && this.$el.addClass("table-striped"), a.inArray("table-no-bordered", this.options.classes.split(" ")) !== -1 && this.$tableContainer.addClass("table-no-bordered")
	}, p.prototype.initTable = function () {
		var b = this,
			c = [],
			d = [];
		if (this.$header = this.$el.find(">thead"), this.$header.length || (this.$header = a("<thead></thead>").appendTo(this.$el)), this.$header.find("tr").each(function () {
				var b = [];
				a(this).find("th").each(function () {
					"undefined" != typeof a(this).data("field") && a(this).data("field", a(this).data("field") + ""), b.push(a.extend({}, {
						title: a(this).html(),
						class: a(this).attr("class"),
						titleTooltip: a(this).attr("title"),
						rowspan: a(this).attr("rowspan") ? +a(this).attr("rowspan") : void 0,
						colspan: a(this).attr("colspan") ? +a(this).attr("colspan") : void 0
					}, a(this).data()))
				}), c.push(b)
			}), a.isArray(this.options.columns[0]) || (this.options.columns = [this.options.columns]), this.options.columns = a.extend(!0, [], c, this.options.columns), this.columns = [], f(this.options.columns), a.each(this.options.columns, function (c, d) {
				a.each(d, function (d, e) {
					e = a.extend({}, p.COLUMN_DEFAULTS, e), "undefined" != typeof e.fieldIndex && (b.columns[e.fieldIndex] = e), b.options.columns[c][d] = e
				})
			}), !this.options.data.length) {
			var e = [];
			this.$el.find(">tbody>tr").each(function (c) {
				var f = {};
				f._id = a(this).attr("id"), f._class = a(this).attr("class"), f._data = l(a(this).data()), a(this).find(">td").each(function (d) {
					for (var g, h, i = a(this), j = +i.attr("colspan") || 1, k = +i.attr("rowspan") || 1; e[c] && e[c][d]; d++);
					for (g = d; g < d + j; g++)
						for (h = c; h < c + k; h++) e[h] || (e[h] = []), e[h][g] = !0;
					var m = b.columns[d].field;
					f[m] = a(this).html(), f["_" + m + "_id"] = a(this).attr("id"), f["_" + m + "_class"] = a(this).attr("class"), f["_" + m + "_rowspan"] = a(this).attr("rowspan"), f["_" + m + "_colspan"] = a(this).attr("colspan"), f["_" + m + "_title"] = a(this).attr("title"), f["_" + m + "_data"] = l(a(this).data())
				}), d.push(f)
			}), this.options.data = d, d.length && (this.fromHtml = !0)
		}
	}, p.prototype.initHeader = function () {
		var b = this,
			d = {},
			e = [];
		this.header = {
			fields: [],
			styles: [],
			classes: [],
			formatters: [],
			events: [],
			sorters: [],
			sortNames: [],
			cellStyles: [],
			searchables: []
		}, a.each(this.options.columns, function (f, g) {
			e.push("<tr>"), 0 === f && !b.options.cardView && b.options.detailView && e.push(c('<th class="detail" rowspan="%s"><div class="fht-cell"></div></th>', b.options.columns.length)), a.each(g, function (a, f) {
				var g = "",
					h = "",
					i = "",
					j = "",
					k = c(' class="%s"', f.class),
					l = (b.options.sortOrder || f.order, "px"),
					m = f.width;
				if (void 0 === f.width || b.options.cardView || "string" == typeof f.width && f.width.indexOf("%") !== -1 && (l = "%"), f.width && "string" == typeof f.width && (m = f.width.replace("%", "").replace("px", "")), h = c("text-align: %s; ", f.halign ? f.halign : f.align), i = c("text-align: %s; ", f.align), j = c("vertical-align: %s; ", f.valign), j += c("width: %s; ", !f.checkbox && !f.radio || m ? m ? m + l : void 0 : "36px"), "undefined" != typeof f.fieldIndex) {
					if (b.header.fields[f.fieldIndex] = f.field, b.header.styles[f.fieldIndex] = i + j, b.header.classes[f.fieldIndex] = k, b.header.formatters[f.fieldIndex] = f.formatter, b.header.events[f.fieldIndex] = f.events, b.header.sorters[f.fieldIndex] = f.sorter, b.header.sortNames[f.fieldIndex] = f.sortName, b.header.cellStyles[f.fieldIndex] = f.cellStyle, b.header.searchables[f.fieldIndex] = f.searchable, !f.visible) return;
					if (b.options.cardView && !f.cardVisible) return;
					d[f.field] = f
				}
				e.push("<th" + c(' title="%s"', f.titleTooltip), f.checkbox || f.radio ? c(' class="bs-checkbox %s"', f.class || "") : k, c(' style="%s"', h + j), c(' rowspan="%s"', f.rowspan), c(' colspan="%s"', f.colspan), c(' data-field="%s"', f.field), "tabindex='0'", ">"), e.push(c('<div class="th-inner %s">', b.options.sortable && f.sortable ? "sortable both" : "")), g = f.title, f.checkbox && (!b.options.singleSelect && b.options.checkboxHeader && (g = '<input name="btSelectAll" type="checkbox" />'), b.header.stateField = f.field), f.radio && (g = "", b.header.stateField = f.field, b.options.singleSelect = !0), e.push(g), e.push("</div>"), e.push('<div class="fht-cell"></div>'), e.push("</div>"), e.push("</th>")
			}), e.push("</tr>")
		}), this.$header.html(e.join("")), this.$header.find("th[data-field]").each(function (b) {
			a(this).data(d[a(this).data("field")])
		}), this.$container.off("click", ".th-inner").on("click", ".th-inner", function (c) {
			var d = a(this);
			return (!b.options.detailView || d.closest(".bootstrap-table")[0] === b.$container[0]) && void(b.options.sortable && d.parent().data().sortable && b.onSort(c))
		}), this.$header.children().children().off("keypress").on("keypress", function (c) {
			if (b.options.sortable && a(this).data().sortable) {
				var d = c.keyCode || c.which;
				13 == d && b.onSort(c)
			}
		}), a(window).off("resize.bootstrap-table"), !this.options.showHeader || this.options.cardView ? (this.$header.hide(), this.$tableHeader.hide(), this.$tableLoading.css("top", 0)) : (this.$header.show(), this.$tableHeader.show(), this.$tableLoading.css("top", this.$header.outerHeight() + 1), this.getCaret(), a(window).on("resize.bootstrap-table", a.proxy(this.resetWidth, this))), this.$selectAll = this.$header.find('[name="btSelectAll"]'), this.$selectAll.off("click").on("click", function () {
			var c = a(this).prop("checked");
			b[c ? "checkAll" : "uncheckAll"](), b.updateSelected()
		})
	}, p.prototype.initFooter = function () {
		!this.options.showFooter || this.options.cardView ? this.$tableFooter.hide() : this.$tableFooter.show()
	}, p.prototype.initData = function (a, b) {
		"append" === b ? this.data = this.data.concat(a) : "prepend" === b ? this.data = [].concat(a).concat(this.data) : this.data = a || this.options.data, "append" === b ? this.options.data = this.options.data.concat(a) : "prepend" === b ? this.options.data = [].concat(a).concat(this.options.data) : this.options.data = this.data, "server" !== this.options.sidePagination && this.initSort()
	}, p.prototype.initSort = function () {
		var b = this,
			c = this.options.sortName,
			d = "desc" === this.options.sortOrder ? -1 : 1,
			e = a.inArray(this.options.sortName, this.header.fields);
		return this.options.customSort !== a.noop ? void this.options.customSort.apply(this, [this.options.sortName, this.options.sortOrder]) : void(e !== -1 && (this.options.sortStable && a.each(this.data, function (a, b) {
			b.hasOwnProperty("_position") || (b._position = a)
		}), this.data.sort(function (f, g) {
			b.header.sortNames[e] && (c = b.header.sortNames[e]);
			var i = m(f, c, b.options.escape),
				j = m(g, c, b.options.escape),
				k = h(b.header, b.header.sorters[e], [i, j]);
			return void 0 !== k ? d * k : (void 0 !== i && null !== i || (i = ""), void 0 !== j && null !== j || (j = ""), b.options.sortStable && i === j && (i = f._position, j = g._position), a.isNumeric(i) && a.isNumeric(j) ? (i = parseFloat(i), j = parseFloat(j), i < j ? d * -1 : d) : i === j ? 0 : ("string" != typeof i && (i = i.toString()), i.localeCompare(j) === -1 ? d * -1 : d))
		})))
	}, p.prototype.onSort = function (b) {
		var c = "keypress" === b.type ? a(b.currentTarget) : a(b.currentTarget).parent(),
			d = this.$header.find("th").eq(c.index());
		return this.$header.add(this.$header_).find("span.order").remove(), this.options.sortName === c.data("field") ? this.options.sortOrder = "asc" === this.options.sortOrder ? "desc" : "asc" : (this.options.sortName = c.data("field"), this.options.sortOrder = "asc" === c.data("order") ? "desc" : "asc"), this.trigger("sort", this.options.sortName, this.options.sortOrder), c.add(d).data("order", this.options.sortOrder), this.getCaret(), "server" === this.options.sidePagination ? void this.initServer(this.options.silentSort) : (this.initSort(), void this.initBody())
	}, p.prototype.initToolbar = function () {
		var b, d, e = this,
			f = [],
			g = 0,
			i = 0;
		this.$toolbar.find(".bs-bars").children().length && a("body").append(a(this.options.toolbar)), this.$toolbar.html(""), "string" != typeof this.options.toolbar && "object" != typeof this.options.toolbar || a(c('<div class="bs-bars pull-%s"></div>', this.options.toolbarAlign)).appendTo(this.$toolbar).append(a(this.options.toolbar)), f = [c('<div class="columns columns-%s btn-group pull-%s">', this.options.buttonsAlign, this.options.buttonsAlign)], "string" == typeof this.options.icons && (this.options.icons = h(null, this.options.icons)), this.options.showPaginationSwitch && f.push(c('<button class="btn' + c(" btn-%s", this.options.buttonsClass) + c(" btn-%s", this.options.iconSize) + '" type="button" name="paginationSwitch" title="%s">', this.options.formatPaginationSwitch()), c('<i class="%s %s"></i>', this.options.iconsPrefix, this.options.icons.paginationSwitchDown), "</button>"), this.options.showRefresh && f.push(c('<button class="btn' + c(" btn-%s", this.options.buttonsClass) + c(" btn-%s", this.options.iconSize) + '" type="button" name="refresh" title="%s">', this.options.formatRefresh()), c('<i class="%s %s"></i>', this.options.iconsPrefix, this.options.icons.refresh), "</button>"), this.options.showToggle && f.push(c('<button class="btn' + c(" btn-%s", this.options.buttonsClass) + c(" btn-%s", this.options.iconSize) + '" type="button" name="toggle" title="%s">', this.options.formatToggle()), c('<i class="%s %s"></i>', this.options.iconsPrefix, this.options.icons.toggle), "</button>"), this.options.showColumns && (f.push(c('<div class="keep-open btn-group" title="%s">', this.options.formatColumns()), '<button type="button" class="btn' + c(" btn-%s", this.options.buttonsClass) + c(" btn-%s", this.options.iconSize) + ' dropdown-toggle" data-toggle="dropdown">', c('<i class="%s %s"></i>', this.options.iconsPrefix, this.options.icons.columns), ' <span class="caret"></span>', "</button>", '<ul class="dropdown-menu" role="menu">'), a.each(this.columns, function (a, b) {
			if (!b.radio && !b.checkbox && (!e.options.cardView || b.cardVisible)) {
				var d = b.visible ? ' checked="checked"' : "";
				b.switchable && (f.push(c('<li><label><input type="checkbox" data-field="%s" value="%s"%s> %s</label></li>', b.field, a, d, b.title)), i++)
			}
		}), f.push("</ul>", "</div>")), f.push("</div>"), (this.showToolbar || f.length > 2) && this.$toolbar.append(f.join("")), this.options.showPaginationSwitch && this.$toolbar.find('button[name="paginationSwitch"]').off("click").on("click", a.proxy(this.togglePagination, this)), this.options.showRefresh && this.$toolbar.find('button[name="refresh"]').off("click").on("click", a.proxy(this.refresh, this)), this.options.showToggle && this.$toolbar.find('button[name="toggle"]').off("click").on("click", function () {
			e.toggleView()
		}), this.options.showColumns && (b = this.$toolbar.find(".keep-open"), i <= this.options.minimumCountColumns && b.find("input").prop("disabled", !0), b.find("li").off("click").on("click", function (a) {
			a.stopImmediatePropagation()
		}), b.find("input").off("click").on("click", function () {
			var b = a(this);
			e.toggleColumn(a(this).val(), b.prop("checked"), !1), e.trigger("column-switch", a(this).data("field"), b.prop("checked"))
		})), this.options.search && (f = [], f.push('<div class="pull-' + this.options.searchAlign + ' search">', c('<input class="form-control' + c(" input-%s", this.options.iconSize) + '" type="text" placeholder="%s">', this.options.formatSearch()), "</div>"), this.$toolbar.append(f.join("")), d = this.$toolbar.find(".search input"), d.off("keyup drop").on("keyup drop", function (b) {
			e.options.searchOnEnterKey && 13 !== b.keyCode || a.inArray(b.keyCode, [37, 38, 39, 40]) > -1 || (clearTimeout(g), g = setTimeout(function () {
				e.onSearch(b)
			}, e.options.searchTimeOut))
		}), n() && d.off("mouseup").on("mouseup", function (a) {
			clearTimeout(g), g = setTimeout(function () {
				e.onSearch(a)
			}, e.options.searchTimeOut)
		}))
	}, p.prototype.onSearch = function (b) {
		var c = a.trim(a(b.currentTarget).val());
		this.options.trimOnSearch && a(b.currentTarget).val() !== c && a(b.currentTarget).val(c), c !== this.searchText && (this.searchText = c, this.options.searchText = c, this.options.pageNumber = 1, this.initSearch(), this.updatePagination(), this.trigger("search", c))
	}, p.prototype.initSearch = function () {
		var b = this;
		if ("server" !== this.options.sidePagination) {
			if (this.options.customSearch !== a.noop) return void this.options.customSearch.apply(this, [this.searchText]);
			var c = this.searchText && (this.options.escape ? j(this.searchText) : this.searchText).toLowerCase(),
				d = a.isEmptyObject(this.filterColumns) ? null : this.filterColumns;
			this.data = d ? a.grep(this.options.data, function (b, c) {
				for (var e in d)
					if (a.isArray(d[e]) && a.inArray(b[e], d[e]) === -1 || b[e] !== d[e]) return !1;
				return !0
			}) : this.options.data, this.data = c ? a.grep(this.data, function (d, f) {
				for (var g = 0; g < b.header.fields.length; g++)
					if (b.header.searchables[g]) {
						var i, j = a.isNumeric(b.header.fields[g]) ? parseInt(b.header.fields[g], 10) : b.header.fields[g],
							k = b.columns[e(b.columns, j)];
						if ("string" == typeof j) {
							i = d;
							for (var l = j.split("."), m = 0; m < l.length; m++) i = i[l[m]];
							k && k.searchFormatter && (i = h(k, b.header.formatters[g], [i, d, f], i))
						} else i = d[j];
						if ("string" == typeof i || "number" == typeof i)
							if (b.options.strictSearch) {
								if ((i + "").toLowerCase() === c) return !0
							} else if ((i + "").toLowerCase().indexOf(c) !== -1) return !0
					}
				return !1
			}) : this.data
		}
	}, p.prototype.initPagination = function () {
		if (!this.options.pagination) return void this.$pagination.hide();
		this.$pagination.show();
		var b, d, e, f, g, h, i, j, k, l = this,
			m = [],
			n = !1,
			o = this.getData(),
			p = this.options.pageList;
		if ("server" !== this.options.sidePagination && (this.options.totalRows = o.length), this.totalPages = 0, this.options.totalRows) {
			if (this.options.pageSize === this.options.formatAllRows()) this.options.pageSize = this.options.totalRows, n = !0;
			else if (this.options.pageSize === this.options.totalRows) {
				var q = "string" == typeof this.options.pageList ? this.options.pageList.replace("[", "").replace("]", "").replace(/ /g, "").toLowerCase().split(",") : this.options.pageList;
				a.inArray(this.options.formatAllRows().toLowerCase(), q) > -1 && (n = !0)
			}
			this.totalPages = ~~((this.options.totalRows - 1) / this.options.pageSize) + 1, this.options.totalPages = this.totalPages
		}
		if (this.totalPages > 0 && this.options.pageNumber > this.totalPages && (this.options.pageNumber = this.totalPages), this.pageFrom = (this.options.pageNumber - 1) * this.options.pageSize + 1, this.pageTo = this.options.pageNumber * this.options.pageSize, this.pageTo > this.options.totalRows && (this.pageTo = this.options.totalRows), m.push('<div class="pull-' + this.options.paginationDetailHAlign + ' pagination-detail">', '<span class="pagination-info">', this.options.onlyInfoPagination ? this.options.formatDetailPagination(this.options.totalRows) : this.options.formatShowingRows(this.pageFrom, this.pageTo, this.options.totalRows), "</span>"), !this.options.onlyInfoPagination) {
			m.push('<span class="page-list">');
			var r = [c('<span class="btn-group %s">', "top" === this.options.paginationVAlign || "both" === this.options.paginationVAlign ? "dropdown" : "dropup"), '<button type="button" class="btn' + c(" btn-%s", this.options.buttonsClass) + c(" btn-%s", this.options.iconSize) + ' dropdown-toggle" data-toggle="dropdown">', '<span class="page-size">', n ? this.options.formatAllRows() : this.options.pageSize, "</span>", ' <span class="caret"></span>', "</button>", '<ul class="dropdown-menu" role="menu">'];
			if ("string" == typeof this.options.pageList) {
				var s = this.options.pageList.replace("[", "").replace("]", "").replace(/ /g, "").split(",");
				p = [], a.each(s, function (a, b) {
					p.push(b.toUpperCase() === l.options.formatAllRows().toUpperCase() ? l.options.formatAllRows() : +b)
				})
			}
			for (a.each(p, function (a, b) {
					if (!l.options.smartDisplay || 0 === a || p[a - 1] <= l.options.totalRows) {
						var d;
						d = n ? b === l.options.formatAllRows() ? ' class="active"' : "" : b === l.options.pageSize ? ' class="active"' : "", r.push(c('<li%s><a href="javascript:void(0)">%s</a></li>', d, b))
					}
				}), r.push("</ul></span>"), m.push(this.options.formatRecordsPerPage(r.join(""))), m.push("</span>"), m.push("</div>", '<div class="pull-' + this.options.paginationHAlign + ' pagination">', '<ul class="pagination' + c(" pagination-%s", this.options.iconSize) + '">', '<li class="page-pre"><a href="javascript:void(0)">' + this.options.paginationPreText + "</a></li>"), this.totalPages < 5 ? (d = 1, e = this.totalPages) : (d = this.options.pageNumber - 2, e = d + 4, d < 1 && (d = 1, e = 5), e > this.totalPages && (e = this.totalPages, d = e - 4)), this.totalPages >= 6 && (this.options.pageNumber >= 3 && (m.push('<li class="page-first' + (1 === this.options.pageNumber ? " active" : "") + '">', '<a href="javascript:void(0)">', 1, "</a>", "</li>"), d++), this.options.pageNumber >= 4 && (4 == this.options.pageNumber || 6 == this.totalPages || 7 == this.totalPages ? d-- : m.push('<li class="page-first-separator disabled">', '<a href="javascript:void(0)">...</a>', "</li>"), e--)), this.totalPages >= 7 && this.options.pageNumber >= this.totalPages - 2 && d--, 6 == this.totalPages ? this.options.pageNumber >= this.totalPages - 2 && e++ : this.totalPages >= 7 && (7 == this.totalPages || this.options.pageNumber >= this.totalPages - 3) && e++, b = d; b <= e; b++) m.push('<li class="page-number' + (b === this.options.pageNumber ? " active" : "") + '">', '<a href="javascript:void(0)">', b, "</a>", "</li>");
			this.totalPages >= 8 && this.options.pageNumber <= this.totalPages - 4 && m.push('<li class="page-last-separator disabled">', '<a href="javascript:void(0)">...</a>', "</li>"), this.totalPages >= 6 && this.options.pageNumber <= this.totalPages - 3 && m.push('<li class="page-last' + (this.totalPages === this.options.pageNumber ? " active" : "") + '">', '<a href="javascript:void(0)">', this.totalPages, "</a>", "</li>"), m.push('<li class="page-next"><a href="javascript:void(0)">' + this.options.paginationNextText + "</a></li>", "</ul>", "</div>")
		}
		this.$pagination.html(m.join("")), this.options.onlyInfoPagination || (f = this.$pagination.find(".page-list a"), g = this.$pagination.find(".page-first"), h = this.$pagination.find(".page-pre"), i = this.$pagination.find(".page-next"), j = this.$pagination.find(".page-last"), k = this.$pagination.find(".page-number"), this.options.smartDisplay && (this.totalPages <= 1 && this.$pagination.find("div.pagination").hide(), (p.length < 2 || this.options.totalRows <= p[0]) && this.$pagination.find("span.page-list").hide(), this.$pagination[this.getData().length ? "show" : "hide"]()), n && (this.options.pageSize = this.options.formatAllRows()), f.off("click").on("click", a.proxy(this.onPageListChange, this)), g.off("click").on("click", a.proxy(this.onPageFirst, this)), h.off("click").on("click", a.proxy(this.onPagePre, this)), i.off("click").on("click", a.proxy(this.onPageNext, this)), j.off("click").on("click", a.proxy(this.onPageLast, this)), k.off("click").on("click", a.proxy(this.onPageNumber, this)))
	}, p.prototype.updatePagination = function (b) {
		b && a(b.currentTarget).hasClass("disabled") || (this.options.maintainSelected || this.resetRows(), this.initPagination(), "server" === this.options.sidePagination ? this.initServer() : this.initBody(), this.trigger("page-change", this.options.pageNumber, this.options.pageSize))
	}, p.prototype.onPageListChange = function (b) {
		var c = a(b.currentTarget);
		c.parent().addClass("active").siblings().removeClass("active"), this.options.pageSize = c.text().toUpperCase() === this.options.formatAllRows().toUpperCase() ? this.options.formatAllRows() : +c.text(), this.$toolbar.find(".page-size").text(this.options.pageSize), this.updatePagination(b)
	}, p.prototype.onPageFirst = function (a) {
		this.options.pageNumber = 1, this.updatePagination(a)
	}, p.prototype.onPagePre = function (a) {
		this.options.pageNumber - 1 === 0 ? this.options.pageNumber = this.options.totalPages : this.options.pageNumber--, this.updatePagination(a)
	}, p.prototype.onPageNext = function (a) {
		this.options.pageNumber + 1 > this.options.totalPages ? this.options.pageNumber = 1 : this.options.pageNumber++, this.updatePagination(a)
	}, p.prototype.onPageLast = function (a) {
		this.options.pageNumber = this.totalPages, this.updatePagination(a)
	}, p.prototype.onPageNumber = function (b) {
		this.options.pageNumber !== +a(b.currentTarget).text() && (this.options.pageNumber = +a(b.currentTarget).text(), this.updatePagination(b))
	}, p.prototype.initBody = function (b) {
		var f = this,
			g = [],
			i = this.getData();
		this.trigger("pre-body", i), this.$body = this.$el.find(">tbody"), this.$body.length || (this.$body = a("<tbody></tbody>").appendTo(this.$el)), this.options.pagination && "server" !== this.options.sidePagination || (this.pageFrom = 1, this.pageTo = i.length);
		for (var k = this.pageFrom - 1; k < this.pageTo; k++) {
			var l, n = i[k],
				o = {},
				p = [],
				q = "",
				r = {},
				s = [];
			if (o = h(this.options, this.options.rowStyle, [n, k], o), o && o.css)
				for (l in o.css) p.push(l + ": " + o.css[l]);
			if (r = h(this.options, this.options.rowAttributes, [n, k], r))
				for (l in r) s.push(c('%s="%s"', l, j(r[l])));
			n._data && !a.isEmptyObject(n._data) && a.each(n._data, function (a, b) {
				"index" !== a && (q += c(' data-%s="%s"', a, b))
			}), g.push("<tr", c(" %s", s.join(" ")), c(' id="%s"', a.isArray(n) ? void 0 : n._id), c(' class="%s"', o.classes || (a.isArray(n) ? void 0 : n._class)), c(' data-index="%s"', k), c(' data-uniqueid="%s"', n[this.options.uniqueId]), c("%s", q), ">"), this.options.cardView && g.push(c('<td colspan="%s"><div class="card-views">', this.header.fields.length)), !this.options.cardView && this.options.detailView && g.push("<td>", '<a class="detail-icon" href="javascript:">', c('<i class="%s %s"></i>', this.options.iconsPrefix, this.options.icons.detailOpen), "</a>", "</td>"), a.each(this.header.fields, function (b, e) {
				var i = "",
					j = m(n, e, f.options.escape),
					l = "",
					q = {},
					r = "",
					s = f.header.classes[b],
					t = "",
					u = "",
					v = "",
					w = "",
					x = f.columns[b];
				if ((!f.fromHtml || "undefined" != typeof j) && x.visible && (!f.options.cardView || x.cardVisible)) {
					if (o = c('style="%s"', p.concat(f.header.styles[b]).join("; ")), n["_" + e + "_id"] && (r = c(' id="%s"', n["_" + e + "_id"])), n["_" + e + "_class"] && (s = c(' class="%s"', n["_" + e + "_class"])), n["_" + e + "_rowspan"] && (u = c(' rowspan="%s"', n["_" + e + "_rowspan"])), n["_" + e + "_colspan"] && (v = c(' colspan="%s"', n["_" + e + "_colspan"])), n["_" + e + "_title"] && (w = c(' title="%s"', n["_" + e + "_title"])), q = h(f.header, f.header.cellStyles[b], [j, n, k, e], q), q.classes && (s = c(' class="%s"', q.classes)), q.css) {
						var y = [];
						for (var z in q.css) y.push(z + ": " + q.css[z]);
						o = c('style="%s"', y.concat(f.header.styles[b]).join("; "))
					}
					j = h(x, f.header.formatters[b], [j, n, k], j), n["_" + e + "_data"] && !a.isEmptyObject(n["_" + e + "_data"]) && a.each(n["_" + e + "_data"], function (a, b) {
						"index" !== a && (t += c(' data-%s="%s"', a, b))
					}), x.checkbox || x.radio ? (l = x.checkbox ? "checkbox" : l, l = x.radio ? "radio" : l, i = [c(f.options.cardView ? '<div class="card-view %s">' : '<td class="bs-checkbox %s">', x.class || ""), "<input" + c(' data-index="%s"', k) + c(' name="%s"', f.options.selectItemName) + c(' type="%s"', l) + c(' value="%s"', n[f.options.idField]) + c(' checked="%s"', j === !0 || j && j.checked ? "checked" : void 0) + c(' disabled="%s"', !x.checkboxEnabled || j && j.disabled ? "disabled" : void 0) + " />", f.header.formatters[b] && "string" == typeof j ? j : "", f.options.cardView ? "</div>" : "</td>"].join(""), n[f.header.stateField] = j === !0 || j && j.checked) : (j = "undefined" == typeof j || null === j ? f.options.undefinedText : j, i = f.options.cardView ? ['<div class="card-view">', f.options.showHeader ? c('<span class="title" %s>%s</span>', o, d(f.columns, "field", "title", e)) : "", c('<span class="value">%s</span>', j), "</div>"].join("") : [c("<td%s %s %s %s %s %s %s>", r, s, o, t, u, v, w), j, "</td>"].join(""), f.options.cardView && f.options.smartDisplay && "" === j && (i = '<div class="card-view"></div>')), g.push(i)
				}
			}), this.options.cardView && g.push("</div></td>"), g.push("</tr>")
		}
		g.length || g.push('<tr class="no-records-found">', c('<td colspan="%s">%s</td>', this.$header.find("th").length, this.options.formatNoMatches()), "</tr>"), this.$body.html(g.join("")), b || this.scrollTo(0), this.$body.find("> tr[data-index] > td").off("click dblclick").on("click dblclick", function (b) {
			var d = a(this),
				g = d.parent(),
				h = f.data[g.data("index")],
				i = d[0].cellIndex,
				j = f.getVisibleFields(),
				k = j[f.options.detailView && !f.options.cardView ? i - 1 : i],
				l = f.columns[e(f.columns, k)],
				n = m(h, k, f.options.escape);
			if (!d.find(".detail-icon").length && (f.trigger("click" === b.type ? "click-cell" : "dbl-click-cell", k, n, h, d), f.trigger("click" === b.type ? "click-row" : "dbl-click-row", h, g, k), "click" === b.type && f.options.clickToSelect && l.clickToSelect)) {
				var o = g.find(c('[name="%s"]', f.options.selectItemName));
				o.length && o[0].click()
			}
		}), this.$body.find("> tr[data-index] > td > .detail-icon").off("click").on("click", function () {
			var b = a(this),
				d = b.parent().parent(),
				e = d.data("index"),
				g = i[e];
			if (d.next().is("tr.detail-view")) b.find("i").attr("class", c("%s %s", f.options.iconsPrefix, f.options.icons.detailOpen)), d.next().remove(), f.trigger("collapse-row", e, g);
			else {
				b.find("i").attr("class", c("%s %s", f.options.iconsPrefix, f.options.icons.detailClose)), d.after(c('<tr class="detail-view"><td colspan="%s"></td></tr>', d.find("td").length));
				var j = d.next().find("td"),
					k = h(f.options, f.options.detailFormatter, [e, g, j], "");
				1 === j.length && j.append(k), f.trigger("expand-row", e, g, j)
			}
			f.resetView()
		}), this.$selectItem = this.$body.find(c('[name="%s"]', this.options.selectItemName)), this.$selectItem.off("click").on("click", function (b) {
			b.stopImmediatePropagation();
			var c = a(this),
				d = c.prop("checked"),
				e = f.data[c.data("index")];
			f.options.maintainSelected && a(this).is(":radio") && a.each(f.options.data, function (a, b) {
				b[f.header.stateField] = !1
			}), e[f.header.stateField] = d, f.options.singleSelect && (f.$selectItem.not(this).each(function () {
				f.data[a(this).data("index")][f.header.stateField] = !1
			}), f.$selectItem.filter(":checked").not(this).prop("checked", !1)), f.updateSelected(), f.trigger(d ? "check" : "uncheck", e, c)
		}), a.each(this.header.events, function (b, c) {
			if (c) {
				"string" == typeof c && (c = h(null, c));
				var d = f.header.fields[b],
					e = a.inArray(d, f.getVisibleFields());
				f.options.detailView && !f.options.cardView && (e += 1);
				for (var g in c) f.$body.find(">tr:not(.no-records-found)").each(function () {
					var b = a(this),
						h = b.find(f.options.cardView ? ".card-view" : "td").eq(e),
						i = g.indexOf(" "),
						j = g.substring(0, i),
						k = g.substring(i + 1),
						l = c[g];
					h.find(k).off(j).on(j, function (a) {
						var c = b.data("index"),
							e = f.data[c],
							g = e[d];
						l.apply(this, [a, g, e, c])
					})
				})
			}
		}), this.updateSelected(), this.resetView(), this.trigger("post-body", i)
	}, p.prototype.initServer = function (b, c, d) {
		var e, f = this,
			g = {},
			i = {
				searchText: this.searchText,
				sortName: this.options.sortName,
				sortOrder: this.options.sortOrder
			};
		this.options.pagination && (i.pageSize = this.options.pageSize === this.options.formatAllRows() ? this.options.totalRows : this.options.pageSize, i.pageNumber = this.options.pageNumber), (d || this.options.url || this.options.ajax) && ("limit" === this.options.queryParamsType && (i = {
			search: i.searchText,
			sort: i.sortName,
			order: i.sortOrder
		}, this.options.pagination && (i.offset = this.options.pageSize === this.options.formatAllRows() ? 0 : this.options.pageSize * (this.options.pageNumber - 1), i.limit = this.options.pageSize === this.options.formatAllRows() ? this.options.totalRows : this.options.pageSize)), a.isEmptyObject(this.filterColumnsPartial) || (i.filter = JSON.stringify(this.filterColumnsPartial, null)), g = h(this.options, this.options.queryParams, [i], g), a.extend(g, c || {}), g !== !1 && (b || this.$tableLoading.show(), e = a.extend({}, h(null, this.options.ajaxOptions), {
			type: this.options.method,
			url: d || this.options.url,
			data: "application/json" === this.options.contentType && "post" === this.options.method ? JSON.stringify(g) : g,
			cache: this.options.cache,
			contentType: this.options.contentType,
			dataType: this.options.dataType,
			success: function (a) {
				a = h(f.options, f.options.responseHandler, [a], a), f.load(a), f.trigger("load-success", a), b || f.$tableLoading.hide()
			},
			error: function (a) {
				f.trigger("load-error", a.status, a), b || f.$tableLoading.hide()
			}
		}), this.options.ajax ? h(this, this.options.ajax, [e], null) : (this._xhr && 4 !== this._xhr.readyState && this._xhr.abort(), this._xhr = a.ajax(e))))
	}, p.prototype.initSearchText = function () {
		if (this.options.search && "" !== this.options.searchText) {
			var a = this.$toolbar.find(".search input");
			a.val(this.options.searchText), this.onSearch({
				currentTarget: a
			})
		}
	}, p.prototype.getCaret = function () {
		var b = this;
		a.each(this.$header.find("th"), function (c, d) {
			a(d).find(".sortable").removeClass("desc asc").addClass(a(d).data("field") === b.options.sortName ? b.options.sortOrder : "both")
		})
	}, p.prototype.updateSelected = function () {
		var b = this.$selectItem.filter(":enabled").length && this.$selectItem.filter(":enabled").length === this.$selectItem.filter(":enabled").filter(":checked").length;
		this.$selectAll.add(this.$selectAll_).prop("checked", b), this.$selectItem.each(function () {
			a(this).closest("tr")[a(this).prop("checked") ? "addClass" : "removeClass"]("selected")
		})
	}, p.prototype.updateRows = function () {
		var b = this;
		this.$selectItem.each(function () {
			b.data[a(this).data("index")][b.header.stateField] = a(this).prop("checked")
		})
	}, p.prototype.resetRows = function () {
		var b = this;
		a.each(this.data, function (a, c) {
			b.$selectAll.prop("checked", !1), b.$selectItem.prop("checked", !1), b.header.stateField && (c[b.header.stateField] = !1)
		})
	}, p.prototype.trigger = function (b) {
		var c = Array.prototype.slice.call(arguments, 1);
		b += ".bs.table", this.options[p.EVENTS[b]].apply(this.options, c), this.$el.trigger(a.Event(b), c), this.options.onAll(b, c), this.$el.trigger(a.Event("all.bs.table"), [b, c])
	}, p.prototype.resetHeader = function () {
		clearTimeout(this.timeoutId_), this.timeoutId_ = setTimeout(a.proxy(this.fitHeader, this), this.$el.is(":hidden") ? 100 : 0)
	}, p.prototype.fitHeader = function () {
		var b, d, e, f, h = this;
		if (h.$el.is(":hidden")) return void(h.timeoutId_ = setTimeout(a.proxy(h.fitHeader, h), 100));
		if (b = this.$tableBody.get(0), d = b.scrollWidth > b.clientWidth && b.scrollHeight > b.clientHeight + this.$header.outerHeight() ? g() : 0, this.$el.css("margin-top", -this.$header.outerHeight()), e = a(":focus"), e.length > 0) {
			var i = e.parents("th");
			if (i.length > 0) {
				var j = i.attr("data-field");
				if (void 0 !== j) {
					var k = this.$header.find("[data-field='" + j + "']");
					k.length > 0 && k.find(":input").addClass("focus-temp")
				}
			}
		}
		this.$header_ = this.$header.clone(!0, !0), this.$selectAll_ = this.$header_.find('[name="btSelectAll"]'), this.$tableHeader.css({
			"margin-right": d
		}).find("table").css("width", this.$el.outerWidth()).html("").attr("class", this.$el.attr("class")).append(this.$header_), f = a(".focus-temp:visible:eq(0)"), f.length > 0 && (f.focus(), this.$header.find(".focus-temp").removeClass("focus-temp")), this.$header.find("th[data-field]").each(function (b) {
			h.$header_.find(c('th[data-field="%s"]', a(this).data("field"))).data(a(this).data())
		});
		var l = this.getVisibleFields(),
			m = this.$header_.find("th");
		this.$body.find(">tr:first-child:not(.no-records-found) > *").each(function (b) {
			var d = a(this),
				e = b;
			h.options.detailView && !h.options.cardView && (0 === b && h.$header_.find("th.detail").find(".fht-cell").width(d.innerWidth()), e = b - 1);
			var f = h.$header_.find(c('th[data-field="%s"]', l[e]));
			f.length > 1 && (f = a(m[d[0].cellIndex])), f.find(".fht-cell").width(d.innerWidth())
		}), this.$tableBody.off("scroll").on("scroll", function () {
			h.$tableHeader.scrollLeft(a(this).scrollLeft()), h.options.showFooter && !h.options.cardView && h.$tableFooter.scrollLeft(a(this).scrollLeft())
		}), h.trigger("post-header")
	}, p.prototype.resetFooter = function () {
		var b = this,
			d = b.getData(),
			e = [];
		this.options.showFooter && !this.options.cardView && (!this.options.cardView && this.options.detailView && e.push('<td><div class="th-inner">&nbsp;</div><div class="fht-cell"></div></td>'), a.each(this.columns, function (a, f) {
			var g, i = "",
				j = "",
				k = [],
				l = {},
				m = c(' class="%s"', f.class);
			if (f.visible && (!b.options.cardView || f.cardVisible)) {
				if (i = c("text-align: %s; ", f.falign ? f.falign : f.align), j = c("vertical-align: %s; ", f.valign), l = h(null, b.options.footerStyle), l && l.css)
					for (g in l.css) k.push(g + ": " + l.css[g]);
				e.push("<td", m, c(' style="%s"', i + j + k.concat().join("; ")), ">"), e.push('<div class="th-inner">'), e.push(h(f, f.footerFormatter, [d], "&nbsp;") || "&nbsp;"), e.push("</div>"), e.push('<div class="fht-cell"></div>'), e.push("</div>"), e.push("</td>")
			}
		}), this.$tableFooter.find("tr").html(e.join("")), this.$tableFooter.show(), clearTimeout(this.timeoutFooter_), this.timeoutFooter_ = setTimeout(a.proxy(this.fitFooter, this), this.$el.is(":hidden") ? 100 : 0))
	}, p.prototype.fitFooter = function () {
		var b, c, d;
		return clearTimeout(this.timeoutFooter_), this.$el.is(":hidden") ? void(this.timeoutFooter_ = setTimeout(a.proxy(this.fitFooter, this), 100)) : (c = this.$el.css("width"), d = c > this.$tableBody.width() ? g() : 0, this.$tableFooter.css({
			"margin-right": d
		}).find("table").css("width", c).attr("class", this.$el.attr("class")), b = this.$tableFooter.find("td"), void this.$body.find(">tr:first-child:not(.no-records-found) > *").each(function (c) {
			var d = a(this);
			b.eq(c).find(".fht-cell").width(d.innerWidth())
		}))
	}, p.prototype.toggleColumn = function (a, b, d) {
		if (a !== -1 && (this.columns[a].visible = b, this.initHeader(), this.initSearch(), this.initPagination(), this.initBody(), this.options.showColumns)) {
			var e = this.$toolbar.find(".keep-open input").prop("disabled", !1);
			d && e.filter(c('[value="%s"]', a)).prop("checked", b), e.filter(":checked").length <= this.options.minimumCountColumns && e.filter(":checked").prop("disabled", !0)
		}
	}, p.prototype.toggleRow = function (a, b, d) {
		a !== -1 && this.$body.find("undefined" != typeof a ? c('tr[data-index="%s"]', a) : c('tr[data-uniqueid="%s"]', b))[d ? "show" : "hide"]()
	}, p.prototype.getVisibleFields = function () {
		var b = this,
			c = [];
		return a.each(this.header.fields, function (a, d) {
			var f = b.columns[e(b.columns, d)];
			f.visible && c.push(d)
		}), c
	}, p.prototype.resetView = function (a) {
		var b = 0;
		if (a && a.height && (this.options.height = a.height), this.$selectAll.prop("checked", this.$selectItem.length > 0 && this.$selectItem.length === this.$selectItem.filter(":checked").length), this.options.height) {
			var c = k(this.$toolbar),
				d = k(this.$pagination),
				e = this.options.height - c - d;
			this.$tableContainer.css("height", e + "px")
		}
		return this.options.cardView ? (this.$el.css("margin-top", "0"), this.$tableContainer.css("padding-bottom", "0"), void this.$tableFooter.hide()) : (this.options.showHeader && this.options.height ? (this.$tableHeader.show(), this.resetHeader(), b += this.$header.outerHeight()) : (this.$tableHeader.hide(), this.trigger("post-header")), this.options.showFooter && (this.resetFooter(), this.options.height && (b += this.$tableFooter.outerHeight() + 1)), this.getCaret(), this.$tableContainer.css("padding-bottom", b + "px"), void this.trigger("reset-view"))
	}, p.prototype.getData = function (b) {
		return !this.searchText && a.isEmptyObject(this.filterColumns) && a.isEmptyObject(this.filterColumnsPartial) ? b ? this.options.data.slice(this.pageFrom - 1, this.pageTo) : this.options.data : b ? this.data.slice(this.pageFrom - 1, this.pageTo) : this.data
	}, p.prototype.load = function (b) {
		var c = !1;
		"server" === this.options.sidePagination ? (this.options.totalRows = b.total, c = b.fixedScroll, b = b[this.options.dataField]) : a.isArray(b) || (c = b.fixedScroll, b = b.data), this.initData(b), this.initSearch(), this.initPagination(), this.initBody(c)
	}, p.prototype.append = function (a) {
		this.initData(a, "append"), this.initSearch(), this.initPagination(), this.initSort(), this.initBody(!0)
	}, p.prototype.prepend = function (a) {
		this.initData(a, "prepend"), this.initSearch(), this.initPagination(), this.initSort(), this.initBody(!0)
	}, p.prototype.remove = function (b) {
		var c, d, e = this.options.data.length;
		if (b.hasOwnProperty("field") && b.hasOwnProperty("values")) {
			for (c = e - 1; c >= 0; c--) d = this.options.data[c], d.hasOwnProperty(b.field) && a.inArray(d[b.field], b.values) !== -1 && this.options.data.splice(c, 1);
			e !== this.options.data.length && (this.initSearch(), this.initPagination(), this.initSort(), this.initBody(!0))
		}
	}, p.prototype.removeAll = function () {
		this.options.data.length > 0 && (this.options.data.splice(0, this.options.data.length), this.initSearch(), this.initPagination(), this.initBody(!0))
	}, p.prototype.getRowByUniqueId = function (a) {
		var b, c, d, e = this.options.uniqueId,
			f = this.options.data.length,
			g = null;
		for (b = f - 1; b >= 0; b--) {
			if (c = this.options.data[b], c.hasOwnProperty(e)) d = c[e];
			else {
				if (!c._data.hasOwnProperty(e)) continue;
				d = c._data[e]
			}
			if ("string" == typeof d ? a = a.toString() : "number" == typeof d && (Number(d) === d && d % 1 === 0 ? a = parseInt(a) : d === Number(d) && 0 !== d && (a = parseFloat(a))), d === a) {
				g = c;
				break
			}
		}
		return g
	}, p.prototype.removeByUniqueId = function (a) {
		var b = this.options.data.length,
			c = this.getRowByUniqueId(a);
		c && this.options.data.splice(this.options.data.indexOf(c), 1), b !== this.options.data.length && (this.initSearch(), this.initPagination(), this.initBody(!0))
	}, p.prototype.updateByUniqueId = function (b) {
		var c = this,
			d = a.isArray(b) ? b : [b];
		a.each(d, function (b, d) {
			var e;
			d.hasOwnProperty("id") && d.hasOwnProperty("row") && (e = a.inArray(c.getRowByUniqueId(d.id), c.options.data), e !== -1 && a.extend(c.options.data[e], d.row))
		}), this.initSearch(), this.initSort(), this.initBody(!0)
	}, p.prototype.insertRow = function (a) {
		a.hasOwnProperty("index") && a.hasOwnProperty("row") && (this.data.splice(a.index, 0, a.row), this.initSearch(), this.initPagination(), this.initSort(), this.initBody(!0))
	}, p.prototype.updateRow = function (b) {
		var c = this,
			d = a.isArray(b) ? b : [b];
		a.each(d, function (b, d) {
			d.hasOwnProperty("index") && d.hasOwnProperty("row") && a.extend(c.options.data[d.index], d.row)
		}), this.initSearch(), this.initSort(), this.initBody(!0)
	}, p.prototype.showRow = function (a) {
		(a.hasOwnProperty("index") || a.hasOwnProperty("uniqueId")) && this.toggleRow(a.index, a.uniqueId, !0)
	}, p.prototype.hideRow = function (a) {
		(a.hasOwnProperty("index") || a.hasOwnProperty("uniqueId")) && this.toggleRow(a.index, a.uniqueId, !1)
	}, p.prototype.getRowsHidden = function (b) {
		var c = a(this.$body[0]).children().filter(":hidden"),
			d = 0;
		if (b)
			for (; d < c.length; d++) a(c[d]).show();
		return c
	}, p.prototype.mergeCells = function (b) {
		var c, d, e, f = b.index,
			g = a.inArray(b.field, this.getVisibleFields()),
			h = b.rowspan || 1,
			i = b.colspan || 1,
			j = this.$body.find(">tr");
		if (this.options.detailView && !this.options.cardView && (g += 1), e = j.eq(f).find(">td").eq(g), !(f < 0 || g < 0 || f >= this.data.length)) {
			for (c = f; c < f + h; c++)
				for (d = g; d < g + i; d++) j.eq(c).find(">td").eq(d).hide();
			e.attr("rowspan", h).attr("colspan", i).show()
		}
	}, p.prototype.updateCell = function (a) {
		a.hasOwnProperty("index") && a.hasOwnProperty("field") && a.hasOwnProperty("value") && (this.data[a.index][a.field] = a.value, a.reinit !== !1 && (this.initSort(), this.initBody(!0)))
	}, p.prototype.getOptions = function () {
		return this.options
	}, p.prototype.getSelections = function () {
		var b = this;
		return a.grep(this.options.data, function (a) {
			return a[b.header.stateField]
		})
	}, p.prototype.getAllSelections = function () {
		var b = this;
		return a.grep(this.options.data, function (a) {
			return a[b.header.stateField]
		})
	}, p.prototype.checkAll = function () {
		this.checkAll_(!0)
	}, p.prototype.uncheckAll = function () {
		this.checkAll_(!1)
	}, p.prototype.checkInvert = function () {
		var b = this,
			c = b.$selectItem.filter(":enabled"),
			d = c.filter(":checked");
		c.each(function () {
			a(this).prop("checked", !a(this).prop("checked"))
		}), b.updateRows(), b.updateSelected(), b.trigger("uncheck-some", d), d = b.getSelections(), b.trigger("check-some", d)
	}, p.prototype.checkAll_ = function (a) {
		var b;
		a || (b = this.getSelections()), this.$selectAll.add(this.$selectAll_).prop("checked", a), this.$selectItem.filter(":enabled").prop("checked", a), this.updateRows(), a && (b = this.getSelections()), this.trigger(a ? "check-all" : "uncheck-all", b)
	}, p.prototype.check = function (a) {
		this.check_(!0, a)
	}, p.prototype.uncheck = function (a) {
		this.check_(!1, a)
	}, p.prototype.check_ = function (a, b) {
		var d = this.$selectItem.filter(c('[data-index="%s"]', b)).prop("checked", a);
		this.data[b][this.header.stateField] = a, this.updateSelected(), this.trigger(a ? "check" : "uncheck", this.data[b], d)
	}, p.prototype.checkBy = function (a) {
		this.checkBy_(!0, a)
	}, p.prototype.uncheckBy = function (a) {
		this.checkBy_(!1, a)
	}, p.prototype.checkBy_ = function (b, d) {
		if (d.hasOwnProperty("field") && d.hasOwnProperty("values")) {
			var e = this,
				f = [];
			a.each(this.options.data, function (g, h) {
				if (!h.hasOwnProperty(d.field)) return !1;
				if (a.inArray(h[d.field], d.values) !== -1) {
					var i = e.$selectItem.filter(":enabled").filter(c('[data-index="%s"]', g)).prop("checked", b);
					h[e.header.stateField] = b, f.push(h), e.trigger(b ? "check" : "uncheck", h, i)
				}
			}), this.updateSelected(), this.trigger(b ? "check-some" : "uncheck-some", f)
		}
	}, p.prototype.destroy = function () {
		this.$el.insertBefore(this.$container), a(this.options.toolbar).insertBefore(this.$el), this.$container.next().remove(), this.$container.remove(), this.$el.html(this.$el_.html()).css("margin-top", "0").attr("class", this.$el_.attr("class") || "")
	}, p.prototype.showLoading = function () {
		this.$tableLoading.show()
	}, p.prototype.hideLoading = function () {
		this.$tableLoading.hide()
	}, p.prototype.togglePagination = function () {
		this.options.pagination = !this.options.pagination;
		var a = this.$toolbar.find('button[name="paginationSwitch"] i');
		this.options.pagination ? a.attr("class", this.options.iconsPrefix + " " + this.options.icons.paginationSwitchDown) : a.attr("class", this.options.iconsPrefix + " " + this.options.icons.paginationSwitchUp), this.updatePagination()
	}, p.prototype.refresh = function (a) {
		a && a.url && (this.options.pageNumber = 1), this.initServer(a && a.silent, a && a.query, a && a.url), this.trigger("refresh", a)
	}, p.prototype.resetWidth = function () {
		this.options.showHeader && this.options.height && this.fitHeader(), this.options.showFooter && this.fitFooter()
	}, p.prototype.showColumn = function (a) {
		this.toggleColumn(e(this.columns, a), !0, !0)
	}, p.prototype.hideColumn = function (a) {
		this.toggleColumn(e(this.columns, a), !1, !0)
	}, p.prototype.getHiddenColumns = function () {
		return a.grep(this.columns, function (a) {
			return !a.visible
		})
	}, p.prototype.getVisibleColumns = function () {
		return a.grep(this.columns, function (a) {
			return a.visible
		})
	}, p.prototype.toggleAllColumns = function (b) {
		if (a.each(this.columns, function (a, c) {
				this.columns[a].visible = b
			}), this.initHeader(), this.initSearch(), this.initPagination(), this.initBody(), this.options.showColumns) {
			var c = this.$toolbar.find(".keep-open input").prop("disabled", !1);
			c.filter(":checked").length <= this.options.minimumCountColumns && c.filter(":checked").prop("disabled", !0)
		}
	}, p.prototype.showAllColumns = function () {
		this.toggleAllColumns(!0)
	}, p.prototype.hideAllColumns = function () {
		this.toggleAllColumns(!1)
	}, p.prototype.filterBy = function (b) {
		this.filterColumns = a.isEmptyObject(b) ? {} : b, this.options.pageNumber = 1, this.initSearch(), this.updatePagination()
	}, p.prototype.scrollTo = function (a) {
		if ("string" == typeof a && (a = "bottom" === a ? this.$tableBody[0].scrollHeight : 0), "number" == typeof a && this.$tableBody.scrollTop(a), "undefined" == typeof a) return this.$tableBody.scrollTop()
	}, p.prototype.getScrollPosition = function () {
		return this.scrollTo()
	}, p.prototype.selectPage = function (a) {
		a > 0 && a <= this.options.totalPages && (this.options.pageNumber = a, this.updatePagination())
	}, p.prototype.prevPage = function () {
		this.options.pageNumber > 1 && (this.options.pageNumber--, this.updatePagination())
	}, p.prototype.nextPage = function () {
		this.options.pageNumber < this.options.totalPages && (this.options.pageNumber++, this.updatePagination())
	}, p.prototype.toggleView = function () {
		this.options.cardView = !this.options.cardView, this.initHeader(), this.initBody(), this.trigger("toggle", this.options.cardView)
	}, p.prototype.refreshOptions = function (b) {
		i(this.options, b, !0) || (this.options = a.extend(this.options, b), this.trigger("refresh-options", this.options), this.destroy(), this.init())
	}, p.prototype.resetSearch = function (a) {
		var b = this.$toolbar.find(".search input");
		b.val(a || ""), this.onSearch({
			currentTarget: b
		})
	}, p.prototype.expandRow_ = function (a, b) {
		var d = this.$body.find(c('> tr[data-index="%s"]', b));
		d.next().is("tr.detail-view") === !a && d.find("> td > .detail-icon").click()
	}, p.prototype.expandRow = function (a) {
		this.expandRow_(!0, a)
	}, p.prototype.collapseRow = function (a) {
		this.expandRow_(!1, a)
	}, p.prototype.expandAllRows = function (b) {
		if (b) {
			var d = this.$body.find(c('> tr[data-index="%s"]', 0)),
				e = this,
				f = null,
				g = !1,
				h = -1;
			if (d.next().is("tr.detail-view") ? d.next().next().is("tr.detail-view") || (d.next().find(".detail-icon").click(), g = !0) : (d.find("> td > .detail-icon").click(), g = !0), g) try {
				h = setInterval(function () {
					f = e.$body.find("tr.detail-view").last().find(".detail-icon"), f.length > 0 ? f.click() : clearInterval(h)
				}, 1)
			} catch (a) {
				clearInterval(h)
			}
		} else
			for (var i = this.$body.children(), j = 0; j < i.length; j++) this.expandRow_(!0, a(i[j]).data("index"))
	}, p.prototype.collapseAllRows = function (b) {
		if (b) this.expandRow_(!1, 0);
		else
			for (var c = this.$body.children(), d = 0; d < c.length; d++) this.expandRow_(!1, a(c[d]).data("index"))
	}, p.prototype.updateFormatText = function (a, b) {
		this.options[c("format%s", a)] && ("string" == typeof b ? this.options[c("format%s", a)] = function () {
			return b
		} : "function" == typeof b && (this.options[c("format%s", a)] = b)), this.initToolbar(), this.initPagination(), this.initBody()
	};
	var q = ["getOptions", "getSelections", "getAllSelections", "getData", "load", "append", "prepend", "remove", "removeAll", "insertRow", "updateRow", "updateCell", "updateByUniqueId", "removeByUniqueId", "getRowByUniqueId", "showRow", "hideRow", "getRowsHidden", "mergeCells", "checkAll", "uncheckAll", "checkInvert", "check", "uncheck", "checkBy", "uncheckBy", "refresh", "resetView", "resetWidth", "destroy", "showLoading", "hideLoading", "showColumn", "hideColumn", "getHiddenColumns", "getVisibleColumns", "showAllColumns", "hideAllColumns", "filterBy", "scrollTo", "getScrollPosition", "selectPage", "prevPage", "nextPage", "togglePagination", "toggleView", "refreshOptions", "resetSearch", "expandRow", "collapseRow", "expandAllRows", "collapseAllRows", "updateFormatText"];
	a.fn.bootstrapTable = function (b) {
		var c, d = Array.prototype.slice.call(arguments, 1);
		return this.each(function () {
			var e = a(this),
				f = e.data("bootstrap.table"),
				g = a.extend({}, p.DEFAULTS, e.data(), "object" == typeof b && b);
			if ("string" == typeof b) {
				if (a.inArray(b, q) < 0) throw new Error("Unknown method: " + b);
				if (!f) return;
				c = f[b].apply(f, d), "destroy" === b && e.removeData("bootstrap.table")
			}
			f || e.data("bootstrap.table", f = new p(this, g))
		}), "undefined" == typeof c ? this : c
	}, a.fn.bootstrapTable.Constructor = p, a.fn.bootstrapTable.defaults = p.DEFAULTS, a.fn.bootstrapTable.columnDefaults = p.COLUMN_DEFAULTS, a.fn.bootstrapTable.locales = p.LOCALES, a.fn.bootstrapTable.methods = q, a.fn.bootstrapTable.utils = {
		sprintf: c,
		getFieldIndex: e,
		compareObjects: i,
		calculateObjectValue: h,
		getItemField: m,
		objectKeys: o,
		isIEBrowser: n
	}, a(function () {
		a('[data-toggle="table"]').bootstrapTable()
	})
}(jQuery),
function (a) {
	"use strict";
	var b = function (b) {
		var c = a.Deferred(),
			d = new FileReader;
		return d.onload = function (a) {
			c.resolve(a.target.result)
		}, d.onerror = c.reject, d.onprogress = c.notify, d.readAsDataURL(b), c.promise()
	};
	a.fn.cleanHtml = function () {
		var b = a(this).html();
		return b && b.replace(/(<br>|\s|<div><br><\/div>|&nbsp;)*$/, "")
	}, a.fn.wysiwyg = function (c) {
		var d, e, f, g = this,
			h = function () {
				e.activeToolbarClass && a(e.toolbarSelector).find(f).each(function () {
					var b = a(this).data(e.commandRole);
					document.queryCommandState(b) ? a(this).addClass(e.activeToolbarClass) : a(this).removeClass(e.activeToolbarClass)
				})
			},
			i = function (a, b) {
				var c = a.split(" "),
					d = c.shift(),
					e = c.join(" ") + (b || "");
				document.execCommand(d, 0, e), h()
			},
			j = function (b) {
				a.each(b, function (a, b) {
					g.keydown(a, function (a) {
						g.attr("contenteditable") && g.is(":visible") && (a.preventDefault(), a.stopPropagation(), i(b))
					}).keyup(a, function (a) {
						g.attr("contenteditable") && g.is(":visible") && (a.preventDefault(), a.stopPropagation())
					})
				})
			},
			k = function () {
				var a = window.getSelection();
				if (a.getRangeAt && a.rangeCount) return a.getRangeAt(0)
			},
			l = function () {
				d = k()
			},
			m = function () {
				var a = window.getSelection();
				if (d) {
					try {
						a.removeAllRanges()
					} catch (a) {
						document.body.createTextRange().select(), document.selection.empty()
					}
					a.addRange(d)
				}
			},
			n = function (c) {
				g.focus(), a.each(c, function (c, d) {
					/^image\//.test(d.type) ? a.when(b(d)).done(function (a) {
						i("insertimage", a)
					}).fail(function (a) {
						e.fileUploadError("file-reader", a)
					}) : e.fileUploadError("unsupported-file-type", d.type)
				})
			},
			o = function (a, b) {
				m(), document.queryCommandSupported("hiliteColor") && document.execCommand("hiliteColor", 0, b || "transparent"), l(), a.data(e.selectionMarker, b)
			},
			p = function (b, c) {
				b.find(f).click(function () {
					m(), g.focus(), i(a(this).data(c.commandRole)), l()
				}), b.find("[data-toggle=dropdown]").click(m), b.find("input[type=text][data-" + c.commandRole + "]").on("webkitspeechchange change", function () {
					var b = this.value;
					this.value = "", m(), b && (g.focus(), i(a(this).data(c.commandRole), b)), l()
				}).on("focus", function () {
					var b = a(this);
					b.data(c.selectionMarker) || (o(b, c.selectionColor), b.focus())
				}).on("blur", function () {
					var b = a(this);
					b.data(c.selectionMarker) && o(b, !1)
				}), b.find("input[type=file][data-" + c.commandRole + "]").change(function () {
					m(), "file" === this.type && this.files && this.files.length > 0 && n(this.files), l(), this.value = ""
				})
			},
			q = function () {
				g.on("dragenter dragover", !1).on("drop", function (a) {
					var b = a.originalEvent.dataTransfer;
					a.stopPropagation(), a.preventDefault(), b && b.files && b.files.length > 0 && n(b.files)
				})
			};
		return e = a.extend({}, a.fn.wysiwyg.defaults, c), f = "a[data-" + e.commandRole + "],button[data-" + e.commandRole + "],input[type=button][data-" + e.commandRole + "]", j(e.hotKeys), e.dragAndDropImages && q(), p(a(e.toolbarSelector), e), g.attr("contenteditable", !0).on("mouseup keyup mouseout", function () {
			l(), h()
		}), a(window).bind("touchend", function (a) {
			var b = g.is(a.target) || g.has(a.target).length > 0,
				c = k(),
				d = c && c.startContainer === c.endContainer && c.startOffset === c.endOffset;
			d && !b || (l(), h())
		}), this
	}, a.fn.wysiwyg.defaults = {
		hotKeys: {
			"ctrl+b meta+b": "bold",
			"ctrl+i meta+i": "italic",
			"ctrl+u meta+u": "underline",
			"ctrl+z meta+z": "undo",
			"ctrl+y meta+y meta+shift+z": "redo",
			"ctrl+l meta+l": "justifyleft",
			"ctrl+r meta+r": "justifyright",
			"ctrl+e meta+e": "justifycenter",
			"ctrl+j meta+j": "justifyfull",
			"shift+tab": "outdent",
			tab: "indent"
		},
		toolbarSelector: "[data-role=editor-toolbar]",
		commandRole: "edit",
		activeToolbarClass: "btn-info",
		selectionMarker: "edit-focus-marker",
		selectionColor: "darkgrey",
		dragAndDropImages: !0,
		fileUploadError: function (a, b) {
			console.log("File upload error", a, b)
		}
	}
}(window.jQuery),
/*!
 * Chart.js
 * http://chartjs.org/
 * Version: 2.1.6
 *
 * Copyright 2016 Nick Downie
 * Released under the MIT license
 * https://github.com/chartjs/Chart.js/blob/master/LICENSE.md
 */
function (a) {
	if ("object" == typeof exports && "undefined" != typeof module) module.exports = a();
	else if ("function" == typeof define && define.amd) define([], a);
	else {
		var b;
		b = "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this, b.Chart = a()
	}
}(function () {
	return function a(b, c, d) {
		function e(g, h) {
			if (!c[g]) {
				if (!b[g]) {
					var i = "function" == typeof require && require;
					if (!h && i) return i(g, !0);
					if (f) return f(g, !0);
					var j = new Error("Cannot find module '" + g + "'");
					throw j.code = "MODULE_NOT_FOUND", j
				}
				var k = c[g] = {
					exports: {}
				};
				b[g][0].call(k.exports, function (a) {
					var c = b[g][1][a];
					return e(c ? c : a)
				}, k, k.exports, a, b, c, d)
			}
			return c[g].exports
		}
		for (var f = "function" == typeof require && require, g = 0; g < d.length; g++) e(d[g]);
		return e
	}({
		1: [function (a, b, c) {}, {}],
		2: [function (a, b, c) {
			function d(a) {
				if (a) {
					var b = /^#([a-fA-F0-9]{3})$/,
						c = /^#([a-fA-F0-9]{6})$/,
						d = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/,
						e = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/,
						f = /(\w+)/,
						g = [0, 0, 0],
						h = 1,
						i = a.match(b);
					if (i) {
						i = i[1];
						for (var j = 0; j < g.length; j++) g[j] = parseInt(i[j] + i[j], 16)
					} else if (i = a.match(c)) {
						i = i[1];
						for (var j = 0; j < g.length; j++) g[j] = parseInt(i.slice(2 * j, 2 * j + 2), 16)
					} else if (i = a.match(d)) {
						for (var j = 0; j < g.length; j++) g[j] = parseInt(i[j + 1]);
						h = parseFloat(i[4])
					} else if (i = a.match(e)) {
						for (var j = 0; j < g.length; j++) g[j] = Math.round(2.55 * parseFloat(i[j + 1]));
						h = parseFloat(i[4])
					} else if (i = a.match(f)) {
						if ("transparent" == i[1]) return [0, 0, 0, 0];
						if (g = u[i[1]], !g) return
					}
					for (var j = 0; j < g.length; j++) g[j] = s(g[j], 0, 255);
					return h = h || 0 == h ? s(h, 0, 1) : 1, g[3] = h, g
				}
			}

			function e(a) {
				if (a) {
					var b = /^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/,
						c = a.match(b);
					if (c) {
						var d = parseFloat(c[4]),
							e = s(parseInt(c[1]), 0, 360),
							f = s(parseFloat(c[2]), 0, 100),
							g = s(parseFloat(c[3]), 0, 100),
							h = s(isNaN(d) ? 1 : d, 0, 1);
						return [e, f, g, h]
					}
				}
			}

			function f(a) {
				if (a) {
					var b = /^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/,
						c = a.match(b);
					if (c) {
						var d = parseFloat(c[4]),
							e = s(parseInt(c[1]), 0, 360),
							f = s(parseFloat(c[2]), 0, 100),
							g = s(parseFloat(c[3]), 0, 100),
							h = s(isNaN(d) ? 1 : d, 0, 1);
						return [e, f, g, h]
					}
				}
			}

			function g(a) {
				var b = d(a);
				return b && b.slice(0, 3)
			}

			function h(a) {
				var b = e(a);
				return b && b.slice(0, 3)
			}

			function i(a) {
				var b = d(a);
				return b ? b[3] : (b = e(a)) ? b[3] : (b = f(a)) ? b[3] : void 0
			}

			function j(a) {
				return "#" + t(a[0]) + t(a[1]) + t(a[2])
			}

			function k(a, b) {
				return b < 1 || a[3] && a[3] < 1 ? l(a, b) : "rgb(" + a[0] + ", " + a[1] + ", " + a[2] + ")"
			}

			function l(a, b) {
				return void 0 === b && (b = void 0 !== a[3] ? a[3] : 1), "rgba(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + b + ")"
			}

			function m(a, b) {
				if (b < 1 || a[3] && a[3] < 1) return n(a, b);
				var c = Math.round(a[0] / 255 * 100),
					d = Math.round(a[1] / 255 * 100),
					e = Math.round(a[2] / 255 * 100);
				return "rgb(" + c + "%, " + d + "%, " + e + "%)"
			}

			function n(a, b) {
				var c = Math.round(a[0] / 255 * 100),
					d = Math.round(a[1] / 255 * 100),
					e = Math.round(a[2] / 255 * 100);
				return "rgba(" + c + "%, " + d + "%, " + e + "%, " + (b || a[3] || 1) + ")"
			}

			function o(a, b) {
				return b < 1 || a[3] && a[3] < 1 ? p(a, b) : "hsl(" + a[0] + ", " + a[1] + "%, " + a[2] + "%)"
			}

			function p(a, b) {
				return void 0 === b && (b = void 0 !== a[3] ? a[3] : 1), "hsla(" + a[0] + ", " + a[1] + "%, " + a[2] + "%, " + b + ")"
			}

			function q(a, b) {
				return void 0 === b && (b = void 0 !== a[3] ? a[3] : 1), "hwb(" + a[0] + ", " + a[1] + "%, " + a[2] + "%" + (void 0 !== b && 1 !== b ? ", " + b : "") + ")"
			}

			function r(a) {
				return v[a.slice(0, 3)]
			}

			function s(a, b, c) {
				return Math.min(Math.max(b, a), c)
			}

			function t(a) {
				var b = a.toString(16).toUpperCase();
				return b.length < 2 ? "0" + b : b
			}
			var u = a(6);
			b.exports = {
				getRgba: d,
				getHsla: e,
				getRgb: g,
				getHsl: h,
				getHwb: f,
				getAlpha: i,
				hexString: j,
				rgbString: k,
				rgbaString: l,
				percentString: m,
				percentaString: n,
				hslString: o,
				hslaString: p,
				hwbString: q,
				keyword: r
			};
			var v = {};
			for (var w in u) v[u[w]] = w
		}, {
			6: 6
		}],
		3: [function (a, b, c) {
			var d = a(5),
				e = a(2),
				f = function (a) {
					if (a instanceof f) return a;
					if (!(this instanceof f)) return new f(a);
					this.values = {
						rgb: [0, 0, 0],
						hsl: [0, 0, 0],
						hsv: [0, 0, 0],
						hwb: [0, 0, 0],
						cmyk: [0, 0, 0, 0],
						alpha: 1
					};
					var b;
					if ("string" == typeof a)
						if (b = e.getRgba(a)) this.setValues("rgb", b);
						else if (b = e.getHsla(a)) this.setValues("hsl", b);
					else {
						if (!(b = e.getHwb(a))) throw new Error('Unable to parse color from string "' + a + '"');
						this.setValues("hwb", b)
					} else if ("object" == typeof a)
						if (b = a, void 0 !== b.r || void 0 !== b.red) this.setValues("rgb", b);
						else if (void 0 !== b.l || void 0 !== b.lightness) this.setValues("hsl", b);
					else if (void 0 !== b.v || void 0 !== b.value) this.setValues("hsv", b);
					else if (void 0 !== b.w || void 0 !== b.whiteness) this.setValues("hwb", b);
					else {
						if (void 0 === b.c && void 0 === b.cyan) throw new Error("Unable to parse color from object " + JSON.stringify(a));
						this.setValues("cmyk", b)
					}
				};
			f.prototype = {
				rgb: function () {
					return this.setSpace("rgb", arguments)
				},
				hsl: function () {
					return this.setSpace("hsl", arguments)
				},
				hsv: function () {
					return this.setSpace("hsv", arguments)
				},
				hwb: function () {
					return this.setSpace("hwb", arguments)
				},
				cmyk: function () {
					return this.setSpace("cmyk", arguments)
				},
				rgbArray: function () {
					return this.values.rgb
				},
				hslArray: function () {
					return this.values.hsl
				},
				hsvArray: function () {
					return this.values.hsv
				},
				hwbArray: function () {
					var a = this.values;
					return 1 !== a.alpha ? a.hwb.concat([a.alpha]) : a.hwb
				},
				cmykArray: function () {
					return this.values.cmyk
				},
				rgbaArray: function () {
					var a = this.values;
					return a.rgb.concat([a.alpha])
				},
				hslaArray: function () {
					var a = this.values;
					return a.hsl.concat([a.alpha])
				},
				alpha: function (a) {
					return void 0 === a ? this.values.alpha : (this.setValues("alpha", a), this)
				},
				red: function (a) {
					return this.setChannel("rgb", 0, a)
				},
				green: function (a) {
					return this.setChannel("rgb", 1, a)
				},
				blue: function (a) {
					return this.setChannel("rgb", 2, a)
				},
				hue: function (a) {
					return a && (a %= 360, a = a < 0 ? 360 + a : a), this.setChannel("hsl", 0, a)
				},
				saturation: function (a) {
					return this.setChannel("hsl", 1, a)
				},
				lightness: function (a) {
					return this.setChannel("hsl", 2, a)
				},
				saturationv: function (a) {
					return this.setChannel("hsv", 1, a)
				},
				whiteness: function (a) {
					return this.setChannel("hwb", 1, a)
				},
				blackness: function (a) {
					return this.setChannel("hwb", 2, a)
				},
				value: function (a) {
					return this.setChannel("hsv", 2, a)
				},
				cyan: function (a) {
					return this.setChannel("cmyk", 0, a)
				},
				magenta: function (a) {
					return this.setChannel("cmyk", 1, a)
				},
				yellow: function (a) {
					return this.setChannel("cmyk", 2, a)
				},
				black: function (a) {
					return this.setChannel("cmyk", 3, a)
				},
				hexString: function () {
					return e.hexString(this.values.rgb)
				},
				rgbString: function () {
					return e.rgbString(this.values.rgb, this.values.alpha)
				},
				rgbaString: function () {
					return e.rgbaString(this.values.rgb, this.values.alpha)
				},
				percentString: function () {
					return e.percentString(this.values.rgb, this.values.alpha)
				},
				hslString: function () {
					return e.hslString(this.values.hsl, this.values.alpha)
				},
				hslaString: function () {
					return e.hslaString(this.values.hsl, this.values.alpha)
				},
				hwbString: function () {
					return e.hwbString(this.values.hwb, this.values.alpha)
				},
				keyword: function () {
					return e.keyword(this.values.rgb, this.values.alpha)
				},
				rgbNumber: function () {
					var a = this.values.rgb;
					return a[0] << 16 | a[1] << 8 | a[2]
				},
				luminosity: function () {
					for (var a = this.values.rgb, b = [], c = 0; c < a.length; c++) {
						var d = a[c] / 255;
						b[c] = d <= .03928 ? d / 12.92 : Math.pow((d + .055) / 1.055, 2.4)
					}
					return .2126 * b[0] + .7152 * b[1] + .0722 * b[2]
				},
				contrast: function (a) {
					var b = this.luminosity(),
						c = a.luminosity();
					return b > c ? (b + .05) / (c + .05) : (c + .05) / (b + .05)
				},
				level: function (a) {
					var b = this.contrast(a);
					return b >= 7.1 ? "AAA" : b >= 4.5 ? "AA" : ""
				},
				dark: function () {
					var a = this.values.rgb,
						b = (299 * a[0] + 587 * a[1] + 114 * a[2]) / 1e3;
					return b < 128
				},
				light: function () {
					return !this.dark()
				},
				negate: function () {
					for (var a = [], b = 0; b < 3; b++) a[b] = 255 - this.values.rgb[b];
					return this.setValues("rgb", a), this
				},
				lighten: function (a) {
					var b = this.values.hsl;
					return b[2] += b[2] * a, this.setValues("hsl", b), this
				},
				darken: function (a) {
					var b = this.values.hsl;
					return b[2] -= b[2] * a, this.setValues("hsl", b), this
				},
				saturate: function (a) {
					var b = this.values.hsl;
					return b[1] += b[1] * a, this.setValues("hsl", b), this
				},
				desaturate: function (a) {
					var b = this.values.hsl;
					return b[1] -= b[1] * a, this.setValues("hsl", b), this
				},
				whiten: function (a) {
					var b = this.values.hwb;
					return b[1] += b[1] * a, this.setValues("hwb", b), this
				},
				blacken: function (a) {
					var b = this.values.hwb;
					return b[2] += b[2] * a, this.setValues("hwb", b), this
				},
				greyscale: function () {
					var a = this.values.rgb,
						b = .3 * a[0] + .59 * a[1] + .11 * a[2];
					return this.setValues("rgb", [b, b, b]), this
				},
				clearer: function (a) {
					var b = this.values.alpha;
					return this.setValues("alpha", b - b * a), this
				},
				opaquer: function (a) {
					var b = this.values.alpha;
					return this.setValues("alpha", b + b * a), this
				},
				rotate: function (a) {
					var b = this.values.hsl,
						c = (b[0] + a) % 360;
					return b[0] = c < 0 ? 360 + c : c, this.setValues("hsl", b), this
				},
				mix: function (a, b) {
					var c = this,
						d = a,
						e = void 0 === b ? .5 : b,
						f = 2 * e - 1,
						g = c.alpha() - d.alpha(),
						h = ((f * g === -1 ? f : (f + g) / (1 + f * g)) + 1) / 2,
						i = 1 - h;
					return this.rgb(h * c.red() + i * d.red(), h * c.green() + i * d.green(), h * c.blue() + i * d.blue()).alpha(c.alpha() * e + d.alpha() * (1 - e))
				},
				toJSON: function () {
					return this.rgb()
				},
				clone: function () {
					var a, b, c = new f,
						d = this.values,
						e = c.values;
					for (var g in d) d.hasOwnProperty(g) && (a = d[g], b = {}.toString.call(a), "[object Array]" === b ? e[g] = a.slice(0) : "[object Number]" === b ? e[g] = a : console.error("unexpected color value:", a));
					return c
				}
			}, f.prototype.spaces = {
				rgb: ["red", "green", "blue"],
				hsl: ["hue", "saturation", "lightness"],
				hsv: ["hue", "saturation", "value"],
				hwb: ["hue", "whiteness", "blackness"],
				cmyk: ["cyan", "magenta", "yellow", "black"]
			}, f.prototype.maxes = {
				rgb: [255, 255, 255],
				hsl: [360, 100, 100],
				hsv: [360, 100, 100],
				hwb: [360, 100, 100],
				cmyk: [100, 100, 100, 100]
			}, f.prototype.getValues = function (a) {
				for (var b = this.values, c = {}, d = 0; d < a.length; d++) c[a.charAt(d)] = b[a][d];
				return 1 !== b.alpha && (c.a = b.alpha), c
			}, f.prototype.setValues = function (a, b) {
				var c, e = this.values,
					f = this.spaces,
					g = this.maxes,
					h = 1;
				if ("alpha" === a) h = b;
				else if (b.length) e[a] = b.slice(0, a.length), h = b[a.length];
				else if (void 0 !== b[a.charAt(0)]) {
					for (c = 0; c < a.length; c++) e[a][c] = b[a.charAt(c)];
					h = b.a
				} else if (void 0 !== b[f[a][0]]) {
					var i = f[a];
					for (c = 0; c < a.length; c++) e[a][c] = b[i[c]];
					h = b.alpha
				}
				if (e.alpha = Math.max(0, Math.min(1, void 0 === h ? e.alpha : h)), "alpha" === a) return !1;
				var j;
				for (c = 0; c < a.length; c++) j = Math.max(0, Math.min(g[a][c], e[a][c])), e[a][c] = Math.round(j);
				for (var k in f) k !== a && (e[k] = d[a][k](e[a]));
				return !0
			}, f.prototype.setSpace = function (a, b) {
				var c = b[0];
				return void 0 === c ? this.getValues(a) : ("number" == typeof c && (c = Array.prototype.slice.call(b)), this.setValues(a, c), this)
			}, f.prototype.setChannel = function (a, b, c) {
				var d = this.values[a];
				return void 0 === c ? d[b] : c === d[b] ? this : (d[b] = c, this.setValues(a, d), this)
			}, "undefined" != typeof window && (window.Color = f), b.exports = f
		}, {
			2: 2,
			5: 5
		}],
		4: [function (a, c, d) {
			function e(a) {
				var b, c, d, e = a[0] / 255,
					f = a[1] / 255,
					g = a[2] / 255,
					h = Math.min(e, f, g),
					i = Math.max(e, f, g),
					j = i - h;
				return i == h ? b = 0 : e == i ? b = (f - g) / j : f == i ? b = 2 + (g - e) / j : g == i && (b = 4 + (e - f) / j), b = Math.min(60 * b, 360), b < 0 && (b += 360), d = (h + i) / 2, c = i == h ? 0 : d <= .5 ? j / (i + h) : j / (2 - i - h), [b, 100 * c, 100 * d]
			}

			function f(a) {
				var b, c, d, e = a[0],
					f = a[1],
					g = a[2],
					h = Math.min(e, f, g),
					i = Math.max(e, f, g),
					j = i - h;
				return c = 0 == i ? 0 : j / i * 1e3 / 10, i == h ? b = 0 : e == i ? b = (f - g) / j : f == i ? b = 2 + (g - e) / j : g == i && (b = 4 + (e - f) / j), b = Math.min(60 * b, 360), b < 0 && (b += 360), d = i / 255 * 1e3 / 10, [b, c, d]
			}

			function h(a) {
				var b = a[0],
					c = a[1],
					d = a[2],
					f = e(a)[0],
					g = 1 / 255 * Math.min(b, Math.min(c, d)),
					d = 1 - 1 / 255 * Math.max(b, Math.max(c, d));
				return [f, 100 * g, 100 * d]
			}

			function i(a) {
				var b, c, d, e, f = a[0] / 255,
					g = a[1] / 255,
					h = a[2] / 255;
				return e = Math.min(1 - f, 1 - g, 1 - h), b = (1 - f - e) / (1 - e) || 0, c = (1 - g - e) / (1 - e) || 0, d = (1 - h - e) / (1 - e) || 0, [100 * b, 100 * c, 100 * d, 100 * e]
			}

			function j(a) {
				return Z[JSON.stringify(a)]
			}

			function k(a) {
				var b = a[0] / 255,
					c = a[1] / 255,
					d = a[2] / 255;
				b = b > .04045 ? Math.pow((b + .055) / 1.055, 2.4) : b / 12.92, c = c > .04045 ? Math.pow((c + .055) / 1.055, 2.4) : c / 12.92, d = d > .04045 ? Math.pow((d + .055) / 1.055, 2.4) : d / 12.92;
				var e = .4124 * b + .3576 * c + .1805 * d,
					f = .2126 * b + .7152 * c + .0722 * d,
					g = .0193 * b + .1192 * c + .9505 * d;
				return [100 * e, 100 * f, 100 * g]
			}

			function l(a) {
				var b, c, d, e = k(a),
					f = e[0],
					g = e[1],
					h = e[2];
				return f /= 95.047, g /= 100, h /= 108.883, f = f > .008856 ? Math.pow(f, 1 / 3) : 7.787 * f + 16 / 116, g = g > .008856 ? Math.pow(g, 1 / 3) : 7.787 * g + 16 / 116, h = h > .008856 ? Math.pow(h, 1 / 3) : 7.787 * h + 16 / 116, b = 116 * g - 16, c = 500 * (f - g), d = 200 * (g - h), [b, c, d]
			}

			function m(a) {
				return M(l(a))
			}

			function n(a) {
				var b, c, d, e, f, g = a[0] / 360,
					h = a[1] / 100,
					i = a[2] / 100;
				if (0 == h) return f = 255 * i, [f, f, f];
				c = i < .5 ? i * (1 + h) : i + h - i * h, b = 2 * i - c, e = [0, 0, 0];
				for (var j = 0; j < 3; j++) d = g + 1 / 3 * -(j - 1), d < 0 && d++, d > 1 && d--, f = 6 * d < 1 ? b + 6 * (c - b) * d : 2 * d < 1 ? c : 3 * d < 2 ? b + (c - b) * (2 / 3 - d) * 6 : b, e[j] = 255 * f;
				return e
			}

			function o(a) {
				var b, c, d = a[0],
					e = a[1] / 100,
					f = a[2] / 100;
				return 0 === f ? [0, 0, 0] : (f *= 2, e *= f <= 1 ? f : 2 - f, c = (f + e) / 2, b = 2 * e / (f + e), [d, 100 * b, 100 * c])
			}

			function p(a) {
				return h(n(a))
			}

			function q(a) {
				return i(n(a))
			}

			function s(a) {
				return j(n(a))
			}

			function t(a) {
				var b = a[0] / 60,
					c = a[1] / 100,
					d = a[2] / 100,
					e = Math.floor(b) % 6,
					f = b - Math.floor(b),
					g = 255 * d * (1 - c),
					h = 255 * d * (1 - c * f),
					i = 255 * d * (1 - c * (1 - f)),
					d = 255 * d;
				switch (e) {
					case 0:
						return [d, i, g];
					case 1:
						return [h, d, g];
					case 2:
						return [g, d, i];
					case 3:
						return [g, h, d];
					case 4:
						return [i, g, d];
					case 5:
						return [d, g, h]
				}
			}

			function u(a) {
				var b, c, d = a[0],
					e = a[1] / 100,
					f = a[2] / 100;
				return c = (2 - e) * f, b = e * f, b /= c <= 1 ? c : 2 - c, b = b || 0, c /= 2, [d, 100 * b, 100 * c]
			}

			function v(a) {
				return h(t(a))
			}

			function w(a) {
				return i(t(a))
			}

			function x(a) {
				return j(t(a))
			}

			function y(a) {
				var c, d, e, f, h = a[0] / 360,
					i = a[1] / 100,
					j = a[2] / 100,
					k = i + j;
				switch (k > 1 && (i /= k, j /= k), c = Math.floor(6 * h), d = 1 - j, e = 6 * h - c, 0 != (1 & c) && (e = 1 - e), f = i + e * (d - i), c) {
					default:
						case 6:
						case 0:
						r = d,
					g = f,
					b = i;
					break;
					case 1:
							r = f,
						g = d,
						b = i;
						break;
					case 2:
							r = i,
						g = d,
						b = f;
						break;
					case 3:
							r = i,
						g = f,
						b = d;
						break;
					case 4:
							r = f,
						g = i,
						b = d;
						break;
					case 5:
							r = d,
						g = i,
						b = f
				}
				return [255 * r, 255 * g, 255 * b]
			}

			function z(a) {
				return e(y(a))
			}

			function A(a) {
				return f(y(a))
			}

			function B(a) {
				return i(y(a))
			}

			function C(a) {
				return j(y(a))
			}

			function D(a) {
				var b, c, d, e = a[0] / 100,
					f = a[1] / 100,
					g = a[2] / 100,
					h = a[3] / 100;
				return b = 1 - Math.min(1, e * (1 - h) + h), c = 1 - Math.min(1, f * (1 - h) + h), d = 1 - Math.min(1, g * (1 - h) + h), [255 * b, 255 * c, 255 * d]
			}

			function E(a) {
				return e(D(a))
			}

			function F(a) {
				return f(D(a))
			}

			function G(a) {
				return h(D(a))
			}

			function H(a) {
				return j(D(a))
			}

			function I(a) {
				var b, c, d, e = a[0] / 100,
					f = a[1] / 100,
					g = a[2] / 100;
				return b = 3.2406 * e + f * -1.5372 + g * -.4986, c = e * -.9689 + 1.8758 * f + .0415 * g, d = .0557 * e + f * -.204 + 1.057 * g, b = b > .0031308 ? 1.055 * Math.pow(b, 1 / 2.4) - .055 : b *= 12.92, c = c > .0031308 ? 1.055 * Math.pow(c, 1 / 2.4) - .055 : c *= 12.92, d = d > .0031308 ? 1.055 * Math.pow(d, 1 / 2.4) - .055 : d *= 12.92, b = Math.min(Math.max(0, b), 1), c = Math.min(Math.max(0, c), 1), d = Math.min(Math.max(0, d), 1), [255 * b, 255 * c, 255 * d]
			}

			function J(a) {
				var b, c, d, e = a[0],
					f = a[1],
					g = a[2];
				return e /= 95.047, f /= 100, g /= 108.883, e = e > .008856 ? Math.pow(e, 1 / 3) : 7.787 * e + 16 / 116, f = f > .008856 ? Math.pow(f, 1 / 3) : 7.787 * f + 16 / 116, g = g > .008856 ? Math.pow(g, 1 / 3) : 7.787 * g + 16 / 116, b = 116 * f - 16, c = 500 * (e - f), d = 200 * (f - g), [b, c, d]
			}

			function K(a) {
				return M(J(a))
			}

			function L(a) {
				var b, c, d, e, f = a[0],
					g = a[1],
					h = a[2];
				return f <= 8 ? (c = 100 * f / 903.3, e = 7.787 * (c / 100) + 16 / 116) : (c = 100 * Math.pow((f + 16) / 116, 3), e = Math.pow(c / 100, 1 / 3)), b = b / 95.047 <= .008856 ? b = 95.047 * (g / 500 + e - 16 / 116) / 7.787 : 95.047 * Math.pow(g / 500 + e, 3), d = d / 108.883 <= .008859 ? d = 108.883 * (e - h / 200 - 16 / 116) / 7.787 : 108.883 * Math.pow(e - h / 200, 3), [b, c, d]
			}

			function M(a) {
				var b, c, d, e = a[0],
					f = a[1],
					g = a[2];
				return b = Math.atan2(g, f), c = 360 * b / 2 / Math.PI, c < 0 && (c += 360), d = Math.sqrt(f * f + g * g), [e, d, c]
			}

			function N(a) {
				return I(L(a))
			}

			function O(a) {
				var b, c, d, e = a[0],
					f = a[1],
					g = a[2];
				return d = g / 360 * 2 * Math.PI, b = f * Math.cos(d), c = f * Math.sin(d), [e, b, c]
			}

			function P(a) {
				return L(O(a))
			}

			function Q(a) {
				return N(O(a))
			}

			function R(a) {
				return Y[a]
			}

			function S(a) {
				return e(R(a))
			}

			function T(a) {
				return f(R(a))
			}

			function U(a) {
				return h(R(a))
			}

			function V(a) {
				return i(R(a))
			}

			function W(a) {
				return l(R(a))
			}

			function X(a) {
				return k(R(a))
			}
			c.exports = {
				rgb2hsl: e,
				rgb2hsv: f,
				rgb2hwb: h,
				rgb2cmyk: i,
				rgb2keyword: j,
				rgb2xyz: k,
				rgb2lab: l,
				rgb2lch: m,
				hsl2rgb: n,
				hsl2hsv: o,
				hsl2hwb: p,
				hsl2cmyk: q,
				hsl2keyword: s,
				hsv2rgb: t,
				hsv2hsl: u,
				hsv2hwb: v,
				hsv2cmyk: w,
				hsv2keyword: x,
				hwb2rgb: y,
				hwb2hsl: z,
				hwb2hsv: A,
				hwb2cmyk: B,
				hwb2keyword: C,
				cmyk2rgb: D,
				cmyk2hsl: E,
				cmyk2hsv: F,
				cmyk2hwb: G,
				cmyk2keyword: H,
				keyword2rgb: R,
				keyword2hsl: S,
				keyword2hsv: T,
				keyword2hwb: U,
				keyword2cmyk: V,
				keyword2lab: W,
				keyword2xyz: X,
				xyz2rgb: I,
				xyz2lab: J,
				xyz2lch: K,
				lab2xyz: L,
				lab2rgb: N,
				lab2lch: M,
				lch2lab: O,
				lch2xyz: P,
				lch2rgb: Q
			};
			var Y = {
					aliceblue: [240, 248, 255],
					antiquewhite: [250, 235, 215],
					aqua: [0, 255, 255],
					aquamarine: [127, 255, 212],
					azure: [240, 255, 255],
					beige: [245, 245, 220],
					bisque: [255, 228, 196],
					black: [0, 0, 0],
					blanchedalmond: [255, 235, 205],
					blue: [0, 0, 255],
					blueviolet: [138, 43, 226],
					brown: [165, 42, 42],
					burlywood: [222, 184, 135],
					cadetblue: [95, 158, 160],
					chartreuse: [127, 255, 0],
					chocolate: [210, 105, 30],
					coral: [255, 127, 80],
					cornflowerblue: [100, 149, 237],
					cornsilk: [255, 248, 220],
					crimson: [220, 20, 60],
					cyan: [0, 255, 255],
					darkblue: [0, 0, 139],
					darkcyan: [0, 139, 139],
					darkgoldenrod: [184, 134, 11],
					darkgray: [169, 169, 169],
					darkgreen: [0, 100, 0],
					darkgrey: [169, 169, 169],
					darkkhaki: [189, 183, 107],
					darkmagenta: [139, 0, 139],
					darkolivegreen: [85, 107, 47],
					darkorange: [255, 140, 0],
					darkorchid: [153, 50, 204],
					darkred: [139, 0, 0],
					darksalmon: [233, 150, 122],
					darkseagreen: [143, 188, 143],
					darkslateblue: [72, 61, 139],
					darkslategray: [47, 79, 79],
					darkslategrey: [47, 79, 79],
					darkturquoise: [0, 206, 209],
					darkviolet: [148, 0, 211],
					deeppink: [255, 20, 147],
					deepskyblue: [0, 191, 255],
					dimgray: [105, 105, 105],
					dimgrey: [105, 105, 105],
					dodgerblue: [30, 144, 255],
					firebrick: [178, 34, 34],
					floralwhite: [255, 250, 240],
					forestgreen: [34, 139, 34],
					fuchsia: [255, 0, 255],
					gainsboro: [220, 220, 220],
					ghostwhite: [248, 248, 255],
					gold: [255, 215, 0],
					goldenrod: [218, 165, 32],
					gray: [128, 128, 128],
					green: [0, 128, 0],
					greenyellow: [173, 255, 47],
					grey: [128, 128, 128],
					honeydew: [240, 255, 240],
					hotpink: [255, 105, 180],
					indianred: [205, 92, 92],
					indigo: [75, 0, 130],
					ivory: [255, 255, 240],
					khaki: [240, 230, 140],
					lavender: [230, 230, 250],
					lavenderblush: [255, 240, 245],
					lawngreen: [124, 252, 0],
					lemonchiffon: [255, 250, 205],
					lightblue: [173, 216, 230],
					lightcoral: [240, 128, 128],
					lightcyan: [224, 255, 255],
					lightgoldenrodyellow: [250, 250, 210],
					lightgray: [211, 211, 211],
					lightgreen: [144, 238, 144],
					lightgrey: [211, 211, 211],
					lightpink: [255, 182, 193],
					lightsalmon: [255, 160, 122],
					lightseagreen: [32, 178, 170],
					lightskyblue: [135, 206, 250],
					lightslategray: [119, 136, 153],
					lightslategrey: [119, 136, 153],
					lightsteelblue: [176, 196, 222],
					lightyellow: [255, 255, 224],
					lime: [0, 255, 0],
					limegreen: [50, 205, 50],
					linen: [250, 240, 230],
					magenta: [255, 0, 255],
					maroon: [128, 0, 0],
					mediumaquamarine: [102, 205, 170],
					mediumblue: [0, 0, 205],
					mediumorchid: [186, 85, 211],
					mediumpurple: [147, 112, 219],
					mediumseagreen: [60, 179, 113],
					mediumslateblue: [123, 104, 238],
					mediumspringgreen: [0, 250, 154],
					mediumturquoise: [72, 209, 204],
					mediumvioletred: [199, 21, 133],
					midnightblue: [25, 25, 112],
					mintcream: [245, 255, 250],
					mistyrose: [255, 228, 225],
					moccasin: [255, 228, 181],
					navajowhite: [255, 222, 173],
					navy: [0, 0, 128],
					oldlace: [253, 245, 230],
					olive: [128, 128, 0],
					olivedrab: [107, 142, 35],
					orange: [255, 165, 0],
					orangered: [255, 69, 0],
					orchid: [218, 112, 214],
					palegoldenrod: [238, 232, 170],
					palegreen: [152, 251, 152],
					paleturquoise: [175, 238, 238],
					palevioletred: [219, 112, 147],
					papayawhip: [255, 239, 213],
					peachpuff: [255, 218, 185],
					peru: [205, 133, 63],
					pink: [255, 192, 203],
					plum: [221, 160, 221],
					powderblue: [176, 224, 230],
					purple: [128, 0, 128],
					rebeccapurple: [102, 51, 153],
					red: [255, 0, 0],
					rosybrown: [188, 143, 143],
					royalblue: [65, 105, 225],
					saddlebrown: [139, 69, 19],
					salmon: [250, 128, 114],
					sandybrown: [244, 164, 96],
					seagreen: [46, 139, 87],
					seashell: [255, 245, 238],
					sienna: [160, 82, 45],
					silver: [192, 192, 192],
					skyblue: [135, 206, 235],
					slateblue: [106, 90, 205],
					slategray: [112, 128, 144],
					slategrey: [112, 128, 144],
					snow: [255, 250, 250],
					springgreen: [0, 255, 127],
					steelblue: [70, 130, 180],
					tan: [210, 180, 140],
					teal: [0, 128, 128],
					thistle: [216, 191, 216],
					tomato: [255, 99, 71],
					turquoise: [64, 224, 208],
					violet: [238, 130, 238],
					wheat: [245, 222, 179],
					white: [255, 255, 255],
					whitesmoke: [245, 245, 245],
					yellow: [255, 255, 0],
					yellowgreen: [154, 205, 50]
				},
				Z = {};
			for (var $ in Y) Z[JSON.stringify(Y[$])] = $
		}, {}],
		5: [function (a, b, c) {
			var d = a(4),
				e = function () {
					return new j
				};
			for (var f in d) {
				e[f + "Raw"] = function (a) {
					return function (b) {
						return "number" == typeof b && (b = Array.prototype.slice.call(arguments)), d[a](b)
					}
				}(f);
				var g = /(\w+)2(\w+)/.exec(f),
					h = g[1],
					i = g[2];
				e[h] = e[h] || {}, e[h][i] = e[f] = function (a) {
					return function (b) {
						"number" == typeof b && (b = Array.prototype.slice.call(arguments));
						var c = d[a](b);
						if ("string" == typeof c || void 0 === c) return c;
						for (var e = 0; e < c.length; e++) c[e] = Math.round(c[e]);
						return c
					}
				}(f)
			}
			var j = function () {
				this.convs = {}
			};
			j.prototype.routeSpace = function (a, b) {
				var c = b[0];
				return void 0 === c ? this.getValues(a) : ("number" == typeof c && (c = Array.prototype.slice.call(b)), this.setValues(a, c))
			}, j.prototype.setValues = function (a, b) {
				return this.space = a, this.convs = {}, this.convs[a] = b, this
			}, j.prototype.getValues = function (a) {
				var b = this.convs[a];
				if (!b) {
					var c = this.space,
						d = this.convs[c];
					b = e[c][a](d), this.convs[a] = b
				}
				return b
			}, ["rgb", "hsl", "hsv", "cmyk", "keyword"].forEach(function (a) {
				j.prototype[a] = function (b) {
					return this.routeSpace(a, arguments)
				}
			}), b.exports = e
		}, {
			4: 4
		}],
		6: [function (a, b, c) {
			b.exports = {
				aliceblue: [240, 248, 255],
				antiquewhite: [250, 235, 215],
				aqua: [0, 255, 255],
				aquamarine: [127, 255, 212],
				azure: [240, 255, 255],
				beige: [245, 245, 220],
				bisque: [255, 228, 196],
				black: [0, 0, 0],
				blanchedalmond: [255, 235, 205],
				blue: [0, 0, 255],
				blueviolet: [138, 43, 226],
				brown: [165, 42, 42],
				burlywood: [222, 184, 135],
				cadetblue: [95, 158, 160],
				chartreuse: [127, 255, 0],
				chocolate: [210, 105, 30],
				coral: [255, 127, 80],
				cornflowerblue: [100, 149, 237],
				cornsilk: [255, 248, 220],
				crimson: [220, 20, 60],
				cyan: [0, 255, 255],
				darkblue: [0, 0, 139],
				darkcyan: [0, 139, 139],
				darkgoldenrod: [184, 134, 11],
				darkgray: [169, 169, 169],
				darkgreen: [0, 100, 0],
				darkgrey: [169, 169, 169],
				darkkhaki: [189, 183, 107],
				darkmagenta: [139, 0, 139],
				darkolivegreen: [85, 107, 47],
				darkorange: [255, 140, 0],
				darkorchid: [153, 50, 204],
				darkred: [139, 0, 0],
				darksalmon: [233, 150, 122],
				darkseagreen: [143, 188, 143],
				darkslateblue: [72, 61, 139],
				darkslategray: [47, 79, 79],
				darkslategrey: [47, 79, 79],
				darkturquoise: [0, 206, 209],
				darkviolet: [148, 0, 211],
				deeppink: [255, 20, 147],
				deepskyblue: [0, 191, 255],
				dimgray: [105, 105, 105],
				dimgrey: [105, 105, 105],
				dodgerblue: [30, 144, 255],
				firebrick: [178, 34, 34],
				floralwhite: [255, 250, 240],
				forestgreen: [34, 139, 34],
				fuchsia: [255, 0, 255],
				gainsboro: [220, 220, 220],
				ghostwhite: [248, 248, 255],
				gold: [255, 215, 0],
				goldenrod: [218, 165, 32],
				gray: [128, 128, 128],
				green: [0, 128, 0],
				greenyellow: [173, 255, 47],
				grey: [128, 128, 128],
				honeydew: [240, 255, 240],
				hotpink: [255, 105, 180],
				indianred: [205, 92, 92],
				indigo: [75, 0, 130],
				ivory: [255, 255, 240],
				khaki: [240, 230, 140],
				lavender: [230, 230, 250],
				lavenderblush: [255, 240, 245],
				lawngreen: [124, 252, 0],
				lemonchiffon: [255, 250, 205],
				lightblue: [173, 216, 230],
				lightcoral: [240, 128, 128],
				lightcyan: [224, 255, 255],
				lightgoldenrodyellow: [250, 250, 210],
				lightgray: [211, 211, 211],
				lightgreen: [144, 238, 144],
				lightgrey: [211, 211, 211],
				lightpink: [255, 182, 193],
				lightsalmon: [255, 160, 122],
				lightseagreen: [32, 178, 170],
				lightskyblue: [135, 206, 250],
				lightslategray: [119, 136, 153],
				lightslategrey: [119, 136, 153],
				lightsteelblue: [176, 196, 222],
				lightyellow: [255, 255, 224],
				lime: [0, 255, 0],
				limegreen: [50, 205, 50],
				linen: [250, 240, 230],
				magenta: [255, 0, 255],
				maroon: [128, 0, 0],
				mediumaquamarine: [102, 205, 170],
				mediumblue: [0, 0, 205],
				mediumorchid: [186, 85, 211],
				mediumpurple: [147, 112, 219],
				mediumseagreen: [60, 179, 113],
				mediumslateblue: [123, 104, 238],
				mediumspringgreen: [0, 250, 154],
				mediumturquoise: [72, 209, 204],
				mediumvioletred: [199, 21, 133],
				midnightblue: [25, 25, 112],
				mintcream: [245, 255, 250],
				mistyrose: [255, 228, 225],
				moccasin: [255, 228, 181],
				navajowhite: [255, 222, 173],
				navy: [0, 0, 128],
				oldlace: [253, 245, 230],
				olive: [128, 128, 0],
				olivedrab: [107, 142, 35],
				orange: [255, 165, 0],
				orangered: [255, 69, 0],
				orchid: [218, 112, 214],
				palegoldenrod: [238, 232, 170],
				palegreen: [152, 251, 152],
				paleturquoise: [175, 238, 238],
				palevioletred: [219, 112, 147],
				papayawhip: [255, 239, 213],
				peachpuff: [255, 218, 185],
				peru: [205, 133, 63],
				pink: [255, 192, 203],
				plum: [221, 160, 221],
				powderblue: [176, 224, 230],
				purple: [128, 0, 128],
				rebeccapurple: [102, 51, 153],
				red: [255, 0, 0],
				rosybrown: [188, 143, 143],
				royalblue: [65, 105, 225],
				saddlebrown: [139, 69, 19],
				salmon: [250, 128, 114],
				sandybrown: [244, 164, 96],
				seagreen: [46, 139, 87],
				seashell: [255, 245, 238],
				sienna: [160, 82, 45],
				silver: [192, 192, 192],
				skyblue: [135, 206, 235],
				slateblue: [106, 90, 205],
				slategray: [112, 128, 144],
				slategrey: [112, 128, 144],
				snow: [255, 250, 250],
				springgreen: [0, 255, 127],
				steelblue: [70, 130, 180],
				tan: [210, 180, 140],
				teal: [0, 128, 128],
				thistle: [216, 191, 216],
				tomato: [255, 99, 71],
				turquoise: [64, 224, 208],
				violet: [238, 130, 238],
				wheat: [245, 222, 179],
				white: [255, 255, 255],
				whitesmoke: [245, 245, 245],
				yellow: [255, 255, 0],
				yellowgreen: [154, 205, 50]
			}
		}, {}],
		7: [function (a, b, c) {
			var d = a(26)();
			a(25)(d), a(24)(d), a(21)(d), a(22)(d), a(23)(d), a(27)(d), a(31)(d), a(29)(d), a(30)(d), a(32)(d), a(28)(d), a(33)(d), a(34)(d), a(35)(d), a(36)(d), a(37)(d), a(40)(d), a(38)(d), a(39)(d), a(41)(d), a(42)(d), a(43)(d), a(15)(d), a(16)(d), a(17)(d), a(18)(d), a(19)(d), a(20)(d), a(8)(d), a(9)(d), a(10)(d), a(11)(d), a(12)(d), a(13)(d), a(14)(d), window.Chart = b.exports = d
		}, {
			10: 10,
			11: 11,
			12: 12,
			13: 13,
			14: 14,
			15: 15,
			16: 16,
			17: 17,
			18: 18,
			19: 19,
			20: 20,
			21: 21,
			22: 22,
			23: 23,
			24: 24,
			25: 25,
			26: 26,
			27: 27,
			28: 28,
			29: 29,
			30: 30,
			31: 31,
			32: 32,
			33: 33,
			34: 34,
			35: 35,
			36: 36,
			37: 37,
			38: 38,
			39: 39,
			40: 40,
			41: 41,
			42: 42,
			43: 43,
			8: 8,
			9: 9
		}],
		8: [function (a, b, c) {
			"use strict";
			b.exports = function (a) {
				a.Bar = function (b, c) {
					return c.type = "bar", new a(b, c)
				}
			}
		}, {}],
		9: [function (a, b, c) {
			"use strict";
			b.exports = function (a) {
				a.Bubble = function (b, c) {
					return c.type = "bubble", new a(b, c)
				}
			}
		}, {}],
		10: [function (a, b, c) {
			"use strict";
			b.exports = function (a) {
				a.Doughnut = function (b, c) {
					return c.type = "doughnut", new a(b, c)
				}
			}
		}, {}],
		11: [function (a, b, c) {
			"use strict";
			b.exports = function (a) {
				a.Line = function (b, c) {
					return c.type = "line", new a(b, c)
				}
			}
		}, {}],
		12: [function (a, b, c) {
			"use strict";
			b.exports = function (a) {
				a.PolarArea = function (b, c) {
					return c.type = "polarArea", new a(b, c)
				}
			}
		}, {}],
		13: [function (a, b, c) {
			"use strict";
			b.exports = function (a) {
				a.Radar = function (b, c) {
					return c.options = a.helpers.configMerge({
						aspectRatio: 1
					}, c.options), c.type = "radar", new a(b, c)
				}
			}
		}, {}],
		14: [function (a, b, c) {
			"use strict";
			b.exports = function (a) {
				var b = {
					hover: {
						mode: "single"
					},
					scales: {
						xAxes: [{
							type: "linear",
							position: "bottom",
							id: "x-axis-1"
						}],
						yAxes: [{
							type: "linear",
							position: "left",
							id: "y-axis-1"
						}]
					},
					tooltips: {
						callbacks: {
							title: function (a, b) {
								return ""
							},
							label: function (a, b) {
								return "(" + a.xLabel + ", " + a.yLabel + ")"
							}
						}
					}
				};
				a.defaults.scatter = b, a.controllers.scatter = a.controllers.line, a.Scatter = function (b, c) {
					return c.type = "scatter", new a(b, c)
				}
			}
		}, {}],
		15: [function (a, b, c) {
			"use strict";
			b.exports = function (a) {
				var b = a.helpers;
				a.defaults.bar = {
					hover: {
						mode: "label"
					},
					scales: {
						xAxes: [{
							type: "category",
							categoryPercentage: .8,
							barPercentage: .9,
							gridLines: {
								offsetGridLines: !0
							}
						}],
						yAxes: [{
							type: "linear"
						}]
					}
				}, a.controllers.bar = a.DatasetController.extend({
					dataElementType: a.elements.Rectangle,
					initialize: function (b, c) {
						a.DatasetController.prototype.initialize.call(this, b, c), this.getMeta().bar = !0
					},
					getBarCount: function () {
						var a = this,
							c = 0;
						return b.each(a.chart.data.datasets, function (b, d) {
							var e = a.chart.getDatasetMeta(d);
							e.bar && a.chart.isDatasetVisible(d) && ++c
						}, a), c
					},
					update: function (a) {
						var c = this;
						b.each(c.getMeta().data, function (b, d) {
							c.updateElement(b, d, a)
						}, c)
					},
					updateElement: function (a, c, d) {
						var e = this,
							f = e.getMeta(),
							g = e.getScaleForId(f.xAxisID),
							h = e.getScaleForId(f.yAxisID),
							i = h.getBasePixel(),
							j = e.chart.options.elements.rectangle,
							k = a.custom || {},
							l = e.getDataset();
						b.extend(a, {
							_xScale: g,
							_yScale: h,
							_datasetIndex: e.index,
							_index: c,
							_model: {
								x: e.calculateBarX(c, e.index),
								y: d ? i : e.calculateBarY(c, e.index),
								label: e.chart.data.labels[c],
								datasetLabel: l.label,
								base: d ? i : e.calculateBarBase(e.index, c),
								width: e.calculateBarWidth(c),
								backgroundColor: k.backgroundColor ? k.backgroundColor : b.getValueAtIndexOrDefault(l.backgroundColor, c, j.backgroundColor),
								borderSkipped: k.borderSkipped ? k.borderSkipped : j.borderSkipped,
								borderColor: k.borderColor ? k.borderColor : b.getValueAtIndexOrDefault(l.borderColor, c, j.borderColor),
								borderWidth: k.borderWidth ? k.borderWidth : b.getValueAtIndexOrDefault(l.borderWidth, c, j.borderWidth)
							}
						}), a.pivot()
					},
					calculateBarBase: function (a, b) {
						var c = this,
							d = c.getMeta(),
							e = c.getScaleForId(d.yAxisID),
							f = 0;
						if (e.options.stacked) {
							var g = c.chart,
								h = g.data.datasets,
								i = h[a].data[b];
							if (i < 0)
								for (var j = 0; j < a; j++) {
									var k = h[j],
										l = g.getDatasetMeta(j);
									l.bar && l.yAxisID === e.id && g.isDatasetVisible(j) && (f += k.data[b] < 0 ? k.data[b] : 0)
								} else
									for (var m = 0; m < a; m++) {
										var n = h[m],
											o = g.getDatasetMeta(m);
										o.bar && o.yAxisID === e.id && g.isDatasetVisible(m) && (f += n.data[b] > 0 ? n.data[b] : 0)
									}
							return e.getPixelForValue(f)
						}
						return e.getBasePixel()
					},
					getRuler: function (a) {
						var b, c = this,
							d = c.getMeta(),
							e = c.getScaleForId(d.xAxisID),
							f = c.getBarCount();
						b = "category" === e.options.type ? e.getPixelForTick(a + 1) - e.getPixelForTick(a) : e.width / e.ticks.length;
						var g = b * e.options.categoryPercentage,
							h = (b - b * e.options.categoryPercentage) / 2,
							i = g / f;
						if (e.ticks.length !== c.chart.data.labels.length) {
							var j = e.ticks.length / c.chart.data.labels.length;
							i *= j
						}
						var k = i * e.options.barPercentage,
							l = i - i * e.options.barPercentage;
						return {
							datasetCount: f,
							tickWidth: b,
							categoryWidth: g,
							categorySpacing: h,
							fullBarWidth: i,
							barWidth: k,
							barSpacing: l
						}
					},
					calculateBarWidth: function (a) {
						var b = this.getScaleForId(this.getMeta().xAxisID),
							c = this.getRuler(a);
						return b.options.stacked ? c.categoryWidth : c.barWidth
					},
					getBarIndex: function (a) {
						var b, c, d = 0;
						for (c = 0; c < a; ++c) b = this.chart.getDatasetMeta(c), b.bar && this.chart.isDatasetVisible(c) && ++d;
						return d
					},
					calculateBarX: function (a, b) {
						var c = this,
							d = c.getMeta(),
							e = c.getScaleForId(d.xAxisID),
							f = c.getBarIndex(b),
							g = c.getRuler(a),
							h = e.getPixelForValue(null, a, b, c.chart.isCombo);
						return h -= c.chart.isCombo ? g.tickWidth / 2 : 0, e.options.stacked ? h + g.categoryWidth / 2 + g.categorySpacing : h + g.barWidth / 2 + g.categorySpacing + g.barWidth * f + g.barSpacing / 2 + g.barSpacing * f
					},
					calculateBarY: function (a, b) {
						var c = this,
							d = c.getMeta(),
							e = c.getScaleForId(d.yAxisID),
							f = c.getDataset().data[a];
						if (e.options.stacked) {
							for (var g = 0, h = 0, i = 0; i < b; i++) {
								var j = c.chart.data.datasets[i],
									k = c.chart.getDatasetMeta(i);
								k.bar && k.yAxisID === e.id && c.chart.isDatasetVisible(i) && (j.data[a] < 0 ? h += j.data[a] || 0 : g += j.data[a] || 0)
							}
							return f < 0 ? e.getPixelForValue(h + f) : e.getPixelForValue(g + f)
						}
						return e.getPixelForValue(f)
					},
					draw: function (a) {
						var c = this,
							d = a || 1;
						b.each(c.getMeta().data, function (a, b) {
							var e = c.getDataset().data[b];
							null === e || void 0 === e || isNaN(e) || a.transition(d).draw()
						}, c)
					},
					setHoverStyle: function (a) {
						var c = this.chart.data.datasets[a._datasetIndex],
							d = a._index,
							e = a.custom || {},
							f = a._model;
						f.backgroundColor = e.hoverBackgroundColor ? e.hoverBackgroundColor : b.getValueAtIndexOrDefault(c.hoverBackgroundColor, d, b.getHoverColor(f.backgroundColor)), f.borderColor = e.hoverBorderColor ? e.hoverBorderColor : b.getValueAtIndexOrDefault(c.hoverBorderColor, d, b.getHoverColor(f.borderColor)), f.borderWidth = e.hoverBorderWidth ? e.hoverBorderWidth : b.getValueAtIndexOrDefault(c.hoverBorderWidth, d, f.borderWidth)
					},
					removeHoverStyle: function (a) {
						var c = this.chart.data.datasets[a._datasetIndex],
							d = a._index,
							e = a.custom || {},
							f = a._model,
							g = this.chart.options.elements.rectangle;
						f.backgroundColor = e.backgroundColor ? e.backgroundColor : b.getValueAtIndexOrDefault(c.backgroundColor, d, g.backgroundColor), f.borderColor = e.borderColor ? e.borderColor : b.getValueAtIndexOrDefault(c.borderColor, d, g.borderColor), f.borderWidth = e.borderWidth ? e.borderWidth : b.getValueAtIndexOrDefault(c.borderWidth, d, g.borderWidth)
					}
				}), a.defaults.horizontalBar = {
					hover: {
						mode: "label"
					},
					scales: {
						xAxes: [{
							type: "linear",
							position: "bottom"
						}],
						yAxes: [{
							position: "left",
							type: "category",
							categoryPercentage: .8,
							barPercentage: .9,
							gridLines: {
								offsetGridLines: !0
							}
						}]
					},
					elements: {
						rectangle: {
							borderSkipped: "left"
						}
					},
					tooltips: {
						callbacks: {
							title: function (a, b) {
								var c = "";
								return a.length > 0 && (a[0].yLabel ? c = a[0].yLabel : b.labels.length > 0 && a[0].index < b.labels.length && (c = b.labels[a[0].index])), c
							},
							label: function (a, b) {
								var c = b.datasets[a.datasetIndex].label || "";
								return c + ": " + a.xLabel
							}
						}
					}
				}, a.controllers.horizontalBar = a.controllers.bar.extend({
					updateElement: function (a, c, d, e) {
						var f = this,
							g = f.getMeta(),
							h = f.getScaleForId(g.xAxisID),
							i = f.getScaleForId(g.yAxisID),
							j = h.getBasePixel(),
							k = a.custom || {},
							l = f.getDataset(),
							m = f.chart.options.elements.rectangle;
						b.extend(a, {
							_xScale: h,
							_yScale: i,
							_datasetIndex: f.index,
							_index: c,
							_model: {
								x: d ? j : f.calculateBarX(c, f.index),
								y: f.calculateBarY(c, f.index),
								label: f.chart.data.labels[c],
								datasetLabel: l.label,
								base: d ? j : f.calculateBarBase(f.index, c),
								height: f.calculateBarHeight(c),
								backgroundColor: k.backgroundColor ? k.backgroundColor : b.getValueAtIndexOrDefault(l.backgroundColor, c, m.backgroundColor),
								borderSkipped: k.borderSkipped ? k.borderSkipped : m.borderSkipped,
								borderColor: k.borderColor ? k.borderColor : b.getValueAtIndexOrDefault(l.borderColor, c, m.borderColor),
								borderWidth: k.borderWidth ? k.borderWidth : b.getValueAtIndexOrDefault(l.borderWidth, c, m.borderWidth)
							},
							draw: function () {
								function a(a) {
									return i[(k + a) % 4]
								}
								var b = this._chart.ctx,
									c = this._view,
									d = c.height / 2,
									e = c.y - d,
									f = c.y + d,
									g = c.base - (c.base - c.x),
									h = c.borderWidth / 2;
								c.borderWidth && (e += h, f -= h, g += h), b.beginPath(), b.fillStyle = c.backgroundColor, b.strokeStyle = c.borderColor, b.lineWidth = c.borderWidth;
								var i = [
										[c.base, f],
										[c.base, e],
										[g, e],
										[g, f]
									],
									j = ["bottom", "left", "top", "right"],
									k = j.indexOf(c.borderSkipped, 0);
								k === -1 && (k = 0), b.moveTo.apply(b, a(0));
								for (var l = 1; l < 4; l++) b.lineTo.apply(b, a(l));
								b.fill(), c.borderWidth && b.stroke()
							},
							inRange: function (a, b) {
								var c = this._view,
									d = !1;
								return c && (d = c.x < c.base ? b >= c.y - c.height / 2 && b <= c.y + c.height / 2 && a >= c.x && a <= c.base : b >= c.y - c.height / 2 && b <= c.y + c.height / 2 && a >= c.base && a <= c.x), d
							}
						}), a.pivot()
					},
					calculateBarBase: function (a, b) {
						var c = this,
							d = c.getMeta(),
							e = c.getScaleForId(d.xAxisID),
							f = 0;
						if (e.options.stacked) {
							var g = c.chart.data.datasets[a].data[b];
							if (g < 0)
								for (var h = 0; h < a; h++) {
									var i = c.chart.data.datasets[h],
										j = c.chart.getDatasetMeta(h);
									j.bar && j.xAxisID === e.id && c.chart.isDatasetVisible(h) && (f += i.data[b] < 0 ? i.data[b] : 0)
								} else
									for (var k = 0; k < a; k++) {
										var l = c.chart.data.datasets[k],
											m = c.chart.getDatasetMeta(k);
										m.bar && m.xAxisID === e.id && c.chart.isDatasetVisible(k) && (f += l.data[b] > 0 ? l.data[b] : 0)
									}
							return e.getPixelForValue(f)
						}
						return e.getBasePixel()
					},
					getRuler: function (a) {
						var b, c = this,
							d = c.getMeta(),
							e = c.getScaleForId(d.yAxisID),
							f = c.getBarCount();
						b = "category" === e.options.type ? e.getPixelForTick(a + 1) - e.getPixelForTick(a) : e.width / e.ticks.length;
						var g = b * e.options.categoryPercentage,
							h = (b - b * e.options.categoryPercentage) / 2,
							i = g / f;
						if (e.ticks.length !== c.chart.data.labels.length) {
							var j = e.ticks.length / c.chart.data.labels.length;
							i *= j
						}
						var k = i * e.options.barPercentage,
							l = i - i * e.options.barPercentage;
						return {
							datasetCount: f,
							tickHeight: b,
							categoryHeight: g,
							categorySpacing: h,
							fullBarHeight: i,
							barHeight: k,
							barSpacing: l
						}
					},
					calculateBarHeight: function (a) {
						var b = this,
							c = b.getScaleForId(b.getMeta().yAxisID),
							d = b.getRuler(a);
						return c.options.stacked ? d.categoryHeight : d.barHeight
					},
					calculateBarX: function (a, b) {
						var c = this,
							d = c.getMeta(),
							e = c.getScaleForId(d.xAxisID),
							f = c.getDataset().data[a];
						if (e.options.stacked) {
							for (var g = 0, h = 0, i = 0; i < b; i++) {
								var j = c.chart.data.datasets[i],
									k = c.chart.getDatasetMeta(i);
								k.bar && k.xAxisID === e.id && c.chart.isDatasetVisible(i) && (j.data[a] < 0 ? h += j.data[a] || 0 : g += j.data[a] || 0)
							}
							return f < 0 ? e.getPixelForValue(h + f) : e.getPixelForValue(g + f)
						}
						return e.getPixelForValue(f)
					},
					calculateBarY: function (a, b) {
						var c = this,
							d = c.getMeta(),
							e = c.getScaleForId(d.yAxisID),
							f = c.getBarIndex(b),
							g = c.getRuler(a),
							h = e.getPixelForValue(null, a, b, c.chart.isCombo);
						return h -= c.chart.isCombo ? g.tickHeight / 2 : 0, e.options.stacked ? h + g.categoryHeight / 2 + g.categorySpacing : h + g.barHeight / 2 + g.categorySpacing + g.barHeight * f + g.barSpacing / 2 + g.barSpacing * f
					}
				})
			}
		}, {}],
		16: [function (a, b, c) {
			"use strict";
			b.exports = function (a) {
				var b = a.helpers;
				a.defaults.bubble = {
					hover: {
						mode: "single"
					},
					scales: {
						xAxes: [{
							type: "linear",
							position: "bottom",
							id: "x-axis-0"
						}],
						yAxes: [{
							type: "linear",
							position: "left",
							id: "y-axis-0"
						}]
					},
					tooltips: {
						callbacks: {
							title: function (a, b) {
								return ""
							},
							label: function (a, b) {
								var c = b.datasets[a.datasetIndex].label || "",
									d = b.datasets[a.datasetIndex].data[a.index];
								return c + ": (" + d.x + ", " + d.y + ", " + d.r + ")"
							}
						}
					}
				}, a.controllers.bubble = a.DatasetController.extend({
					dataElementType: a.elements.Point,
					update: function (a) {
						var c = this,
							d = c.getMeta(),
							e = d.data;
						b.each(e, function (b, d) {
							c.updateElement(b, d, a)
						})
					},
					updateElement: function (c, d, e) {
						var f = this,
							g = f.getMeta(),
							h = f.getScaleForId(g.xAxisID),
							i = f.getScaleForId(g.yAxisID),
							j = c.custom || {},
							k = f.getDataset(),
							l = k.data[d],
							m = f.chart.options.elements.point,
							n = f.index;
						b.extend(c, {
							_xScale: h,
							_yScale: i,
							_datasetIndex: n,
							_index: d,
							_model: {
								x: e ? h.getPixelForDecimal(.5) : h.getPixelForValue(l, d, n, f.chart.isCombo),
								y: e ? i.getBasePixel() : i.getPixelForValue(l, d, n),
								radius: e ? 0 : j.radius ? j.radius : f.getRadius(l),
								hitRadius: j.hitRadius ? j.hitRadius : b.getValueAtIndexOrDefault(k.hitRadius, d, m.hitRadius)
							}
						}), a.DatasetController.prototype.removeHoverStyle.call(f, c, m);
						var o = c._model;
						o.skip = j.skip ? j.skip : isNaN(o.x) || isNaN(o.y), c.pivot()
					},
					getRadius: function (a) {
						return a.r || this.chart.options.elements.point.radius
					},
					setHoverStyle: function (c) {
						var d = this;
						a.DatasetController.prototype.setHoverStyle.call(d, c);
						var e = d.chart.data.datasets[c._datasetIndex],
							f = c._index,
							g = c.custom || {},
							h = c._model;
						h.radius = g.hoverRadius ? g.hoverRadius : b.getValueAtIndexOrDefault(e.hoverRadius, f, d.chart.options.elements.point.hoverRadius) + d.getRadius(e.data[f])
					},
					removeHoverStyle: function (b) {
						var c = this;
						a.DatasetController.prototype.removeHoverStyle.call(c, b, c.chart.options.elements.point);
						var d = c.chart.data.datasets[b._datasetIndex].data[b._index],
							e = b.custom || {},
							f = b._model;
						f.radius = e.radius ? e.radius : c.getRadius(d)
					}
				})
			}
		}, {}],
		17: [function (a, b, c) {
			"use strict";
			b.exports = function (a) {
				var b = a.helpers,
					c = a.defaults;
				c.doughnut = {
					animation: {
						animateRotate: !0,
						animateScale: !1
					},
					aspectRatio: 1,
					hover: {
						mode: "single"
					},
					legendCallback: function (a) {
						var b = [];
						b.push('<ul class="' + a.id + '-legend">');
						var c = a.data,
							d = c.datasets,
							e = c.labels;
						if (d.length)
							for (var f = 0; f < d[0].data.length; ++f) b.push('<li><span style="background-color:' + d[0].backgroundColor[f] + '"></span>'), e[f] && b.push(e[f]), b.push("</li>");
						return b.push("</ul>"), b.join("")
					},
					legend: {
						labels: {
							generateLabels: function (a) {
								var c = a.data;
								return c.labels.length && c.datasets.length ? c.labels.map(function (d, e) {
									var f = a.getDatasetMeta(0),
										g = c.datasets[0],
										h = f.data[e],
										i = h.custom || {},
										j = b.getValueAtIndexOrDefault,
										k = a.options.elements.arc,
										l = i.backgroundColor ? i.backgroundColor : j(g.backgroundColor, e, k.backgroundColor),
										m = i.borderColor ? i.borderColor : j(g.borderColor, e, k.borderColor),
										n = i.borderWidth ? i.borderWidth : j(g.borderWidth, e, k.borderWidth);
									return {
										text: d,
										fillStyle: l,
										strokeStyle: m,
										lineWidth: n,
										hidden: isNaN(g.data[e]) || f.data[e].hidden,
										index: e
									}
								}) : []
							}
						},
						onClick: function (a, b) {
							var c, d, e, f = b.index,
								g = this.chart;
							for (c = 0, d = (g.data.datasets || []).length; c < d; ++c) e = g.getDatasetMeta(c), e.data[f].hidden = !e.data[f].hidden;
							g.update()
						}
					},
					cutoutPercentage: 50,
					rotation: Math.PI * -.5,
					circumference: 2 * Math.PI,
					tooltips: {
						callbacks: {
							title: function () {
								return ""
							},
							label: function (a, b) {
								return b.labels[a.index] + ": " + b.datasets[a.datasetIndex].data[a.index]
							}
						}
					}
				}, c.pie = b.clone(c.doughnut), b.extend(c.pie, {
					cutoutPercentage: 0
				}), a.controllers.doughnut = a.controllers.pie = a.DatasetController.extend({
					dataElementType: a.elements.Arc,
					linkScales: b.noop,
					getRingIndex: function (a) {
						for (var b = 0, c = 0; c < a; ++c) this.chart.isDatasetVisible(c) && ++b;
						return b
					},
					update: function (a) {
						var c = this,
							d = c.chart,
							e = d.chartArea,
							f = d.options,
							g = f.elements.arc,
							h = e.right - e.left - g.borderWidth,
							i = e.bottom - e.top - g.borderWidth,
							j = Math.min(h, i),
							k = {
								x: 0,
								y: 0
							},
							l = c.getMeta(),
							m = f.cutoutPercentage,
							n = f.circumference;
						if (n < 2 * Math.PI) {
							var o = f.rotation % (2 * Math.PI);
							o += 2 * Math.PI * (o >= Math.PI ? -1 : o < -Math.PI ? 1 : 0);
							var p = o + n,
								q = {
									x: Math.cos(o),
									y: Math.sin(o)
								},
								r = {
									x: Math.cos(p),
									y: Math.sin(p)
								},
								s = o <= 0 && 0 <= p || o <= 2 * Math.PI && 2 * Math.PI <= p,
								t = o <= .5 * Math.PI && .5 * Math.PI <= p || o <= 2.5 * Math.PI && 2.5 * Math.PI <= p,
								u = o <= -Math.PI && -Math.PI <= p || o <= Math.PI && Math.PI <= p,
								v = o <= .5 * -Math.PI && .5 * -Math.PI <= p || o <= 1.5 * Math.PI && 1.5 * Math.PI <= p,
								w = m / 100,
								x = {
									x: u ? -1 : Math.min(q.x * (q.x < 0 ? 1 : w), r.x * (r.x < 0 ? 1 : w)),
									y: v ? -1 : Math.min(q.y * (q.y < 0 ? 1 : w), r.y * (r.y < 0 ? 1 : w))
								},
								y = {
									x: s ? 1 : Math.max(q.x * (q.x > 0 ? 1 : w), r.x * (r.x > 0 ? 1 : w)),
									y: t ? 1 : Math.max(q.y * (q.y > 0 ? 1 : w), r.y * (r.y > 0 ? 1 : w))
								},
								z = {
									width: .5 * (y.x - x.x),
									height: .5 * (y.y - x.y)
								};
							j = Math.min(h / z.width, i / z.height), k = {
								x: (y.x + x.x) * -.5,
								y: (y.y + x.y) * -.5
							}
						}
						d.outerRadius = Math.max(j / 2, 0), d.innerRadius = Math.max(m ? d.outerRadius / 100 * m : 1, 0), d.radiusLength = (d.outerRadius - d.innerRadius) / d.getVisibleDatasetCount(), d.offsetX = k.x * d.outerRadius, d.offsetY = k.y * d.outerRadius, l.total = c.calculateTotal(), c.outerRadius = d.outerRadius - d.radiusLength * c.getRingIndex(c.index), c.innerRadius = c.outerRadius - d.radiusLength, b.each(l.data, function (b, d) {
							c.updateElement(b, d, a)
						})
					},
					updateElement: function (a, c, d) {
						var e = this,
							f = e.chart,
							g = f.chartArea,
							h = f.options,
							i = h.animation,
							j = (h.elements.arc, (g.left + g.right) / 2),
							k = (g.top + g.bottom) / 2,
							l = h.rotation,
							m = h.rotation,
							n = e.getDataset(),
							o = d && i.animateRotate ? 0 : a.hidden ? 0 : e.calculateCircumference(n.data[c]) * (h.circumference / (2 * Math.PI)),
							p = d && i.animateScale ? 0 : e.innerRadius,
							q = d && i.animateScale ? 0 : e.outerRadius,
							r = (a.custom || {}, b.getValueAtIndexOrDefault);
						b.extend(a, {
							_datasetIndex: e.index,
							_index: c,
							_model: {
								x: j + f.offsetX,
								y: k + f.offsetY,
								startAngle: l,
								endAngle: m,
								circumference: o,
								outerRadius: q,
								innerRadius: p,
								label: r(n.label, c, f.data.labels[c])
							}
						});
						var s = a._model;
						this.removeHoverStyle(a), d && i.animateRotate || (0 === c ? s.startAngle = h.rotation : s.startAngle = e.getMeta().data[c - 1]._model.endAngle, s.endAngle = s.startAngle + s.circumference), a.pivot()
					},
					removeHoverStyle: function (b) {
						a.DatasetController.prototype.removeHoverStyle.call(this, b, this.chart.options.elements.arc)
					},
					calculateTotal: function () {
						var a, c = this.getDataset(),
							d = this.getMeta(),
							e = 0;
						return b.each(d.data, function (b, d) {
							a = c.data[d], isNaN(a) || b.hidden || (e += Math.abs(a))
						}), e
					},
					calculateCircumference: function (a) {
						var b = this.getMeta().total;
						return b > 0 && !isNaN(a) ? 2 * Math.PI * (a / b) : 0
					}
				})
			}
		}, {}],
		18: [function (a, b, c) {
			"use strict";
			b.exports = function (a) {
				function b(a, b) {
					return c.getValueOrDefault(a.showLine, b.showLines)
				}
				var c = a.helpers;
				a.defaults.line = {
					showLines: !0,
					hover: {
						mode: "label"
					},
					scales: {
						xAxes: [{
							type: "category",
							id: "x-axis-0"
						}],
						yAxes: [{
							type: "linear",
							id: "y-axis-0"
						}]
					}
				}, a.controllers.line = a.DatasetController.extend({
					datasetElementType: a.elements.Line,
					dataElementType: a.elements.Point,
					addElementAndReset: function (c) {
						var d = this,
							e = d.chart.options,
							f = d.getMeta();
						a.DatasetController.prototype.addElementAndReset.call(d, c), b(d.getDataset(), e) && 0 !== f.dataset._model.tension && d.updateBezierControlPoints()
					},
					update: function (a) {
						var d, e, f, g = this,
							h = g.getMeta(),
							i = h.dataset,
							j = h.data || [],
							k = g.chart.options,
							l = k.elements.line,
							m = g.getScaleForId(h.yAxisID),
							n = g.getDataset(),
							o = b(n, k);
						for (o && (f = i.custom || {}, void 0 !== n.tension && void 0 === n.lineTension && (n.lineTension = n.tension), i._scale = m, i._datasetIndex = g.index, i._children = j, i._model = {
								spanGaps: !!n.spanGaps && n.spanGaps,
								tension: f.tension ? f.tension : c.getValueOrDefault(n.lineTension, l.tension),
								backgroundColor: f.backgroundColor ? f.backgroundColor : n.backgroundColor || l.backgroundColor,
								borderWidth: f.borderWidth ? f.borderWidth : n.borderWidth || l.borderWidth,
								borderColor: f.borderColor ? f.borderColor : n.borderColor || l.borderColor,
								borderCapStyle: f.borderCapStyle ? f.borderCapStyle : n.borderCapStyle || l.borderCapStyle,
								borderDash: f.borderDash ? f.borderDash : n.borderDash || l.borderDash,
								borderDashOffset: f.borderDashOffset ? f.borderDashOffset : n.borderDashOffset || l.borderDashOffset,
								borderJoinStyle: f.borderJoinStyle ? f.borderJoinStyle : n.borderJoinStyle || l.borderJoinStyle,
								fill: f.fill ? f.fill : void 0 !== n.fill ? n.fill : l.fill,
								scaleTop: m.top,
								scaleBottom: m.bottom,
								scaleZero: m.getBasePixel()
							}, i.pivot()), d = 0, e = j.length; d < e; ++d) g.updateElement(j[d], d, a);
						for (o && 0 !== i._model.tension && g.updateBezierControlPoints(), d = 0, e = j.length; d < e; ++d) j[d].pivot()
					},
					getPointBackgroundColor: function (a, b) {
						var d = this.chart.options.elements.point.backgroundColor,
							e = this.getDataset(),
							f = a.custom || {};
						return f.backgroundColor ? d = f.backgroundColor : e.pointBackgroundColor ? d = c.getValueAtIndexOrDefault(e.pointBackgroundColor, b, d) : e.backgroundColor && (d = e.backgroundColor), d
					},
					getPointBorderColor: function (a, b) {
						var d = this.chart.options.elements.point.borderColor,
							e = this.getDataset(),
							f = a.custom || {};
						return f.borderColor ? d = f.borderColor : e.pointBorderColor ? d = c.getValueAtIndexOrDefault(e.pointBorderColor, b, d) : e.borderColor && (d = e.borderColor), d
					},
					getPointBorderWidth: function (a, b) {
						var d = this.chart.options.elements.point.borderWidth,
							e = this.getDataset(),
							f = a.custom || {};
						return f.borderWidth ? d = f.borderWidth : e.pointBorderWidth ? d = c.getValueAtIndexOrDefault(e.pointBorderWidth, b, d) : e.borderWidth && (d = e.borderWidth), d
					},
					updateElement: function (a, b, d) {
						var e, f, g = this,
							h = g.getMeta(),
							i = a.custom || {},
							j = g.getDataset(),
							k = g.index,
							l = j.data[b],
							m = g.getScaleForId(h.yAxisID),
							n = g.getScaleForId(h.xAxisID),
							o = g.chart.options.elements.point;
						void 0 !== j.radius && void 0 === j.pointRadius && (j.pointRadius = j.radius), void 0 !== j.hitRadius && void 0 === j.pointHitRadius && (j.pointHitRadius = j.hitRadius), e = n.getPixelForValue(l, b, k, g.chart.isCombo), f = d ? m.getBasePixel() : g.calculatePointY(l, b, k, g.chart.isCombo), a._xScale = n, a._yScale = m, a._datasetIndex = k, a._index = b, a._model = {
							x: e,
							y: f,
							skip: i.skip || isNaN(e) || isNaN(f),
							radius: i.radius || c.getValueAtIndexOrDefault(j.pointRadius, b, o.radius),
							pointStyle: i.pointStyle || c.getValueAtIndexOrDefault(j.pointStyle, b, o.pointStyle),
							backgroundColor: g.getPointBackgroundColor(a, b),
							borderColor: g.getPointBorderColor(a, b),
							borderWidth: g.getPointBorderWidth(a, b),
							tension: h.dataset._model ? h.dataset._model.tension : 0,
							hitRadius: i.hitRadius || c.getValueAtIndexOrDefault(j.pointHitRadius, b, o.hitRadius)
						}
					},
					calculatePointY: function (a, b, c, d) {
						var e, f, g, h = this,
							i = h.chart,
							j = h.getMeta(),
							k = h.getScaleForId(j.yAxisID),
							l = 0,
							m = 0;
						if (k.options.stacked) {
							for (e = 0; e < c; e++) f = i.data.datasets[e], g = i.getDatasetMeta(e), "line" === g.type && i.isDatasetVisible(e) && (f.data[b] < 0 ? m += f.data[b] || 0 : l += f.data[b] || 0);
							return a < 0 ? k.getPixelForValue(m + a) : k.getPixelForValue(l + a)
						}
						return k.getPixelForValue(a)
					},
					updateBezierControlPoints: function () {
						var a, b, d, e, f, g = this.getMeta(),
							h = (this.chart.chartArea, g.data || []);
						for (a = 0, b = h.length; a < b; ++a) d = h[a], e = d._model, f = c.splineCurve(c.previousItem(h, a)._model, e, c.nextItem(h, a)._model, g.dataset._model.tension), e.controlPointPreviousX = f.previous.x, e.controlPointPreviousY = f.previous.y, e.controlPointNextX = f.next.x, e.controlPointNextY = f.next.y
					},
					draw: function (a) {
						var c, d, e = this,
							f = e.getMeta(),
							g = f.data || [],
							h = a || 1;
						for (c = 0, d = g.length; c < d; ++c) g[c].transition(h);
						for (b(e.getDataset(), e.chart.options) && f.dataset.transition(h).draw(), c = 0, d = g.length; c < d; ++c) g[c].draw()
					},
					setHoverStyle: function (a) {
						var b = this.chart.data.datasets[a._datasetIndex],
							d = a._index,
							e = a.custom || {},
							f = a._model;
						f.radius = e.hoverRadius || c.getValueAtIndexOrDefault(b.pointHoverRadius, d, this.chart.options.elements.point.hoverRadius), f.backgroundColor = e.hoverBackgroundColor || c.getValueAtIndexOrDefault(b.pointHoverBackgroundColor, d, c.getHoverColor(f.backgroundColor)), f.borderColor = e.hoverBorderColor || c.getValueAtIndexOrDefault(b.pointHoverBorderColor, d, c.getHoverColor(f.borderColor)), f.borderWidth = e.hoverBorderWidth || c.getValueAtIndexOrDefault(b.pointHoverBorderWidth, d, f.borderWidth)
					},
					removeHoverStyle: function (a) {
						var b = this,
							d = b.chart.data.datasets[a._datasetIndex],
							e = a._index,
							f = a.custom || {},
							g = a._model;
						void 0 !== d.radius && void 0 === d.pointRadius && (d.pointRadius = d.radius), g.radius = f.radius || c.getValueAtIndexOrDefault(d.pointRadius, e, b.chart.options.elements.point.radius), g.backgroundColor = b.getPointBackgroundColor(a, e), g.borderColor = b.getPointBorderColor(a, e), g.borderWidth = b.getPointBorderWidth(a, e)
					}
				})
			}
		}, {}],
		19: [function (a, b, c) {
			"use strict";
			b.exports = function (a) {
				var b = a.helpers;
				a.defaults.polarArea = {
					scale: {
						type: "radialLinear",
						lineArc: !0
					},
					animation: {
						animateRotate: !0,
						animateScale: !0
					},
					aspectRatio: 1,
					legendCallback: function (a) {
						var b = [];
						b.push('<ul class="' + a.id + '-legend">');
						var c = a.data,
							d = c.datasets,
							e = c.labels;
						if (d.length)
							for (var f = 0; f < d[0].data.length; ++f) b.push('<li><span style="background-color:' + d[0].backgroundColor[f] + '">'), e[f] && b.push(e[f]), b.push("</span></li>");
						return b.push("</ul>"), b.join("")
					},
					legend: {
						labels: {
							generateLabels: function (a) {
								var c = a.data;
								return c.labels.length && c.datasets.length ? c.labels.map(function (d, e) {
									var f = a.getDatasetMeta(0),
										g = c.datasets[0],
										h = f.data[e],
										i = h.custom || {},
										j = b.getValueAtIndexOrDefault,
										k = a.options.elements.arc,
										l = i.backgroundColor ? i.backgroundColor : j(g.backgroundColor, e, k.backgroundColor),
										m = i.borderColor ? i.borderColor : j(g.borderColor, e, k.borderColor),
										n = i.borderWidth ? i.borderWidth : j(g.borderWidth, e, k.borderWidth);
									return {
										text: d,
										fillStyle: l,
										strokeStyle: m,
										lineWidth: n,
										hidden: isNaN(g.data[e]) || f.data[e].hidden,
										index: e
									}
								}) : []
							}
						},
						onClick: function (a, b) {
							var c, d, e, f = b.index,
								g = this.chart;
							for (c = 0, d = (g.data.datasets || []).length; c < d; ++c) e = g.getDatasetMeta(c), e.data[f].hidden = !e.data[f].hidden;
							g.update()
						}
					},
					tooltips: {
						callbacks: {
							title: function () {
								return ""
							},
							label: function (a, b) {
								return b.labels[a.index] + ": " + a.yLabel
							}
						}
					}
				}, a.controllers.polarArea = a.DatasetController.extend({
					dataElementType: a.elements.Arc,
					linkScales: b.noop,
					update: function (a) {
						var c = this,
							d = c.chart,
							e = d.chartArea,
							f = c.getMeta(),
							g = d.options,
							h = g.elements.arc,
							i = Math.min(e.right - e.left, e.bottom - e.top);
						d.outerRadius = Math.max((i - h.borderWidth / 2) / 2, 0), d.innerRadius = Math.max(g.cutoutPercentage ? d.outerRadius / 100 * g.cutoutPercentage : 1, 0), d.radiusLength = (d.outerRadius - d.innerRadius) / d.getVisibleDatasetCount(), c.outerRadius = d.outerRadius - d.radiusLength * c.index, c.innerRadius = c.outerRadius - d.radiusLength, f.count = c.countVisibleElements(), b.each(f.data, function (b, d) {
							c.updateElement(b, d, a)
						})
					},
					updateElement: function (a, c, d) {
						for (var e = this, f = e.chart, g = f.chartArea, h = e.getDataset(), i = f.options, j = i.animation, k = (i.elements.arc, a.custom || {}, f.scale), l = b.getValueAtIndexOrDefault, m = f.data.labels, n = e.calculateCircumference(h.data[c]), o = (g.left + g.right) / 2, p = (g.top + g.bottom) / 2, q = 0, r = e.getMeta(), s = 0; s < c; ++s) isNaN(h.data[s]) || r.data[s].hidden || ++q;
						var t = -.5 * Math.PI,
							u = a.hidden ? 0 : k.getDistanceFromCenterForValue(h.data[c]),
							v = t + n * q,
							w = v + (a.hidden ? 0 : n),
							x = j.animateScale ? 0 : k.getDistanceFromCenterForValue(h.data[c]);
						b.extend(a, {
							_datasetIndex: e.index,
							_index: c,
							_scale: k,
							_model: {
								x: o,
								y: p,
								innerRadius: 0,
								outerRadius: d ? x : u,
								startAngle: d && j.animateRotate ? t : v,
								endAngle: d && j.animateRotate ? t : w,
								label: l(m, c, m[c])
							}
						}), e.removeHoverStyle(a), a.pivot()
					},
					removeHoverStyle: function (b) {
						a.DatasetController.prototype.removeHoverStyle.call(this, b, this.chart.options.elements.arc)
					},
					countVisibleElements: function () {
						var a = this.getDataset(),
							c = this.getMeta(),
							d = 0;
						return b.each(c.data, function (b, c) {
							isNaN(a.data[c]) || b.hidden || d++
						}), d
					},
					calculateCircumference: function (a) {
						var b = this.getMeta().count;
						return b > 0 && !isNaN(a) ? 2 * Math.PI / b : 0
					}
				})
			}
		}, {}],
		20: [function (a, b, c) {
			"use strict";
			b.exports = function (a) {
				var b = a.helpers;
				a.defaults.radar = {
					scale: {
						type: "radialLinear"
					},
					elements: {
						line: {
							tension: 0
						}
					}
				}, a.controllers.radar = a.DatasetController.extend({
					datasetElementType: a.elements.Line,
					dataElementType: a.elements.Point,
					linkScales: b.noop,
					addElementAndReset: function (b) {
						a.DatasetController.prototype.addElementAndReset.call(this, b), this.updateBezierControlPoints()
					},
					update: function (a) {
						var c = this,
							d = c.getMeta(),
							e = d.dataset,
							f = d.data,
							g = e.custom || {},
							h = c.getDataset(),
							i = c.chart.options.elements.line,
							j = c.chart.scale;
						void 0 !== h.tension && void 0 === h.lineTension && (h.lineTension = h.tension), b.extend(d.dataset, {
							_datasetIndex: c.index,
							_children: f,
							_loop: !0,
							_model: {
								tension: g.tension ? g.tension : b.getValueOrDefault(h.lineTension, i.tension),
								backgroundColor: g.backgroundColor ? g.backgroundColor : h.backgroundColor || i.backgroundColor,
								borderWidth: g.borderWidth ? g.borderWidth : h.borderWidth || i.borderWidth,
								borderColor: g.borderColor ? g.borderColor : h.borderColor || i.borderColor,
								fill: g.fill ? g.fill : void 0 !== h.fill ? h.fill : i.fill,
								borderCapStyle: g.borderCapStyle ? g.borderCapStyle : h.borderCapStyle || i.borderCapStyle,
								borderDash: g.borderDash ? g.borderDash : h.borderDash || i.borderDash,
								borderDashOffset: g.borderDashOffset ? g.borderDashOffset : h.borderDashOffset || i.borderDashOffset,
								borderJoinStyle: g.borderJoinStyle ? g.borderJoinStyle : h.borderJoinStyle || i.borderJoinStyle,
								scaleTop: j.top,
								scaleBottom: j.bottom,
								scaleZero: j.getBasePosition()
							}
						}), d.dataset.pivot(), b.each(f, function (b, d) {
							c.updateElement(b, d, a)
						}, c), c.updateBezierControlPoints()
					},
					updateElement: function (a, c, d) {
						var e = this,
							f = a.custom || {},
							g = e.getDataset(),
							h = e.chart.scale,
							i = e.chart.options.elements.point,
							j = h.getPointPositionForValue(c, g.data[c]);
						b.extend(a, {
							_datasetIndex: e.index,
							_index: c,
							_scale: h,
							_model: {
								x: d ? h.xCenter : j.x,
								y: d ? h.yCenter : j.y,
								tension: f.tension ? f.tension : b.getValueOrDefault(g.tension, e.chart.options.elements.line.tension),
								radius: f.radius ? f.radius : b.getValueAtIndexOrDefault(g.pointRadius, c, i.radius),
								backgroundColor: f.backgroundColor ? f.backgroundColor : b.getValueAtIndexOrDefault(g.pointBackgroundColor, c, i.backgroundColor),
								borderColor: f.borderColor ? f.borderColor : b.getValueAtIndexOrDefault(g.pointBorderColor, c, i.borderColor),
								borderWidth: f.borderWidth ? f.borderWidth : b.getValueAtIndexOrDefault(g.pointBorderWidth, c, i.borderWidth),
								pointStyle: f.pointStyle ? f.pointStyle : b.getValueAtIndexOrDefault(g.pointStyle, c, i.pointStyle),
								hitRadius: f.hitRadius ? f.hitRadius : b.getValueAtIndexOrDefault(g.hitRadius, c, i.hitRadius)
							}
						}), a._model.skip = f.skip ? f.skip : isNaN(a._model.x) || isNaN(a._model.y)
					},
					updateBezierControlPoints: function () {
						var a = this.chart.chartArea,
							c = this.getMeta();
						b.each(c.data, function (d, e) {
							var f = d._model,
								g = b.splineCurve(b.previousItem(c.data, e, !0)._model, f, b.nextItem(c.data, e, !0)._model, f.tension);
							f.controlPointPreviousX = Math.max(Math.min(g.previous.x, a.right), a.left), f.controlPointPreviousY = Math.max(Math.min(g.previous.y, a.bottom), a.top), f.controlPointNextX = Math.max(Math.min(g.next.x, a.right), a.left), f.controlPointNextY = Math.max(Math.min(g.next.y, a.bottom), a.top), d.pivot()
						})
					},
					draw: function (a) {
						var c = this.getMeta(),
							d = a || 1;
						b.each(c.data, function (a, b) {
							a.transition(d)
						}), c.dataset.transition(d).draw(), b.each(c.data, function (a) {
							a.draw()
						})
					},
					setHoverStyle: function (a) {
						var c = this.chart.data.datasets[a._datasetIndex],
							d = a.custom || {},
							e = a._index,
							f = a._model;
						f.radius = d.hoverRadius ? d.hoverRadius : b.getValueAtIndexOrDefault(c.pointHoverRadius, e, this.chart.options.elements.point.hoverRadius), f.backgroundColor = d.hoverBackgroundColor ? d.hoverBackgroundColor : b.getValueAtIndexOrDefault(c.pointHoverBackgroundColor, e, b.getHoverColor(f.backgroundColor)), f.borderColor = d.hoverBorderColor ? d.hoverBorderColor : b.getValueAtIndexOrDefault(c.pointHoverBorderColor, e, b.getHoverColor(f.borderColor)), f.borderWidth = d.hoverBorderWidth ? d.hoverBorderWidth : b.getValueAtIndexOrDefault(c.pointHoverBorderWidth, e, f.borderWidth)
					},
					removeHoverStyle: function (a) {
						var c = this.chart.data.datasets[a._datasetIndex],
							d = a.custom || {},
							e = a._index,
							f = a._model,
							g = this.chart.options.elements.point;
						f.radius = d.radius ? d.radius : b.getValueAtIndexOrDefault(c.radius, e, g.radius), f.backgroundColor = d.backgroundColor ? d.backgroundColor : b.getValueAtIndexOrDefault(c.pointBackgroundColor, e, g.backgroundColor), f.borderColor = d.borderColor ? d.borderColor : b.getValueAtIndexOrDefault(c.pointBorderColor, e, g.borderColor), f.borderWidth = d.borderWidth ? d.borderWidth : b.getValueAtIndexOrDefault(c.pointBorderWidth, e, g.borderWidth)
					}
				})
			}
		}, {}],
		21: [function (a, b, c) {
			"use strict";
			b.exports = function (a) {
				var b = a.helpers;
				a.defaults.global.animation = {
					duration: 1e3,
					easing: "easeOutQuart",
					onProgress: b.noop,
					onComplete: b.noop
				}, a.Animation = a.Element.extend({
					currentStep: null,
					numSteps: 60,
					easing: "",
					render: null,
					onAnimationProgress: null,
					onAnimationComplete: null
				}), a.animationService = {
					frameDuration: 17,
					animations: [],
					dropFrames: 0,
					request: null,
					addAnimation: function (a, b, c, d) {
						var e = this;
						d || (a.animating = !0);
						for (var f = 0; f < e.animations.length; ++f)
							if (e.animations[f].chartInstance === a) return void(e.animations[f].animationObject = b);
						e.animations.push({
							chartInstance: a,
							animationObject: b
						}), 1 === e.animations.length && e.requestAnimationFrame()
					},
					cancelAnimation: function (a) {
						var c = b.findIndex(this.animations, function (b) {
							return b.chartInstance === a
						});
						c !== -1 && (this.animations.splice(c, 1), a.animating = !1)
					},
					requestAnimationFrame: function () {
						var a = this;
						null === a.request && (a.request = b.requestAnimFrame.call(window, function () {
							a.request = null, a.startDigest()
						}))
					},
					startDigest: function () {
						var a = this,
							b = Date.now(),
							c = 0;
						a.dropFrames > 1 && (c = Math.floor(a.dropFrames), a.dropFrames = a.dropFrames % 1);
						for (var d = 0; d < a.animations.length;) null === a.animations[d].animationObject.currentStep && (a.animations[d].animationObject.currentStep = 0), a.animations[d].animationObject.currentStep += 1 + c, a.animations[d].animationObject.currentStep > a.animations[d].animationObject.numSteps && (a.animations[d].animationObject.currentStep = a.animations[d].animationObject.numSteps), a.animations[d].animationObject.render(a.animations[d].chartInstance, a.animations[d].animationObject), a.animations[d].animationObject.onAnimationProgress && a.animations[d].animationObject.onAnimationProgress.call && a.animations[d].animationObject.onAnimationProgress.call(a.animations[d].chartInstance, a.animations[d]), a.animations[d].animationObject.currentStep === a.animations[d].animationObject.numSteps ? (a.animations[d].animationObject.onAnimationComplete && a.animations[d].animationObject.onAnimationComplete.call && a.animations[d].animationObject.onAnimationComplete.call(a.animations[d].chartInstance, a.animations[d]), a.animations[d].chartInstance.animating = !1, a.animations.splice(d, 1)) : ++d;
						var e = Date.now(),
							f = (e - b) / a.frameDuration;
						a.dropFrames += f, a.animations.length > 0 && a.requestAnimationFrame()
					}
				}
			}
		}, {}],
		22: [function (a, b, c) {
			"use strict";
			b.exports = function (a) {
				var b = a.helpers;
				a.types = {}, a.instances = {}, a.controllers = {}, a.Controller = function (c) {
					return this.chart = c, this.config = c.config, this.options = this.config.options = b.configMerge(a.defaults.global, a.defaults[this.config.type], this.config.options || {}), this.id = b.uid(), Object.defineProperty(this, "data", {
						get: function () {
							return this.config.data
						}
					}), a.instances[this.id] = this, this.options.responsive && this.resize(!0), this.initialize(), this
				}, b.extend(a.Controller.prototype, {
					initialize: function () {
						var b = this;
						return a.plugins.notify("beforeInit", [b]), b.bindEvents(), b.ensureScalesHaveIDs(), b.buildOrUpdateControllers(), b.buildScales(), b.updateLayout(), b.resetElements(), b.initToolTip(), b.update(), a.plugins.notify("afterInit", [b]), b
					},
					clear: function () {
						return b.clear(this.chart), this
					},
					stop: function () {
						return a.animationService.cancelAnimation(this), this
					},
					resize: function (c) {
						var d = this,
							e = d.chart,
							f = e.canvas,
							g = b.getMaximumWidth(f),
							h = e.aspectRatio,
							i = d.options.maintainAspectRatio && isNaN(h) === !1 && isFinite(h) && 0 !== h ? g / h : b.getMaximumHeight(f),
							j = e.width !== g || e.height !== i;
						if (!j) return d;
						f.width = e.width = g, f.height = e.height = i, b.retinaScale(e);
						var k = {
							width: g,
							height: i
						};
						return a.plugins.notify("resize", [d, k]), d.options.onResize && d.options.onResize(d, k), c || (d.stop(), d.update(d.options.responsiveAnimationDuration)), d
					},
					ensureScalesHaveIDs: function () {
						var a = this.options,
							c = a.scales || {},
							d = a.scale;
						b.each(c.xAxes, function (a, b) {
							a.id = a.id || "x-axis-" + b
						}), b.each(c.yAxes, function (a, b) {
							a.id = a.id || "y-axis-" + b
						}), d && (d.id = d.id || "scale")
					},
					buildScales: function () {
						var c = this,
							d = c.options,
							e = c.scales = {},
							f = [];
						d.scales && (f = f.concat((d.scales.xAxes || []).map(function (a) {
							return {
								options: a,
								dtype: "category"
							}
						}), (d.scales.yAxes || []).map(function (a) {
							return {
								options: a,
								dtype: "linear"
							}
						}))), d.scale && f.push({
							options: d.scale,
							dtype: "radialLinear",
							isDefault: !0
						}), b.each(f, function (d, f) {
							var g = d.options,
								h = b.getValueOrDefault(g.type, d.dtype),
								i = a.scaleService.getScaleConstructor(h);
							if (i) {
								var j = new i({
									id: g.id,
									options: g,
									ctx: c.chart.ctx,
									chart: c
								});
								e[j.id] = j, d.isDefault && (c.scale = j)
							}
						}), a.scaleService.addScalesToLayout(this)
					},
					updateLayout: function () {
						a.layoutService.update(this, this.chart.width, this.chart.height)
					},
					buildOrUpdateControllers: function () {
						var c = this,
							d = [],
							e = [];
						if (b.each(c.data.datasets, function (b, f) {
								var g = c.getDatasetMeta(f);
								g.type || (g.type = b.type || c.config.type), d.push(g.type), g.controller ? g.controller.updateIndex(f) : (g.controller = new a.controllers[g.type](c, f), e.push(g.controller))
							}, c), d.length > 1)
							for (var f = 1; f < d.length; f++)
								if (d[f] !== d[f - 1]) {
									c.isCombo = !0;
									break
								}
						return e
					},
					resetElements: function () {
						var a = this;
						b.each(a.data.datasets, function (b, c) {
							a.getDatasetMeta(c).controller.reset()
						}, a)
					},
					update: function (c, d) {
						var e = this;
						a.plugins.notify("beforeUpdate", [e]), e.tooltip._data = e.data;
						var f = e.buildOrUpdateControllers();
						b.each(e.data.datasets, function (a, b) {
							e.getDatasetMeta(b).controller.buildOrUpdateElements()
						}, e), a.layoutService.update(e, e.chart.width, e.chart.height), a.plugins.notify("afterScaleUpdate", [e]), b.each(f, function (a) {
							a.reset()
						}), e.updateDatasets(), a.plugins.notify("afterUpdate", [e]), e.render(c, d)
					},
					updateDatasets: function () {
						var b, c, d = this;
						if (a.plugins.notify("beforeDatasetsUpdate", [d])) {
							for (b = 0, c = d.data.datasets.length; b < c; ++b) d.getDatasetMeta(b).controller.update();
							a.plugins.notify("afterDatasetsUpdate", [d])
						}
					},
					render: function (c, d) {
						var e = this;
						a.plugins.notify("beforeRender", [e]);
						var f = e.options.animation;
						if (f && ("undefined" != typeof c && 0 !== c || "undefined" == typeof c && 0 !== f.duration)) {
							var g = new a.Animation;
							g.numSteps = (c || f.duration) / 16.66, g.easing = f.easing, g.render = function (a, c) {
								var d = b.easingEffects[c.easing],
									e = c.currentStep / c.numSteps,
									f = d(e);
								a.draw(f, e, c.currentStep)
							}, g.onAnimationProgress = f.onProgress, g.onAnimationComplete = f.onComplete, a.animationService.addAnimation(e, g, c, d)
						} else e.draw(), f && f.onComplete && f.onComplete.call && f.onComplete.call(e);
						return e
					},
					draw: function (c) {
						var d = this,
							e = c || 1;
						d.clear(), a.plugins.notify("beforeDraw", [d, e]), b.each(d.boxes, function (a) {
							a.draw(d.chartArea)
						}, d), d.scale && d.scale.draw(), a.plugins.notify("beforeDatasetsDraw", [d, e]), b.each(d.data.datasets, function (a, b) {
							d.isDatasetVisible(b) && d.getDatasetMeta(b).controller.draw(c)
						}, d, !0), a.plugins.notify("afterDatasetsDraw", [d, e]), d.tooltip.transition(e).draw(), a.plugins.notify("afterDraw", [d, e])
					},
					getElementAtEvent: function (a) {
						var c = this,
							d = b.getRelativePosition(a, c.chart),
							e = [];
						return b.each(c.data.datasets, function (a, f) {
							if (c.isDatasetVisible(f)) {
								var g = c.getDatasetMeta(f);
								b.each(g.data, function (a, b) {
									if (a.inRange(d.x, d.y)) return e.push(a), e
								})
							}
						}), e
					},
					getElementsAtEvent: function (a) {
						var c = this,
							d = b.getRelativePosition(a, c.chart),
							e = [],
							f = function () {
								if (c.data.datasets)
									for (var a = 0; a < c.data.datasets.length; a++) {
										var b = c.getDatasetMeta(a);
										if (c.isDatasetVisible(a))
											for (var e = 0; e < b.data.length; e++)
												if (b.data[e].inRange(d.x, d.y)) return b.data[e]
									}
							}.call(c);
						return f ? (b.each(c.data.datasets, function (a, b) {
							if (c.isDatasetVisible(b)) {
								var d = c.getDatasetMeta(b);
								e.push(d.data[f._index])
							}
						}, c), e) : e
					},
					getElementsAtEventForMode: function (a, b) {
						var c = this;
						switch (b) {
							case "single":
								return c.getElementAtEvent(a);
							case "label":
								return c.getElementsAtEvent(a);
							case "dataset":
								return c.getDatasetAtEvent(a);
							default:
								return a
						}
					},
					getDatasetAtEvent: function (a) {
						var b = this.getElementAtEvent(a);
						return b.length > 0 && (b = this.getDatasetMeta(b[0]._datasetIndex).data), b
					},
					getDatasetMeta: function (a) {
						var b = this,
							c = b.data.datasets[a];
						c._meta || (c._meta = {});
						var d = c._meta[b.id];
						return d || (d = c._meta[b.id] = {
							type: null,
							data: [],
							dataset: null,
							controller: null,
							hidden: null,
							xAxisID: null,
							yAxisID: null
						}), d
					},
					getVisibleDatasetCount: function () {
						for (var a = 0, b = 0, c = this.data.datasets.length; b < c; ++b) this.isDatasetVisible(b) && a++;
						return a
					},
					isDatasetVisible: function (a) {
						var b = this.getDatasetMeta(a);
						return "boolean" == typeof b.hidden ? !b.hidden : !this.data.datasets[a].hidden
					},
					generateLegend: function () {
						return this.options.legendCallback(this)
					},
					destroy: function () {
						var c = this;
						c.stop(), c.clear(), b.unbindEvents(c, c.events), b.removeResizeListener(c.chart.canvas.parentNode);
						var d = c.chart.canvas;
						d.width = c.chart.width, d.height = c.chart.height, void 0 !== c.chart.originalDevicePixelRatio && c.chart.ctx.scale(1 / c.chart.originalDevicePixelRatio, 1 / c.chart.originalDevicePixelRatio), d.style.width = c.chart.originalCanvasStyleWidth, d.style.height = c.chart.originalCanvasStyleHeight, a.plugins.notify("destroy", [c]), delete a.instances[c.id]
					},
					toBase64Image: function () {
						return this.chart.canvas.toDataURL.apply(this.chart.canvas, arguments)
					},
					initToolTip: function () {
						var b = this;
						b.tooltip = new a.Tooltip({
							_chart: b.chart,
							_chartInstance: b,
							_data: b.data,
							_options: b.options.tooltips
						}, b)
					},
					bindEvents: function () {
						var a = this;
						b.bindEvents(a, a.options.events, function (b) {
							a.eventHandler(b)
						})
					},
					updateHoverStyle: function (a, b, c) {
						var d, e, f, g = c ? "setHoverStyle" : "removeHoverStyle";
						switch (b) {
							case "single":
								a = [a[0]];
								break;
							case "label":
							case "dataset":
								break;
							default:
								return
						}
						for (e = 0, f = a.length; e < f; ++e) d = a[e], d && this.getDatasetMeta(d._datasetIndex).controller[g](d)
					},
					eventHandler: function (a) {
						var c = this,
							d = c.tooltip,
							e = c.options || {},
							f = e.hover,
							g = e.tooltips;
						return c.lastActive = c.lastActive || [], c.lastTooltipActive = c.lastTooltipActive || [], "mouseout" === a.type ? (c.active = [], c.tooltipActive = []) : (c.active = c.getElementsAtEventForMode(a, f.mode), c.tooltipActive = c.getElementsAtEventForMode(a, g.mode)), f.onHover && f.onHover.call(c, c.active), "mouseup" !== a.type && "click" !== a.type || (e.onClick && e.onClick.call(c, a, c.active), c.legend && c.legend.handleEvent && c.legend.handleEvent(a)), c.lastActive.length && c.updateHoverStyle(c.lastActive, f.mode, !1), c.active.length && f.mode && c.updateHoverStyle(c.active, f.mode, !0), (g.enabled || g.custom) && (d.initialize(), d._active = c.tooltipActive, d.update(!0)), d.pivot(), c.animating || b.arrayEquals(c.active, c.lastActive) && b.arrayEquals(c.tooltipActive, c.lastTooltipActive) || (c.stop(), (g.enabled || g.custom) && d.update(!0), c.render(f.animationDuration, !0)), c.lastActive = c.active, c.lastTooltipActive = c.tooltipActive, c
					}
				})
			}
		}, {}],
		23: [function (a, b, c) {
			"use strict";
			b.exports = function (a) {
				var b = a.helpers,
					c = b.noop;
				a.DatasetController = function (a, b) {
					this.initialize.call(this, a, b)
				}, b.extend(a.DatasetController.prototype, {
					datasetElementType: null,
					dataElementType: null,
					initialize: function (a, b) {
						var c = this;
						c.chart = a, c.index = b, c.linkScales(), c.addElements()
					},
					updateIndex: function (a) {
						this.index = a
					},
					linkScales: function () {
						var a = this,
							b = a.getMeta(),
							c = a.getDataset();
						null === b.xAxisID && (b.xAxisID = c.xAxisID || a.chart.options.scales.xAxes[0].id), null === b.yAxisID && (b.yAxisID = c.yAxisID || a.chart.options.scales.yAxes[0].id);
					},
					getDataset: function () {
						return this.chart.data.datasets[this.index]
					},
					getMeta: function () {
						return this.chart.getDatasetMeta(this.index)
					},
					getScaleForId: function (a) {
						return this.chart.scales[a]
					},
					reset: function () {
						this.update(!0)
					},
					createMetaDataset: function () {
						var a = this,
							b = a.datasetElementType;
						return b && new b({
							_chart: a.chart.chart,
							_datasetIndex: a.index
						})
					},
					createMetaData: function (a) {
						var b = this,
							c = b.dataElementType;
						return c && new c({
							_chart: b.chart.chart,
							_datasetIndex: b.index,
							_index: a
						})
					},
					addElements: function () {
						var a, b, c = this,
							d = c.getMeta(),
							e = c.getDataset().data || [],
							f = d.data;
						for (a = 0, b = e.length; a < b; ++a) f[a] = f[a] || c.createMetaData(d, a);
						d.dataset = d.dataset || c.createMetaDataset()
					},
					addElementAndReset: function (a) {
						var b = this,
							c = b.createMetaData(a);
						b.getMeta().data.splice(a, 0, c), b.updateElement(c, a, !0)
					},
					buildOrUpdateElements: function () {
						var a = this.getMeta(),
							b = a.data,
							c = this.getDataset().data.length,
							d = b.length;
						if (c < d) b.splice(c, d - c);
						else if (c > d)
							for (var e = d; e < c; ++e) this.addElementAndReset(e)
					},
					update: c,
					draw: function (a) {
						var c = a || 1;
						b.each(this.getMeta().data, function (a, b) {
							a.transition(c).draw()
						})
					},
					removeHoverStyle: function (a, c) {
						var d = this.chart.data.datasets[a._datasetIndex],
							e = a._index,
							f = a.custom || {},
							g = b.getValueAtIndexOrDefault,
							h = (b.color, a._model);
						h.backgroundColor = f.backgroundColor ? f.backgroundColor : g(d.backgroundColor, e, c.backgroundColor), h.borderColor = f.borderColor ? f.borderColor : g(d.borderColor, e, c.borderColor), h.borderWidth = f.borderWidth ? f.borderWidth : g(d.borderWidth, e, c.borderWidth)
					},
					setHoverStyle: function (a) {
						var c = this.chart.data.datasets[a._datasetIndex],
							d = a._index,
							e = a.custom || {},
							f = b.getValueAtIndexOrDefault,
							g = (b.color, b.getHoverColor),
							h = a._model;
						h.backgroundColor = e.hoverBackgroundColor ? e.hoverBackgroundColor : f(c.hoverBackgroundColor, d, g(h.backgroundColor)), h.borderColor = e.hoverBorderColor ? e.hoverBorderColor : f(c.hoverBorderColor, d, g(h.borderColor)), h.borderWidth = e.hoverBorderWidth ? e.hoverBorderWidth : f(c.hoverBorderWidth, d, h.borderWidth)
					}
				}), a.DatasetController.extend = b.inherits
			}
		}, {}],
		24: [function (a, b, c) {
			"use strict";
			b.exports = function (a) {
				var b = a.helpers;
				a.elements = {}, a.Element = function (a) {
					b.extend(this, a), this.initialize.apply(this, arguments)
				}, b.extend(a.Element.prototype, {
					initialize: function () {
						this.hidden = !1
					},
					pivot: function () {
						var a = this;
						return a._view || (a._view = b.clone(a._model)), a._start = b.clone(a._view), a
					},
					transition: function (a) {
						var c = this;
						return c._view || (c._view = b.clone(c._model)), 1 === a ? (c._view = c._model, c._start = null, c) : (c._start || c.pivot(), b.each(c._model, function (d, e) {
							if ("_" === e[0]);
							else if (c._view.hasOwnProperty(e))
								if (d === c._view[e]);
								else if ("string" == typeof d) try {
								var f = b.color(c._model[e]).mix(b.color(c._start[e]), a);
								c._view[e] = f.rgbString()
							} catch (a) {
								c._view[e] = d
							} else if ("number" == typeof d) {
								var g = void 0 !== c._start[e] && isNaN(c._start[e]) === !1 ? c._start[e] : 0;
								c._view[e] = (c._model[e] - g) * a + g
							} else c._view[e] = d;
							else "number" != typeof d || isNaN(c._view[e]) ? c._view[e] = d : c._view[e] = d * a
						}, c), c)
					},
					tooltipPosition: function () {
						return {
							x: this._model.x,
							y: this._model.y
						}
					},
					hasValue: function () {
						return b.isNumber(this._model.x) && b.isNumber(this._model.y)
					}
				}), a.Element.extend = b.inherits
			}
		}, {}],
		25: [function (a, b, c) {
			"use strict";
			var d = a(3);
			b.exports = function (a) {
				function b(a, b, c) {
					var d;
					return "string" == typeof a ? (d = parseInt(a, 10), a.indexOf("%") != -1 && (d = d / 100 * b.parentNode[c])) : d = a, d
				}

				function c(a) {
					return void 0 !== a && null !== a && "none" !== a
				}

				function e(a, d, e) {
					var f = document.defaultView,
						g = a.parentNode,
						h = f.getComputedStyle(a)[d],
						i = f.getComputedStyle(g)[d],
						j = c(h),
						k = c(i),
						l = Number.POSITIVE_INFINITY;
					return j || k ? Math.min(j ? b(h, a, e) : l, k ? b(i, g, e) : l) : "none"
				}
				var f = a.helpers = {};
				f.each = function (a, b, c, d) {
					var e, g;
					if (f.isArray(a))
						if (g = a.length, d)
							for (e = g - 1; e >= 0; e--) b.call(c, a[e], e);
						else
							for (e = 0; e < g; e++) b.call(c, a[e], e);
					else if ("object" == typeof a) {
						var h = Object.keys(a);
						for (g = h.length, e = 0; e < g; e++) b.call(c, a[h[e]], h[e])
					}
				}, f.clone = function (a) {
					var b = {};
					return f.each(a, function (a, c) {
						f.isArray(a) ? b[c] = a.slice(0) : "object" == typeof a && null !== a ? b[c] = f.clone(a) : b[c] = a
					}), b
				}, f.extend = function (a) {
					for (var b = function (b, c) {
							a[c] = b
						}, c = 1, d = arguments.length; c < d; c++) f.each(arguments[c], b);
					return a
				}, f.configMerge = function (b) {
					var c = f.clone(b);
					return f.each(Array.prototype.slice.call(arguments, 1), function (b) {
						f.each(b, function (b, d) {
							if ("scales" === d) c[d] = f.scaleMerge(c.hasOwnProperty(d) ? c[d] : {}, b);
							else if ("scale" === d) c[d] = f.configMerge(c.hasOwnProperty(d) ? c[d] : {}, a.scaleService.getScaleDefaults(b.type), b);
							else if (c.hasOwnProperty(d) && f.isArray(c[d]) && f.isArray(b)) {
								var e = c[d];
								f.each(b, function (a, b) {
									b < e.length ? "object" == typeof e[b] && null !== e[b] && "object" == typeof a && null !== a ? e[b] = f.configMerge(e[b], a) : e[b] = a : e.push(a)
								})
							} else c.hasOwnProperty(d) && "object" == typeof c[d] && null !== c[d] && "object" == typeof b ? c[d] = f.configMerge(c[d], b) : c[d] = b
						})
					}), c
				}, f.scaleMerge = function (b, c) {
					var d = f.clone(b);
					return f.each(c, function (b, c) {
						"xAxes" === c || "yAxes" === c ? d.hasOwnProperty(c) ? f.each(b, function (b, e) {
							var g = f.getValueOrDefault(b.type, "xAxes" === c ? "category" : "linear"),
								h = a.scaleService.getScaleDefaults(g);
							e >= d[c].length || !d[c][e].type ? d[c].push(f.configMerge(h, b)) : b.type && b.type !== d[c][e].type ? d[c][e] = f.configMerge(d[c][e], h, b) : d[c][e] = f.configMerge(d[c][e], b)
						}) : (d[c] = [], f.each(b, function (b) {
							var e = f.getValueOrDefault(b.type, "xAxes" === c ? "category" : "linear");
							d[c].push(f.configMerge(a.scaleService.getScaleDefaults(e), b))
						})) : d.hasOwnProperty(c) && "object" == typeof d[c] && null !== d[c] && "object" == typeof b ? d[c] = f.configMerge(d[c], b) : d[c] = b
					}), d
				}, f.getValueAtIndexOrDefault = function (a, b, c) {
					return void 0 === a || null === a ? c : f.isArray(a) ? b < a.length ? a[b] : c : a
				}, f.getValueOrDefault = function (a, b) {
					return void 0 === a ? b : a
				}, f.indexOf = Array.prototype.indexOf ? function (a, b) {
					return a.indexOf(b)
				} : function (a, b) {
					for (var c = 0, d = a.length; c < d; ++c)
						if (a[c] === b) return c;
					return -1
				}, f.where = function (a, b) {
					if (f.isArray(a) && Array.prototype.filter) return a.filter(b);
					var c = [];
					return f.each(a, function (a) {
						b(a) && c.push(a)
					}), c
				}, f.findIndex = Array.prototype.findIndex ? function (a, b, c) {
					return a.findIndex(b, c)
				} : function (a, b, c) {
					c = void 0 === c ? a : c;
					for (var d = 0, e = a.length; d < e; ++d)
						if (b.call(c, a[d], d, a)) return d;
					return -1
				}, f.findNextWhere = function (a, b, c) {
					void 0 !== c && null !== c || (c = -1);
					for (var d = c + 1; d < a.length; d++) {
						var e = a[d];
						if (b(e)) return e
					}
				}, f.findPreviousWhere = function (a, b, c) {
					void 0 !== c && null !== c || (c = a.length);
					for (var d = c - 1; d >= 0; d--) {
						var e = a[d];
						if (b(e)) return e
					}
				}, f.inherits = function (a) {
					var b = this,
						c = a && a.hasOwnProperty("constructor") ? a.constructor : function () {
							return b.apply(this, arguments)
						},
						d = function () {
							this.constructor = c
						};
					return d.prototype = b.prototype, c.prototype = new d, c.extend = f.inherits, a && f.extend(c.prototype, a), c.__super__ = b.prototype, c
				}, f.noop = function () {}, f.uid = function () {
					var a = 0;
					return function () {
						return a++
					}
				}(), f.isNumber = function (a) {
					return !isNaN(parseFloat(a)) && isFinite(a)
				}, f.almostEquals = function (a, b, c) {
					return Math.abs(a - b) < c
				}, f.max = function (a) {
					return a.reduce(function (a, b) {
						return isNaN(b) ? a : Math.max(a, b)
					}, Number.NEGATIVE_INFINITY)
				}, f.min = function (a) {
					return a.reduce(function (a, b) {
						return isNaN(b) ? a : Math.min(a, b)
					}, Number.POSITIVE_INFINITY)
				}, f.sign = Math.sign ? function (a) {
					return Math.sign(a)
				} : function (a) {
					return a = +a, 0 === a || isNaN(a) ? a : a > 0 ? 1 : -1
				}, f.log10 = Math.log10 ? function (a) {
					return Math.log10(a)
				} : function (a) {
					return Math.log(a) / Math.LN10
				}, f.toRadians = function (a) {
					return a * (Math.PI / 180)
				}, f.toDegrees = function (a) {
					return a * (180 / Math.PI)
				}, f.getAngleFromPoint = function (a, b) {
					var c = b.x - a.x,
						d = b.y - a.y,
						e = Math.sqrt(c * c + d * d),
						f = Math.atan2(d, c);
					return f < -.5 * Math.PI && (f += 2 * Math.PI), {
						angle: f,
						distance: e
					}
				}, f.aliasPixel = function (a) {
					return a % 2 === 0 ? 0 : .5
				}, f.splineCurve = function (a, b, c, d) {
					var e = a.skip ? b : a,
						f = b,
						g = c.skip ? b : c,
						h = Math.sqrt(Math.pow(f.x - e.x, 2) + Math.pow(f.y - e.y, 2)),
						i = Math.sqrt(Math.pow(g.x - f.x, 2) + Math.pow(g.y - f.y, 2)),
						j = h / (h + i),
						k = i / (h + i);
					j = isNaN(j) ? 0 : j, k = isNaN(k) ? 0 : k;
					var l = d * j,
						m = d * k;
					return {
						previous: {
							x: f.x - l * (g.x - e.x),
							y: f.y - l * (g.y - e.y)
						},
						next: {
							x: f.x + m * (g.x - e.x),
							y: f.y + m * (g.y - e.y)
						}
					}
				}, f.nextItem = function (a, b, c) {
					return c ? b >= a.length - 1 ? a[0] : a[b + 1] : b >= a.length - 1 ? a[a.length - 1] : a[b + 1]
				}, f.previousItem = function (a, b, c) {
					return c ? b <= 0 ? a[a.length - 1] : a[b - 1] : b <= 0 ? a[0] : a[b - 1]
				}, f.niceNum = function (a, b) {
					var c, d = Math.floor(f.log10(a)),
						e = a / Math.pow(10, d);
					return c = b ? e < 1.5 ? 1 : e < 3 ? 2 : e < 7 ? 5 : 10 : e <= 1 ? 1 : e <= 2 ? 2 : e <= 5 ? 5 : 10, c * Math.pow(10, d)
				};
				var g = f.easingEffects = {
					linear: function (a) {
						return a
					},
					easeInQuad: function (a) {
						return a * a
					},
					easeOutQuad: function (a) {
						return -1 * a * (a - 2)
					},
					easeInOutQuad: function (a) {
						return (a /= .5) < 1 ? .5 * a * a : -.5 * (--a * (a - 2) - 1)
					},
					easeInCubic: function (a) {
						return a * a * a
					},
					easeOutCubic: function (a) {
						return 1 * ((a = a / 1 - 1) * a * a + 1)
					},
					easeInOutCubic: function (a) {
						return (a /= .5) < 1 ? .5 * a * a * a : .5 * ((a -= 2) * a * a + 2)
					},
					easeInQuart: function (a) {
						return a * a * a * a
					},
					easeOutQuart: function (a) {
						return -1 * ((a = a / 1 - 1) * a * a * a - 1)
					},
					easeInOutQuart: function (a) {
						return (a /= .5) < 1 ? .5 * a * a * a * a : -.5 * ((a -= 2) * a * a * a - 2)
					},
					easeInQuint: function (a) {
						return 1 * (a /= 1) * a * a * a * a
					},
					easeOutQuint: function (a) {
						return 1 * ((a = a / 1 - 1) * a * a * a * a + 1)
					},
					easeInOutQuint: function (a) {
						return (a /= .5) < 1 ? .5 * a * a * a * a * a : .5 * ((a -= 2) * a * a * a * a + 2)
					},
					easeInSine: function (a) {
						return -1 * Math.cos(a / 1 * (Math.PI / 2)) + 1
					},
					easeOutSine: function (a) {
						return 1 * Math.sin(a / 1 * (Math.PI / 2))
					},
					easeInOutSine: function (a) {
						return -.5 * (Math.cos(Math.PI * a / 1) - 1)
					},
					easeInExpo: function (a) {
						return 0 === a ? 1 : 1 * Math.pow(2, 10 * (a / 1 - 1))
					},
					easeOutExpo: function (a) {
						return 1 === a ? 1 : 1 * (-Math.pow(2, -10 * a / 1) + 1)
					},
					easeInOutExpo: function (a) {
						return 0 === a ? 0 : 1 === a ? 1 : (a /= .5) < 1 ? .5 * Math.pow(2, 10 * (a - 1)) : .5 * (-Math.pow(2, -10 * --a) + 2)
					},
					easeInCirc: function (a) {
						return a >= 1 ? a : -1 * (Math.sqrt(1 - (a /= 1) * a) - 1)
					},
					easeOutCirc: function (a) {
						return 1 * Math.sqrt(1 - (a = a / 1 - 1) * a)
					},
					easeInOutCirc: function (a) {
						return (a /= .5) < 1 ? -.5 * (Math.sqrt(1 - a * a) - 1) : .5 * (Math.sqrt(1 - (a -= 2) * a) + 1)
					},
					easeInElastic: function (a) {
						var b = 1.70158,
							c = 0,
							d = 1;
						return 0 === a ? 0 : 1 === (a /= 1) ? 1 : (c || (c = .3), d < Math.abs(1) ? (d = 1, b = c / 4) : b = c / (2 * Math.PI) * Math.asin(1 / d), -(d * Math.pow(2, 10 * (a -= 1)) * Math.sin((1 * a - b) * (2 * Math.PI) / c)))
					},
					easeOutElastic: function (a) {
						var b = 1.70158,
							c = 0,
							d = 1;
						return 0 === a ? 0 : 1 === (a /= 1) ? 1 : (c || (c = .3), d < Math.abs(1) ? (d = 1, b = c / 4) : b = c / (2 * Math.PI) * Math.asin(1 / d), d * Math.pow(2, -10 * a) * Math.sin((1 * a - b) * (2 * Math.PI) / c) + 1)
					},
					easeInOutElastic: function (a) {
						var b = 1.70158,
							c = 0,
							d = 1;
						return 0 === a ? 0 : 2 === (a /= .5) ? 1 : (c || (c = 1 * (.3 * 1.5)), d < Math.abs(1) ? (d = 1, b = c / 4) : b = c / (2 * Math.PI) * Math.asin(1 / d), a < 1 ? -.5 * (d * Math.pow(2, 10 * (a -= 1)) * Math.sin((1 * a - b) * (2 * Math.PI) / c)) : d * Math.pow(2, -10 * (a -= 1)) * Math.sin((1 * a - b) * (2 * Math.PI) / c) * .5 + 1)
					},
					easeInBack: function (a) {
						var b = 1.70158;
						return 1 * (a /= 1) * a * ((b + 1) * a - b)
					},
					easeOutBack: function (a) {
						var b = 1.70158;
						return 1 * ((a = a / 1 - 1) * a * ((b + 1) * a + b) + 1)
					},
					easeInOutBack: function (a) {
						var b = 1.70158;
						return (a /= .5) < 1 ? .5 * (a * a * (((b *= 1.525) + 1) * a - b)) : .5 * ((a -= 2) * a * (((b *= 1.525) + 1) * a + b) + 2)
					},
					easeInBounce: function (a) {
						return 1 - g.easeOutBounce(1 - a)
					},
					easeOutBounce: function (a) {
						return (a /= 1) < 1 / 2.75 ? 1 * (7.5625 * a * a) : a < 2 / 2.75 ? 1 * (7.5625 * (a -= 1.5 / 2.75) * a + .75) : a < 2.5 / 2.75 ? 1 * (7.5625 * (a -= 2.25 / 2.75) * a + .9375) : 1 * (7.5625 * (a -= 2.625 / 2.75) * a + .984375)
					},
					easeInOutBounce: function (a) {
						return a < .5 ? .5 * g.easeInBounce(2 * a) : .5 * g.easeOutBounce(2 * a - 1) + .5
					}
				};
				f.requestAnimFrame = function () {
						return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (a) {
							return window.setTimeout(a, 1e3 / 60)
						}
					}(), f.cancelAnimFrame = function () {
						return window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.oCancelAnimationFrame || window.msCancelAnimationFrame || function (a) {
							return window.clearTimeout(a, 1e3 / 60)
						}
					}(), f.getRelativePosition = function (a, b) {
						var c, d, e = a.originalEvent || a,
							g = a.currentTarget || a.srcElement,
							h = g.getBoundingClientRect(),
							i = e.touches;
						i && i.length > 0 ? (c = i[0].clientX, d = i[0].clientY) : (c = e.clientX, d = e.clientY);
						var j = parseFloat(f.getStyle(g, "padding-left")),
							k = parseFloat(f.getStyle(g, "padding-top")),
							l = parseFloat(f.getStyle(g, "padding-right")),
							m = parseFloat(f.getStyle(g, "padding-bottom")),
							n = h.right - h.left - j - l,
							o = h.bottom - h.top - k - m;
						return c = Math.round((c - h.left - j) / n * g.width / b.currentDevicePixelRatio), d = Math.round((d - h.top - k) / o * g.height / b.currentDevicePixelRatio), {
							x: c,
							y: d
						}
					}, f.addEvent = function (a, b, c) {
						a.addEventListener ? a.addEventListener(b, c) : a.attachEvent ? a.attachEvent("on" + b, c) : a["on" + b] = c
					}, f.removeEvent = function (a, b, c) {
						a.removeEventListener ? a.removeEventListener(b, c, !1) : a.detachEvent ? a.detachEvent("on" + b, c) : a["on" + b] = f.noop
					}, f.bindEvents = function (a, b, c) {
						var d = a.events = a.events || {};
						f.each(b, function (b) {
							d[b] = function () {
								c.apply(a, arguments)
							}, f.addEvent(a.chart.canvas, b, d[b])
						})
					}, f.unbindEvents = function (a, b) {
						var c = a.chart.canvas;
						f.each(b, function (a, b) {
							f.removeEvent(c, b, a)
						})
					}, f.getConstraintWidth = function (a) {
						return e(a, "max-width", "clientWidth")
					}, f.getConstraintHeight = function (a) {
						return e(a, "max-height", "clientHeight")
					}, f.getMaximumWidth = function (a) {
						var b = a.parentNode,
							c = parseInt(f.getStyle(b, "padding-left")) + parseInt(f.getStyle(b, "padding-right")),
							d = b.clientWidth - c,
							e = f.getConstraintWidth(a);
						return isNaN(e) ? d : Math.min(d, e)
					}, f.getMaximumHeight = function (a) {
						var b = a.parentNode,
							c = parseInt(f.getStyle(b, "padding-top")) + parseInt(f.getStyle(b, "padding-bottom")),
							d = b.clientHeight - c,
							e = f.getConstraintHeight(a);
						return isNaN(e) ? d : Math.min(d, e)
					}, f.getStyle = function (a, b) {
						return a.currentStyle ? a.currentStyle[b] : document.defaultView.getComputedStyle(a, null).getPropertyValue(b)
					}, f.retinaScale = function (a) {
						var b = a.ctx,
							c = a.canvas,
							d = c.width,
							e = c.height,
							f = a.currentDevicePixelRatio = window.devicePixelRatio || 1;
						1 !== f && (c.height = e * f, c.width = d * f, b.scale(f, f), a.originalDevicePixelRatio = a.originalDevicePixelRatio || f), c.style.width = d + "px", c.style.height = e + "px"
					}, f.clear = function (a) {
						a.ctx.clearRect(0, 0, a.width, a.height)
					}, f.fontString = function (a, b, c) {
						return b + " " + a + "px " + c
					}, f.longestText = function (a, b, c, d) {
						d = d || {};
						var e = d.data = d.data || {},
							g = d.garbageCollect = d.garbageCollect || [];
						d.font !== b && (e = d.data = {}, g = d.garbageCollect = [], d.font = b), a.font = b;
						var h = 0;
						f.each(c, function (b) {
							void 0 !== b && null !== b && f.isArray(b) !== !0 ? h = f.measureText(a, e, g, h, b) : f.isArray(b) && f.each(b, function (b) {
								void 0 === b || null === b || f.isArray(b) || (h = f.measureText(a, e, g, h, b))
							})
						});
						var i = g.length / 2;
						if (i > c.length) {
							for (var j = 0; j < i; j++) delete e[g[j]];
							g.splice(0, i)
						}
						return h
					}, f.measureText = function (a, b, c, d, e) {
						var f = b[e];
						return f || (f = b[e] = a.measureText(e).width, c.push(e)), f > d && (d = f), d
					}, f.numberOfLabelLines = function (a) {
						var b = 1;
						return f.each(a, function (a) {
							f.isArray(a) && a.length > b && (b = a.length)
						}), b
					}, f.drawRoundedRectangle = function (a, b, c, d, e, f) {
						a.beginPath(), a.moveTo(b + f, c), a.lineTo(b + d - f, c), a.quadraticCurveTo(b + d, c, b + d, c + f), a.lineTo(b + d, c + e - f), a.quadraticCurveTo(b + d, c + e, b + d - f, c + e), a.lineTo(b + f, c + e), a.quadraticCurveTo(b, c + e, b, c + e - f), a.lineTo(b, c + f), a.quadraticCurveTo(b, c, b + f, c), a.closePath()
					}, f.color = function (b) {
						return d ? d(b instanceof CanvasGradient ? a.defaults.global.defaultColor : b) : (console.log("Color.js not found!"), b)
					}, f.addResizeListener = function (a, b) {
						var c = document.createElement("iframe"),
							d = "chartjs-hidden-iframe";
						c.classlist ? c.classlist.add(d) : c.setAttribute("class", d);
						var e = c.style;
						e.width = "100%", e.display = "block", e.border = 0, e.height = 0, e.margin = 0, e.position = "absolute", e.left = 0, e.right = 0, e.top = 0, e.bottom = 0, a.insertBefore(c, a.firstChild), (c.contentWindow || c).onresize = function () {
							b && b()
						}
					}, f.removeResizeListener = function (a) {
						var b = a.querySelector(".chartjs-hidden-iframe");
						b && b.parentNode.removeChild(b)
					}, f.isArray = Array.isArray ? function (a) {
						return Array.isArray(a)
					} : function (a) {
						return "[object Array]" === Object.prototype.toString.call(a)
					},
					//! @see http://stackoverflow.com/a/14853974
					f.arrayEquals = function (a, b) {
						var c, d, e, g;
						if (!a || !b || a.length != b.length) return !1;
						for (c = 0, d = a.length; c < d; ++c)
							if (e = a[c], g = b[c], e instanceof Array && g instanceof Array) {
								if (!f.arrayEquals(e, g)) return !1
							} else if (e != g) return !1;
						return !0
					}, f.callCallback = function (a, b, c) {
						a && "function" == typeof a.call && a.apply(c, b)
					}, f.getHoverColor = function (a) {
						return a instanceof CanvasPattern ? a : f.color(a).saturate(.5).darken(.1).rgbString()
					}
			}
		}, {
			3: 3
		}],
		26: [function (a, b, c) {
			"use strict";
			b.exports = function () {
				var a = function (b, c) {
					var d = this,
						e = a.helpers;
					return d.config = c, b.length && b[0].getContext && (b = b[0]), b.getContext && (b = b.getContext("2d")), d.ctx = b, d.canvas = b.canvas, b.canvas.style.display = b.canvas.style.display || "block", d.width = b.canvas.width || parseInt(e.getStyle(b.canvas, "width"), 10) || e.getMaximumWidth(b.canvas), d.height = b.canvas.height || parseInt(e.getStyle(b.canvas, "height"), 10) || e.getMaximumHeight(b.canvas), d.aspectRatio = d.width / d.height, (isNaN(d.aspectRatio) || isFinite(d.aspectRatio) === !1) && (d.aspectRatio = void 0 !== c.aspectRatio ? c.aspectRatio : 2), d.originalCanvasStyleWidth = b.canvas.style.width, d.originalCanvasStyleHeight = b.canvas.style.height, e.retinaScale(d), c && (d.controller = new a.Controller(d)), e.addResizeListener(b.canvas.parentNode, function () {
						d.controller && d.controller.config.options.responsive && d.controller.resize()
					}), d.controller ? d.controller : d
				};
				return a.defaults = {
					global: {
						responsive: !0,
						responsiveAnimationDuration: 0,
						maintainAspectRatio: !0,
						events: ["mousemove", "mouseout", "click", "touchstart", "touchmove"],
						hover: {
							onHover: null,
							mode: "single",
							animationDuration: 400
						},
						onClick: null,
						defaultColor: "rgba(0,0,0,0.1)",
						defaultFontColor: "#666",
						defaultFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
						defaultFontSize: 12,
						defaultFontStyle: "normal",
						showLines: !0,
						elements: {},
						legendCallback: function (a) {
							var b = [];
							b.push('<ul class="' + a.id + '-legend">');
							for (var c = 0; c < a.data.datasets.length; c++) b.push('<li><span style="background-color:' + a.data.datasets[c].backgroundColor + '"></span>'), a.data.datasets[c].label && b.push(a.data.datasets[c].label), b.push("</li>");
							return b.push("</ul>"), b.join("")
						}
					}
				}, a.Chart = a, a
			}
		}, {}],
		27: [function (a, b, c) {
			"use strict";
			b.exports = function (a) {
				var b = a.helpers;
				a.layoutService = {
					defaults: {},
					addBox: function (a, b) {
						a.boxes || (a.boxes = []), a.boxes.push(b)
					},
					removeBox: function (a, b) {
						a.boxes && a.boxes.splice(a.boxes.indexOf(b), 1)
					},
					update: function (a, c, d) {
						function e(a) {
							var b, c = a.isHorizontal();
							c ? (b = a.update(a.options.fullWidth ? p : v, u), w -= b.height) : (b = a.update(t, s), v -= b.width), x.push({
								horizontal: c,
								minSize: b,
								box: a
							})
						}

						function f(a) {
							var c = b.findNextWhere(x, function (b) {
								return b.box === a
							});
							if (c)
								if (a.isHorizontal()) {
									var d = {
										left: y,
										right: z,
										top: 0,
										bottom: 0
									};
									a.update(a.options.fullWidth ? p : v, q / 2, d)
								} else a.update(c.minSize.width, w)
						}

						function g(a) {
							var c = b.findNextWhere(x, function (b) {
									return b.box === a
								}),
								d = {
									left: 0,
									right: 0,
									top: A,
									bottom: B
								};
							c && a.update(c.minSize.width, w, d)
						}

						function h(a) {
							a.isHorizontal() ? (a.left = a.options.fullWidth ? i : y, a.right = a.options.fullWidth ? c - i : y + v, a.top = F, a.bottom = F + a.height, F = a.bottom) : (a.left = E, a.right = E + a.width, a.top = A, a.bottom = A + w, E = a.right)
						}
						if (a) {
							var i = 0,
								j = 0,
								k = b.where(a.boxes, function (a) {
									return "left" === a.options.position
								}),
								l = b.where(a.boxes, function (a) {
									return "right" === a.options.position
								}),
								m = b.where(a.boxes, function (a) {
									return "top" === a.options.position
								}),
								n = b.where(a.boxes, function (a) {
									return "bottom" === a.options.position
								}),
								o = b.where(a.boxes, function (a) {
									return "chartArea" === a.options.position
								});
							m.sort(function (a, b) {
								return (b.options.fullWidth ? 1 : 0) - (a.options.fullWidth ? 1 : 0)
							}), n.sort(function (a, b) {
								return (a.options.fullWidth ? 1 : 0) - (b.options.fullWidth ? 1 : 0)
							});
							var p = c - 2 * i,
								q = d - 2 * j,
								r = p / 2,
								s = q / 2,
								t = (c - r) / (k.length + l.length),
								u = (d - s) / (m.length + n.length),
								v = p,
								w = q,
								x = [];
							b.each(k.concat(l, m, n), e);
							var y = i,
								z = i,
								A = j,
								B = j;
							b.each(k.concat(l), f), b.each(k, function (a) {
								y += a.width
							}), b.each(l, function (a) {
								z += a.width
							}), b.each(m.concat(n), f), b.each(m, function (a) {
								A += a.height
							}), b.each(n, function (a) {
								B += a.height
							}), b.each(k.concat(l), g), y = i, z = i, A = j, B = j, b.each(k, function (a) {
								y += a.width
							}), b.each(l, function (a) {
								z += a.width
							}), b.each(m, function (a) {
								A += a.height
							}), b.each(n, function (a) {
								B += a.height
							});
							var C = d - A - B,
								D = c - y - z;
							D === v && C === w || (b.each(k, function (a) {
								a.height = C
							}), b.each(l, function (a) {
								a.height = C
							}), b.each(m, function (a) {
								a.options.fullWidth || (a.width = D)
							}), b.each(n, function (a) {
								a.options.fullWidth || (a.width = D)
							}), w = C, v = D);
							var E = i,
								F = j;
							b.each(k.concat(m), h), E += v, F += w, b.each(l, h), b.each(n, h), a.chartArea = {
								left: y,
								top: A,
								right: y + v,
								bottom: A + w
							}, b.each(o, function (b) {
								b.left = a.chartArea.left, b.top = a.chartArea.top, b.right = a.chartArea.right, b.bottom = a.chartArea.bottom, b.update(v, w)
							})
						}
					}
				}
			}
		}, {}],
		28: [function (a, b, c) {
			"use strict";
			b.exports = function (a) {
				var b = a.helpers,
					c = b.noop;
				a.defaults.global.legend = {
					display: !0,
					position: "top",
					fullWidth: !0,
					reverse: !1,
					onClick: function (a, b) {
						var c = b.datasetIndex,
							d = this.chart,
							e = d.getDatasetMeta(c);
						e.hidden = null === e.hidden ? !d.data.datasets[c].hidden : null, d.update()
					},
					labels: {
						boxWidth: 40,
						padding: 10,
						generateLabels: function (a) {
							var c = a.data;
							return b.isArray(c.datasets) ? c.datasets.map(function (c, d) {
								return {
									text: c.label,
									fillStyle: b.isArray(c.backgroundColor) ? c.backgroundColor[0] : c.backgroundColor,
									hidden: !a.isDatasetVisible(d),
									lineCap: c.borderCapStyle,
									lineDash: c.borderDash,
									lineDashOffset: c.borderDashOffset,
									lineJoin: c.borderJoinStyle,
									lineWidth: c.borderWidth,
									strokeStyle: c.borderColor,
									datasetIndex: d
								}
							}, this) : []
						}
					}
				}, a.Legend = a.Element.extend({
					initialize: function (a) {
						b.extend(this, a), this.legendHitBoxes = [], this.doughnutMode = !1
					},
					beforeUpdate: c,
					update: function (a, b, c) {
						var d = this;
						return d.beforeUpdate(), d.maxWidth = a, d.maxHeight = b, d.margins = c, d.beforeSetDimensions(), d.setDimensions(), d.afterSetDimensions(), d.beforeBuildLabels(), d.buildLabels(), d.afterBuildLabels(), d.beforeFit(), d.fit(), d.afterFit(), d.afterUpdate(), d.minSize
					},
					afterUpdate: c,
					beforeSetDimensions: c,
					setDimensions: function () {
						var a = this;
						a.isHorizontal() ? (a.width = a.maxWidth, a.left = 0, a.right = a.width) : (a.height = a.maxHeight, a.top = 0, a.bottom = a.height), a.paddingLeft = 0, a.paddingTop = 0, a.paddingRight = 0, a.paddingBottom = 0, a.minSize = {
							width: 0,
							height: 0
						}
					},
					afterSetDimensions: c,
					beforeBuildLabels: c,
					buildLabels: function () {
						var a = this;
						a.legendItems = a.options.labels.generateLabels.call(a, a.chart), a.options.reverse && a.legendItems.reverse()
					},
					afterBuildLabels: c,
					beforeFit: c,
					fit: function () {
						var c = this,
							d = c.options,
							e = d.labels,
							f = d.display,
							g = c.ctx,
							h = a.defaults.global,
							i = b.getValueOrDefault,
							j = i(e.fontSize, h.defaultFontSize),
							k = i(e.fontStyle, h.defaultFontStyle),
							l = i(e.fontFamily, h.defaultFontFamily),
							m = b.fontString(j, k, l),
							n = c.legendHitBoxes = [],
							o = c.minSize,
							p = c.isHorizontal();
						if (p ? (o.width = c.maxWidth, o.height = f ? 10 : 0) : (o.width = f ? 10 : 0, o.height = c.maxHeight), f)
							if (g.font = m, p) {
								var q = c.lineWidths = [0],
									r = c.legendItems.length ? j + e.padding : 0;
								g.textAlign = "left", g.textBaseline = "top", b.each(c.legendItems, function (a, b) {
									var d = e.boxWidth + j / 2 + g.measureText(a.text).width;
									q[q.length - 1] + d + e.padding >= c.width && (r += j + e.padding, q[q.length] = c.left), n[b] = {
										left: 0,
										top: 0,
										width: d,
										height: j
									}, q[q.length - 1] += d + e.padding
								}), o.height += r
							} else {
								var s = e.padding,
									t = c.columnWidths = [],
									u = e.padding,
									v = 0,
									w = 0,
									x = j + s;
								b.each(c.legendItems, function (a, b) {
									var c = e.boxWidth + j / 2 + g.measureText(a.text).width;
									w + x > o.height && (u += v + e.padding, t.push(v), v = 0, w = 0), v = Math.max(v, c), w += x, n[b] = {
										left: 0,
										top: 0,
										width: c,
										height: j
									}
								}), u += v, t.push(v), o.width += u
							}
						c.width = o.width, c.height = o.height
					},
					afterFit: c,
					isHorizontal: function () {
						return "top" === this.options.position || "bottom" === this.options.position
					},
					draw: function () {
						var c = this,
							d = c.options,
							e = d.labels,
							f = a.defaults.global,
							g = f.elements.line,
							h = c.width,
							i = (c.height, c.lineWidths);
						if (d.display) {
							var j, k = c.ctx,
								l = b.getValueOrDefault,
								m = l(e.fontColor, f.defaultFontColor),
								n = l(e.fontSize, f.defaultFontSize),
								o = l(e.fontStyle, f.defaultFontStyle),
								p = l(e.fontFamily, f.defaultFontFamily),
								q = b.fontString(n, o, p);
							k.textAlign = "left", k.textBaseline = "top", k.lineWidth = .5, k.strokeStyle = m, k.fillStyle = m, k.font = q;
							var r = e.boxWidth,
								s = c.legendHitBoxes,
								t = function (a, b, c) {
									k.save(), k.fillStyle = l(c.fillStyle, f.defaultColor), k.lineCap = l(c.lineCap, g.borderCapStyle), k.lineDashOffset = l(c.lineDashOffset, g.borderDashOffset), k.lineJoin = l(c.lineJoin, g.borderJoinStyle), k.lineWidth = l(c.lineWidth, g.borderWidth), k.strokeStyle = l(c.strokeStyle, f.defaultColor), k.setLineDash && k.setLineDash(l(c.lineDash, g.borderDash)), k.strokeRect(a, b, r, n), k.fillRect(a, b, r, n), k.restore()
								},
								u = function (a, b, c, d) {
									k.fillText(c.text, r + n / 2 + a, b), c.hidden && (k.beginPath(), k.lineWidth = 2, k.moveTo(r + n / 2 + a, b + n / 2), k.lineTo(r + n / 2 + a + d, b + n / 2), k.stroke())
								},
								v = c.isHorizontal();
							j = v ? {
								x: c.left + (h - i[0]) / 2,
								y: c.top + e.padding,
								line: 0
							} : {
								x: c.left + e.padding,
								y: c.top,
								line: 0
							};
							var w = n + e.padding;
							b.each(c.legendItems, function (a, b) {
								var d = k.measureText(a.text).width,
									f = r + n / 2 + d,
									g = j.x,
									l = j.y;
								v ? g + f >= h && (l = j.y += n + e.padding, j.line++, g = j.x = c.left + (h - i[j.line]) / 2) : l + w > c.bottom && (g = j.x = g + c.columnWidths[j.line] + e.padding, l = j.y = c.top, j.line++), t(g, l, a), s[b].left = g, s[b].top = l, u(g, l, a, d), v ? j.x += f + e.padding : j.y += w
							})
						}
					},
					handleEvent: function (a) {
						var c = this,
							d = b.getRelativePosition(a, c.chart.chart),
							e = d.x,
							f = d.y,
							g = c.options;
						if (e >= c.left && e <= c.right && f >= c.top && f <= c.bottom)
							for (var h = c.legendHitBoxes, i = 0; i < h.length; ++i) {
								var j = h[i];
								if (e >= j.left && e <= j.left + j.width && f >= j.top && f <= j.top + j.height) {
									g.onClick && g.onClick.call(c, a, c.legendItems[i]);
									break
								}
							}
					}
				}), a.plugins.register({
					beforeInit: function (b) {
						var c = b.options,
							d = c.legend;
						d && (b.legend = new a.Legend({
							ctx: b.chart.ctx,
							options: d,
							chart: b
						}), a.layoutService.addBox(b, b.legend))
					}
				})
			}
		}, {}],
		29: [function (a, b, c) {
			"use strict";
			b.exports = function (a) {
				var b = a.helpers.noop;
				a.plugins = {
					_plugins: [],
					register: function (a) {
						var b = this._plugins;
						[].concat(a).forEach(function (a) {
							b.indexOf(a) === -1 && b.push(a)
						})
					},
					unregister: function (a) {
						var b = this._plugins;
						[].concat(a).forEach(function (a) {
							var c = b.indexOf(a);
							c !== -1 && b.splice(c, 1)
						})
					},
					clear: function () {
						this._plugins = []
					},
					count: function () {
						return this._plugins.length
					},
					getAll: function () {
						return this._plugins
					},
					notify: function (a, b) {
						var c, d, e = this._plugins,
							f = e.length;
						for (c = 0; c < f; ++c)
							if (d = e[c], "function" == typeof d[a] && d[a].apply(d, b || []) === !1) return !1;
						return !0
					}
				}, a.PluginBase = a.Element.extend({
					beforeInit: b,
					afterInit: b,
					beforeUpdate: b,
					afterUpdate: b,
					beforeDraw: b,
					afterDraw: b,
					destroy: b
				}), a.pluginService = a.plugins
			}
		}, {}],
		30: [function (a, b, c) {
			"use strict";
			b.exports = function (a) {
				var b = a.helpers;
				a.defaults.scale = {
					display: !0,
					position: "left",
					gridLines: {
						display: !0,
						color: "rgba(0, 0, 0, 0.1)",
						lineWidth: 1,
						drawBorder: !0,
						drawOnChartArea: !0,
						drawTicks: !0,
						tickMarkLength: 10,
						zeroLineWidth: 1,
						zeroLineColor: "rgba(0,0,0,0.25)",
						offsetGridLines: !1
					},
					scaleLabel: {
						labelString: "",
						display: !1
					},
					ticks: {
						beginAtZero: !1,
						minRotation: 0,
						maxRotation: 50,
						mirror: !1,
						padding: 10,
						reverse: !1,
						display: !0,
						autoSkip: !0,
						autoSkipPadding: 0,
						labelOffset: 0,
						callback: function (a) {
							return b.isArray(a) ? a : "" + a
						}
					}
				}, a.Scale = a.Element.extend({
					beforeUpdate: function () {
						b.callCallback(this.options.beforeUpdate, [this])
					},
					update: function (a, c, d) {
						var e = this;
						return e.beforeUpdate(), e.maxWidth = a, e.maxHeight = c, e.margins = b.extend({
							left: 0,
							right: 0,
							top: 0,
							bottom: 0
						}, d), e.beforeSetDimensions(), e.setDimensions(), e.afterSetDimensions(), e.beforeDataLimits(), e.determineDataLimits(), e.afterDataLimits(), e.beforeBuildTicks(), e.buildTicks(), e.afterBuildTicks(), e.beforeTickToLabelConversion(), e.convertTicksToLabels(), e.afterTickToLabelConversion(), e.beforeCalculateTickRotation(), e.calculateTickRotation(), e.afterCalculateTickRotation(), e.beforeFit(), e.fit(), e.afterFit(), e.afterUpdate(), e.minSize
					},
					afterUpdate: function () {
						b.callCallback(this.options.afterUpdate, [this])
					},
					beforeSetDimensions: function () {
						b.callCallback(this.options.beforeSetDimensions, [this])
					},
					setDimensions: function () {
						var a = this;
						a.isHorizontal() ? (a.width = a.maxWidth, a.left = 0, a.right = a.width) : (a.height = a.maxHeight, a.top = 0, a.bottom = a.height), a.paddingLeft = 0, a.paddingTop = 0, a.paddingRight = 0, a.paddingBottom = 0
					},
					afterSetDimensions: function () {
						b.callCallback(this.options.afterSetDimensions, [this])
					},
					beforeDataLimits: function () {
						b.callCallback(this.options.beforeDataLimits, [this])
					},
					determineDataLimits: b.noop,
					afterDataLimits: function () {
						b.callCallback(this.options.afterDataLimits, [this])
					},
					beforeBuildTicks: function () {
						b.callCallback(this.options.beforeBuildTicks, [this])
					},
					buildTicks: b.noop,
					afterBuildTicks: function () {
						b.callCallback(this.options.afterBuildTicks, [this])
					},
					beforeTickToLabelConversion: function () {
						b.callCallback(this.options.beforeTickToLabelConversion, [this])
					},
					convertTicksToLabels: function () {
						var a = this;
						a.ticks = a.ticks.map(function (b, c, d) {
							return a.options.ticks.userCallback ? a.options.ticks.userCallback(b, c, d) : a.options.ticks.callback(b, c, d)
						}, a)
					},
					afterTickToLabelConversion: function () {
						b.callCallback(this.options.afterTickToLabelConversion, [this])
					},
					beforeCalculateTickRotation: function () {
						b.callCallback(this.options.beforeCalculateTickRotation, [this])
					},
					calculateTickRotation: function () {
						var c = this,
							d = c.ctx,
							e = a.defaults.global,
							f = c.options.ticks,
							g = b.getValueOrDefault(f.fontSize, e.defaultFontSize),
							h = b.getValueOrDefault(f.fontStyle, e.defaultFontStyle),
							i = b.getValueOrDefault(f.fontFamily, e.defaultFontFamily),
							j = b.fontString(g, h, i);
						d.font = j;
						var k, l = d.measureText(c.ticks[0]).width,
							m = d.measureText(c.ticks[c.ticks.length - 1]).width;
						if (c.labelRotation = f.minRotation || 0, c.paddingRight = 0, c.paddingLeft = 0, c.options.display && c.isHorizontal()) {
							c.paddingRight = m / 2 + 3, c.paddingLeft = l / 2 + 3, c.longestTextCache || (c.longestTextCache = {});
							for (var n, o, p = b.longestText(d, j, c.ticks, c.longestTextCache), q = p, r = c.getPixelForTick(1) - c.getPixelForTick(0) - 6; q > r && c.labelRotation < f.maxRotation;) {
								if (n = Math.cos(b.toRadians(c.labelRotation)), o = Math.sin(b.toRadians(c.labelRotation)), k = n * l, k + g / 2 > c.yLabelWidth && (c.paddingLeft = k + g / 2), c.paddingRight = g / 2, o * p > c.maxHeight) {
									c.labelRotation--;
									break
								}
								c.labelRotation++, q = n * p
							}
						}
						c.margins && (c.paddingLeft = Math.max(c.paddingLeft - c.margins.left, 0), c.paddingRight = Math.max(c.paddingRight - c.margins.right, 0))
					},
					afterCalculateTickRotation: function () {
						b.callCallback(this.options.afterCalculateTickRotation, [this])
					},
					beforeFit: function () {
						b.callCallback(this.options.beforeFit, [this])
					},
					fit: function () {
						var c = this,
							d = c.minSize = {
								width: 0,
								height: 0
							},
							e = c.options,
							f = a.defaults.global,
							g = e.ticks,
							h = e.scaleLabel,
							i = e.display,
							j = c.isHorizontal(),
							k = b.getValueOrDefault(g.fontSize, f.defaultFontSize),
							l = b.getValueOrDefault(g.fontStyle, f.defaultFontStyle),
							m = b.getValueOrDefault(g.fontFamily, f.defaultFontFamily),
							n = b.fontString(k, l, m),
							o = b.getValueOrDefault(h.fontSize, f.defaultFontSize),
							p = b.getValueOrDefault(h.fontStyle, f.defaultFontStyle),
							q = b.getValueOrDefault(h.fontFamily, f.defaultFontFamily),
							r = (b.fontString(o, p, q), e.gridLines.tickMarkLength);
						if (j ? d.width = c.isFullWidth() ? c.maxWidth - c.margins.left - c.margins.right : c.maxWidth : d.width = i ? r : 0, j ? d.height = i ? r : 0 : d.height = c.maxHeight, h.display && i && (j ? d.height += 1.5 * o : d.width += 1.5 * o), g.display && i) {
							c.longestTextCache || (c.longestTextCache = {});
							var s = b.longestText(c.ctx, n, c.ticks, c.longestTextCache),
								t = b.numberOfLabelLines(c.ticks),
								u = .5 * k;
							if (j) {
								c.longestLabelWidth = s;
								var v = Math.sin(b.toRadians(c.labelRotation)) * c.longestLabelWidth + k * t + u * t;
								d.height = Math.min(c.maxHeight, d.height + v), c.ctx.font = n;
								var w = c.ctx.measureText(c.ticks[0]).width,
									x = c.ctx.measureText(c.ticks[c.ticks.length - 1]).width,
									y = Math.cos(b.toRadians(c.labelRotation)),
									z = Math.sin(b.toRadians(c.labelRotation));
								c.paddingLeft = 0 !== c.labelRotation ? y * w + 3 : w / 2 + 3, c.paddingRight = 0 !== c.labelRotation ? z * (k / 2) + 3 : x / 2 + 3
							} else {
								var A = c.maxWidth - d.width,
									B = g.mirror;
								B ? s = 0 : s += c.options.ticks.padding, s < A ? d.width += s : d.width = c.maxWidth, c.paddingTop = k / 2, c.paddingBottom = k / 2
							}
						}
						c.margins && (c.paddingLeft = Math.max(c.paddingLeft - c.margins.left, 0), c.paddingTop = Math.max(c.paddingTop - c.margins.top, 0), c.paddingRight = Math.max(c.paddingRight - c.margins.right, 0), c.paddingBottom = Math.max(c.paddingBottom - c.margins.bottom, 0)), c.width = d.width, c.height = d.height
					},
					afterFit: function () {
						b.callCallback(this.options.afterFit, [this])
					},
					isHorizontal: function () {
						return "top" === this.options.position || "bottom" === this.options.position
					},
					isFullWidth: function () {
						return this.options.fullWidth
					},
					getRightValue: function a(b) {
						return null === b || "undefined" == typeof b ? NaN : "number" == typeof b && isNaN(b) ? NaN : "object" == typeof b ? b instanceof Date || b.isValid ? b : a(this.isHorizontal() ? b.x : b.y) : b
					},
					getLabelForIndex: b.noop,
					getPixelForValue: b.noop,
					getValueForPixel: b.noop,
					getPixelForTick: function (a, b) {
						var c = this;
						if (c.isHorizontal()) {
							var d = c.width - (c.paddingLeft + c.paddingRight),
								e = d / Math.max(c.ticks.length - (c.options.gridLines.offsetGridLines ? 0 : 1), 1),
								f = e * a + c.paddingLeft;
							b && (f += e / 2);
							var g = c.left + Math.round(f);
							return g += c.isFullWidth() ? c.margins.left : 0
						}
						var h = c.height - (c.paddingTop + c.paddingBottom);
						return c.top + a * (h / (c.ticks.length - 1))
					},
					getPixelForDecimal: function (a) {
						var b = this;
						if (b.isHorizontal()) {
							var c = b.width - (b.paddingLeft + b.paddingRight),
								d = c * a + b.paddingLeft,
								e = b.left + Math.round(d);
							return e += b.isFullWidth() ? b.margins.left : 0
						}
						return b.top + a * b.height
					},
					getBasePixel: function () {
						var a = this,
							b = a.min,
							c = a.max;
						return a.getPixelForValue(a.beginAtZero ? 0 : b < 0 && c < 0 ? c : b > 0 && c > 0 ? b : 0)
					},
					draw: function (c) {
						var d = this,
							e = d.options;
						if (e.display) {
							var f, g, h = d.ctx,
								i = a.defaults.global,
								j = e.ticks,
								k = e.gridLines,
								l = e.scaleLabel,
								m = 0 !== d.labelRotation,
								n = j.autoSkip,
								o = d.isHorizontal();
							j.maxTicksLimit && (g = j.maxTicksLimit);
							var p = b.getValueOrDefault(j.fontColor, i.defaultFontColor),
								q = b.getValueOrDefault(j.fontSize, i.defaultFontSize),
								r = b.getValueOrDefault(j.fontStyle, i.defaultFontStyle),
								s = b.getValueOrDefault(j.fontFamily, i.defaultFontFamily),
								t = b.fontString(q, r, s),
								u = k.tickMarkLength,
								v = b.getValueOrDefault(l.fontColor, i.defaultFontColor),
								w = b.getValueOrDefault(l.fontSize, i.defaultFontSize),
								x = b.getValueOrDefault(l.fontStyle, i.defaultFontStyle),
								y = b.getValueOrDefault(l.fontFamily, i.defaultFontFamily),
								z = b.fontString(w, x, y),
								A = b.toRadians(d.labelRotation),
								B = Math.cos(A),
								C = (Math.sin(A), d.longestLabelWidth * B);
							h.fillStyle = p;
							var D = [];
							if (o) {
								if (f = !1, m && (C /= 2), (C + j.autoSkipPadding) * d.ticks.length > d.width - (d.paddingLeft + d.paddingRight) && (f = 1 + Math.floor((C + j.autoSkipPadding) * d.ticks.length / (d.width - (d.paddingLeft + d.paddingRight)))), g && d.ticks.length > g)
									for (; !f || d.ticks.length / (f || 1) > g;) f || (f = 1), f += 1;
								n || (f = !1)
							}
							var E = "right" === e.position ? d.left : d.right - u,
								F = "right" === e.position ? d.left + u : d.right,
								G = "bottom" === e.position ? d.top : d.bottom - u,
								H = "bottom" === e.position ? d.top + u : d.bottom;
							if (b.each(d.ticks, function (a, g) {
									if (void 0 !== a && null !== a) {
										var h = d.ticks.length === g + 1,
											i = f > 1 && g % f > 0 || g % f === 0 && g + f >= d.ticks.length;
										if ((!i || h) && void 0 !== a && null !== a) {
											var l, n;
											g === ("undefined" != typeof d.zeroLineIndex ? d.zeroLineIndex : 0) ? (l = k.zeroLineWidth, n = k.zeroLineColor) : (l = b.getValueAtIndexOrDefault(k.lineWidth, g), n = b.getValueAtIndexOrDefault(k.color, g));
											var p, q, r, s, t, v, w, x, y, z, B, C = "middle";
											if (o) {
												m || (C = "top" === e.position ? "bottom" : "top"), B = m ? "right" : "center";
												var I = d.getPixelForTick(g) + b.aliasPixel(l);
												y = d.getPixelForTick(g, k.offsetGridLines) + j.labelOffset, z = m ? d.top + 12 : "top" === e.position ? d.bottom - u : d.top + u, p = r = t = w = I, q = G, s = H, v = c.top, x = c.bottom
											} else {
												"left" === e.position ? j.mirror ? (y = d.right + j.padding, B = "left") : (y = d.right - j.padding, B = "right") : j.mirror ? (y = d.left - j.padding, B = "right") : (y = d.left + j.padding, B = "left");
												var J = d.getPixelForTick(g);
												J += b.aliasPixel(l), z = d.getPixelForTick(g, k.offsetGridLines), p = E, r = F, t = c.left, w = c.right, q = s = v = x = J
											}
											D.push({
												tx1: p,
												ty1: q,
												tx2: r,
												ty2: s,
												x1: t,
												y1: v,
												x2: w,
												y2: x,
												labelX: y,
												labelY: z,
												glWidth: l,
												glColor: n,
												rotation: -1 * A,
												label: a,
												textBaseline: C,
												textAlign: B
											})
										}
									}
								}), b.each(D, function (a) {
									if (k.display && (h.lineWidth = a.glWidth, h.strokeStyle = a.glColor, h.beginPath(), k.drawTicks && (h.moveTo(a.tx1, a.ty1), h.lineTo(a.tx2, a.ty2)), k.drawOnChartArea && (h.moveTo(a.x1, a.y1), h.lineTo(a.x2, a.y2)), h.stroke()), j.display) {
										h.save(), h.translate(a.labelX, a.labelY), h.rotate(a.rotation), h.font = t, h.textBaseline = a.textBaseline, h.textAlign = a.textAlign;
										var c = a.label;
										if (b.isArray(c))
											for (var d = 0, e = 0; d < c.length; ++d) h.fillText("" + c[d], 0, e), e += 1.5 * q;
										else h.fillText(c, 0, 0);
										h.restore()
									}
								}), l.display) {
								var I, J, K = 0;
								if (o) I = d.left + (d.right - d.left) / 2, J = "bottom" === e.position ? d.bottom - w / 2 : d.top + w / 2;
								else {
									var L = "left" === e.position;
									I = L ? d.left + w / 2 : d.right - w / 2, J = d.top + (d.bottom - d.top) / 2, K = L ? -.5 * Math.PI : .5 * Math.PI
								}
								h.save(), h.translate(I, J), h.rotate(K), h.textAlign = "center", h.textBaseline = "middle", h.fillStyle = v, h.font = z, h.fillText(l.labelString, 0, 0), h.restore()
							}
							if (k.drawBorder) {
								h.lineWidth = b.getValueAtIndexOrDefault(k.lineWidth, 0), h.strokeStyle = b.getValueAtIndexOrDefault(k.color, 0);
								var M = d.left,
									N = d.right,
									O = d.top,
									P = d.bottom,
									Q = b.aliasPixel(h.lineWidth);
								o ? (O = P = "top" === e.position ? d.bottom : d.top, O += Q, P += Q) : (M = N = "left" === e.position ? d.right : d.left, M += Q, N += Q), h.beginPath(), h.moveTo(M, O), h.lineTo(N, P), h.stroke()
							}
						}
					}
				})
			}
		}, {}],
		31: [function (a, b, c) {
			"use strict";
			b.exports = function (a) {
				var b = a.helpers;
				a.scaleService = {
					constructors: {},
					defaults: {},
					registerScaleType: function (a, c, d) {
						this.constructors[a] = c, this.defaults[a] = b.clone(d)
					},
					getScaleConstructor: function (a) {
						return this.constructors.hasOwnProperty(a) ? this.constructors[a] : void 0
					},
					getScaleDefaults: function (c) {
						return this.defaults.hasOwnProperty(c) ? b.scaleMerge(a.defaults.scale, this.defaults[c]) : {}
					},
					updateScaleDefaults: function (a, c) {
						var d = this.defaults;
						d.hasOwnProperty(a) && (d[a] = b.extend(d[a], c))
					},
					addScalesToLayout: function (c) {
						b.each(c.scales, function (b) {
							a.layoutService.addBox(c, b)
						})
					}
				}
			}
		}, {}],
		32: [function (a, b, c) {
			"use strict";
			b.exports = function (a) {
				var b = a.helpers;
				a.defaults.global.title = {
					display: !1,
					position: "top",
					fullWidth: !0,
					fontStyle: "bold",
					padding: 10,
					text: ""
				};
				var c = b.noop;
				a.Title = a.Element.extend({
					initialize: function (c) {
						var d = this;
						b.extend(d, c), d.options = b.configMerge(a.defaults.global.title, c.options), d.legendHitBoxes = []
					},
					beforeUpdate: function () {
						var c = this.chart.options;
						c && c.title && (this.options = b.configMerge(a.defaults.global.title, c.title))
					},
					update: function (a, b, c) {
						var d = this;
						return d.beforeUpdate(), d.maxWidth = a, d.maxHeight = b, d.margins = c, d.beforeSetDimensions(), d.setDimensions(), d.afterSetDimensions(), d.beforeBuildLabels(), d.buildLabels(), d.afterBuildLabels(), d.beforeFit(), d.fit(), d.afterFit(), d.afterUpdate(), d.minSize
					},
					afterUpdate: c,
					beforeSetDimensions: c,
					setDimensions: function () {
						var a = this;
						a.isHorizontal() ? (a.width = a.maxWidth, a.left = 0, a.right = a.width) : (a.height = a.maxHeight, a.top = 0, a.bottom = a.height), a.paddingLeft = 0, a.paddingTop = 0, a.paddingRight = 0, a.paddingBottom = 0, a.minSize = {
							width: 0,
							height: 0
						}
					},
					afterSetDimensions: c,
					beforeBuildLabels: c,
					buildLabels: c,
					afterBuildLabels: c,
					beforeFit: c,
					fit: function () {
						var c = this,
							d = (c.ctx, b.getValueOrDefault),
							e = c.options,
							f = a.defaults.global,
							g = e.display,
							h = d(e.fontSize, f.defaultFontSize),
							i = c.minSize;
						c.isHorizontal() ? (i.width = c.maxWidth, i.height = g ? h + 2 * e.padding : 0) : (i.width = g ? h + 2 * e.padding : 0, i.height = c.maxHeight), c.width = i.width, c.height = i.height
					},
					afterFit: c,
					isHorizontal: function () {
						var a = this.options.position;
						return "top" === a || "bottom" === a
					},
					draw: function () {
						var c = this,
							d = c.ctx,
							e = b.getValueOrDefault,
							f = c.options,
							g = a.defaults.global;
						if (f.display) {
							var h, i, j = e(f.fontSize, g.defaultFontSize),
								k = e(f.fontStyle, g.defaultFontStyle),
								l = e(f.fontFamily, g.defaultFontFamily),
								m = b.fontString(j, k, l),
								n = 0,
								o = c.top,
								p = c.left,
								q = c.bottom,
								r = c.right;
							d.fillStyle = e(f.fontColor, g.defaultFontColor), d.font = m, c.isHorizontal() ? (h = p + (r - p) / 2, i = o + (q - o) / 2) : (h = "left" === f.position ? p + j / 2 : r - j / 2, i = o + (q - o) / 2, n = Math.PI * ("left" === f.position ? -.5 : .5)), d.save(), d.translate(h, i), d.rotate(n), d.textAlign = "center", d.textBaseline = "middle", d.fillText(f.text, 0, 0), d.restore()
						}
					}
				}), a.plugins.register({
					beforeInit: function (b) {
						var c = b.options,
							d = c.title;
						d && (b.titleBlock = new a.Title({
							ctx: b.chart.ctx,
							options: d,
							chart: b
						}), a.layoutService.addBox(b, b.titleBlock))
					}
				})
			}
		}, {}],
		33: [function (a, b, c) {
			"use strict";
			b.exports = function (a) {
				function b(a, b) {
					return b && (e.isArray(b) ? Array.prototype.push.apply(a, b) : a.push(b)), a
				}

				function c(a) {
					if (!a.length) return !1;
					var b, c, d = [],
						e = [];
					for (b = 0, c = a.length; b < c; ++b) {
						var f = a[b];
						if (f && f.hasValue()) {
							var g = f.tooltipPosition();
							d.push(g.x), e.push(g.y)
						}
					}
					var h = 0,
						i = 0;
					for (b = 0, c - d.length; b < c; ++b) h += d[b], i += e[b];
					return {
						x: Math.round(h / d.length),
						y: Math.round(i / d.length)
					}
				}

				function d(a) {
					var b = a._xScale,
						c = a._yScale || a._scale,
						d = a._index,
						e = a._datasetIndex;
					return {
						xLabel: b ? b.getLabelForIndex(d, e) : "",
						yLabel: c ? c.getLabelForIndex(d, e) : "",
						index: d,
						datasetIndex: e
					}
				}
				var e = a.helpers;
				a.defaults.global.tooltips = {
					enabled: !0,
					custom: null,
					mode: "single",
					backgroundColor: "rgba(0,0,0,0.8)",
					titleFontStyle: "bold",
					titleSpacing: 2,
					titleMarginBottom: 6,
					titleFontColor: "#fff",
					titleAlign: "left",
					bodySpacing: 2,
					bodyFontColor: "#fff",
					bodyAlign: "left",
					footerFontStyle: "bold",
					footerSpacing: 2,
					footerMarginTop: 6,
					footerFontColor: "#fff",
					footerAlign: "left",
					yPadding: 6,
					xPadding: 6,
					yAlign: "center",
					xAlign: "center",
					caretSize: 5,
					cornerRadius: 6,
					multiKeyBackground: "#fff",
					callbacks: {
						beforeTitle: e.noop,
						title: function (a, b) {
							var c = "",
								d = b.labels,
								e = d ? d.length : 0;
							if (a.length > 0) {
								var f = a[0];
								f.xLabel ? c = f.xLabel : e > 0 && f.index < e && (c = d[f.index])
							}
							return c
						},
						afterTitle: e.noop,
						beforeBody: e.noop,
						beforeLabel: e.noop,
						label: function (a, b) {
							var c = b.datasets[a.datasetIndex].label || "";
							return c + ": " + a.yLabel
						},
						labelColor: function (a, b) {
							var c = b.getDatasetMeta(a.datasetIndex),
								d = c.data[a.index],
								e = d._view;
							return {
								borderColor: e.borderColor,
								backgroundColor: e.backgroundColor
							}
						},
						afterLabel: e.noop,
						afterBody: e.noop,
						beforeFooter: e.noop,
						footer: e.noop,
						afterFooter: e.noop
					}
				}, a.Tooltip = a.Element.extend({
					initialize: function () {
						var b = this,
							c = a.defaults.global,
							d = b._options,
							f = e.getValueOrDefault;
						e.extend(b, {
							_model: {
								xPadding: d.xPadding,
								yPadding: d.yPadding,
								xAlign: d.yAlign,
								yAlign: d.xAlign,
								bodyFontColor: d.bodyFontColor,
								_bodyFontFamily: f(d.bodyFontFamily, c.defaultFontFamily),
								_bodyFontStyle: f(d.bodyFontStyle, c.defaultFontStyle),
								_bodyAlign: d.bodyAlign,
								bodyFontSize: f(d.bodyFontSize, c.defaultFontSize),
								bodySpacing: d.bodySpacing,
								titleFontColor: d.titleFontColor,
								_titleFontFamily: f(d.titleFontFamily, c.defaultFontFamily),
								_titleFontStyle: f(d.titleFontStyle, c.defaultFontStyle),
								titleFontSize: f(d.titleFontSize, c.defaultFontSize),
								_titleAlign: d.titleAlign,
								titleSpacing: d.titleSpacing,
								titleMarginBottom: d.titleMarginBottom,
								footerFontColor: d.footerFontColor,
								_footerFontFamily: f(d.footerFontFamily, c.defaultFontFamily),
								_footerFontStyle: f(d.footerFontStyle, c.defaultFontStyle),
								footerFontSize: f(d.footerFontSize, c.defaultFontSize),
								_footerAlign: d.footerAlign,
								footerSpacing: d.footerSpacing,
								footerMarginTop: d.footerMarginTop,
								caretSize: d.caretSize,
								cornerRadius: d.cornerRadius,
								backgroundColor: d.backgroundColor,
								opacity: 0,
								legendColorBackground: d.multiKeyBackground
							}
						})
					},
					getTitle: function () {
						var a = this,
							c = a._options,
							d = c.callbacks,
							e = d.beforeTitle.apply(a, arguments),
							f = d.title.apply(a, arguments),
							g = d.afterTitle.apply(a, arguments),
							h = [];
						return h = b(h, e), h = b(h, f), h = b(h, g)
					},
					getBeforeBody: function () {
						var a = this._options.callbacks.beforeBody.apply(this, arguments);
						return e.isArray(a) ? a : void 0 !== a ? [a] : []
					},
					getBody: function (a, c) {
						var d = this,
							f = d._options.callbacks,
							g = [];
						return e.each(a, function (a) {
							var e = {
								before: [],
								lines: [],
								after: []
							};
							b(e.before, f.beforeLabel.call(d, a, c)), b(e.lines, f.label.call(d, a, c)), b(e.after, f.afterLabel.call(d, a, c)), g.push(e)
						}), g
					},
					getAfterBody: function () {
						var a = this._options.callbacks.afterBody.apply(this, arguments);
						return e.isArray(a) ? a : void 0 !== a ? [a] : []
					},
					getFooter: function () {
						var a = this,
							c = a._options.callbacks,
							d = c.beforeFooter.apply(a, arguments),
							e = c.footer.apply(a, arguments),
							f = c.afterFooter.apply(a, arguments),
							g = [];
						return g = b(g, d), g = b(g, e), g = b(g, f)
					},
					update: function (a) {
						var b, f, g = this,
							h = g._options,
							i = g._model,
							j = g._active,
							k = g._data,
							l = g._chartInstance;
						if (j.length) {
							i.opacity = 1;
							var m = [],
								n = c(j),
								o = [];
							for (b = 0, f = j.length; b < f; ++b) o.push(d(j[b]));
							h.itemSort && (o = o.sort(h.itemSort)), j.length > 1 && e.each(o, function (a) {
								m.push(h.callbacks.labelColor.call(g, a, l))
							}), e.extend(i, {
								title: g.getTitle(o, k),
								beforeBody: g.getBeforeBody(o, k),
								body: g.getBody(o, k),
								afterBody: g.getAfterBody(o, k),
								footer: g.getFooter(o, k),
								x: Math.round(n.x),
								y: Math.round(n.y),
								caretPadding: e.getValueOrDefault(n.padding, 2),
								labelColors: m
							});
							var p = g.getTooltipSize(i);
							g.determineAlignment(p), e.extend(i, g.getBackgroundPoint(i, p))
						} else g._model.opacity = 0;
						return a && h.custom && h.custom.call(g, i), g
					},
					getTooltipSize: function (a) {
						var b = this._chart.ctx,
							c = {
								height: 2 * a.yPadding,
								width: 0
							},
							d = a.body,
							f = d.reduce(function (a, b) {
								return a + b.before.length + b.lines.length + b.after.length
							}, 0);
						f += a.beforeBody.length + a.afterBody.length;
						var g = a.title.length,
							h = a.footer.length,
							i = a.titleFontSize,
							j = a.bodyFontSize,
							k = a.footerFontSize;
						c.height += g * i, c.height += (g - 1) * a.titleSpacing, c.height += g ? a.titleMarginBottom : 0, c.height += f * j, c.height += f ? (f - 1) * a.bodySpacing : 0, c.height += h ? a.footerMarginTop : 0, c.height += h * k, c.height += h ? (h - 1) * a.footerSpacing : 0;
						var l = 0,
							m = function (a) {
								c.width = Math.max(c.width, b.measureText(a).width + l)
							};
						return b.font = e.fontString(i, a._titleFontStyle, a._titleFontFamily), e.each(a.title, m), b.font = e.fontString(j, a._bodyFontStyle, a._bodyFontFamily), e.each(a.beforeBody.concat(a.afterBody), m), l = d.length > 1 ? j + 2 : 0, e.each(d, function (a) {
							e.each(a.before, m), e.each(a.lines, m), e.each(a.after, m)
						}), l = 0, b.font = e.fontString(k, a._footerFontStyle, a._footerFontFamily), e.each(a.footer, m), c.width += 2 * a.xPadding, c
					},
					determineAlignment: function (a) {
						var b = this,
							c = b._model,
							d = b._chart,
							e = b._chartInstance.chartArea;
						c.y < a.height ? c.yAlign = "top" : c.y > d.height - a.height && (c.yAlign = "bottom");
						var f, g, h, i, j, k = (e.left + e.right) / 2,
							l = (e.top + e.bottom) / 2;
						"center" === c.yAlign ? (f = function (a) {
							return a <= k
						}, g = function (a) {
							return a > k
						}) : (f = function (b) {
							return b <= a.width / 2
						}, g = function (b) {
							return b >= d.width - a.width / 2
						}), h = function (b) {
							return b + a.width > d.width
						}, i = function (b) {
							return b - a.width < 0
						}, j = function (a) {
							return a <= l ? "top" : "bottom"
						}, f(c.x) ? (c.xAlign = "left", h(c.x) && (c.xAlign = "center", c.yAlign = j(c.y))) : g(c.x) && (c.xAlign = "right", i(c.x) && (c.xAlign = "center", c.yAlign = j(c.y)))
					},
					getBackgroundPoint: function (a, b) {
						var c = {
								x: a.x,
								y: a.y
							},
							d = a.caretSize,
							e = a.caretPadding,
							f = a.cornerRadius,
							g = a.xAlign,
							h = a.yAlign,
							i = d + e,
							j = f + e;
						return "right" === g ? c.x -= b.width : "center" === g && (c.x -= b.width / 2), "top" === h ? c.y += i : "bottom" === h ? c.y -= b.height + i : c.y -= b.height / 2, "center" === h ? "left" === g ? c.x += i : "right" === g && (c.x -= i) : "left" === g ? c.x -= j : "right" === g && (c.x += j), c
					},
					drawCaret: function (a, b, c, d) {
						var f, g, h, i, j, k, l = this._view,
							m = this._chart.ctx,
							n = l.caretSize,
							o = l.cornerRadius,
							p = l.xAlign,
							q = l.yAlign,
							r = a.x,
							s = a.y,
							t = b.width,
							u = b.height;
						"center" === q ? ("left" === p ? (f = r, g = f - n, h = f) : (f = r + t, g = f + n, h = f), j = s + u / 2, i = j - n, k = j + n) : ("left" === p ? (f = r + o, g = f + n, h = g + n) : "right" === p ? (f = r + t - o, g = f - n, h = g - n) : (g = r + t / 2, f = g - n, h = g + n), "top" === q ? (i = s, j = i - n, k = i) : (i = s + u, j = i + n, k = i));
						var v = e.color(l.backgroundColor);
						m.fillStyle = v.alpha(c * v.alpha()).rgbString(), m.beginPath(), m.moveTo(f, i), m.lineTo(g, j), m.lineTo(h, k), m.closePath(), m.fill()
					},
					drawTitle: function (a, b, c, d) {
						var f = b.title;
						if (f.length) {
							c.textAlign = b._titleAlign, c.textBaseline = "top";
							var g = b.titleFontSize,
								h = b.titleSpacing,
								i = e.color(b.titleFontColor);
							c.fillStyle = i.alpha(d * i.alpha()).rgbString(), c.font = e.fontString(g, b._titleFontStyle, b._titleFontFamily);
							var j, k;
							for (j = 0, k = f.length; j < k; ++j) c.fillText(f[j], a.x, a.y), a.y += g + h, j + 1 === f.length && (a.y += b.titleMarginBottom - h)
						}
					},
					drawBody: function (a, b, c, d) {
						var f = b.bodyFontSize,
							g = b.bodySpacing,
							h = b.body;
						c.textAlign = b._bodyAlign, c.textBaseline = "top";
						var i = e.color(b.bodyFontColor),
							j = i.alpha(d * i.alpha()).rgbString();
						c.fillStyle = j, c.font = e.fontString(f, b._bodyFontStyle, b._bodyFontFamily);
						var k = 0,
							l = function (b) {
								c.fillText(b, a.x + k, a.y), a.y += f + g
							};
						e.each(b.beforeBody, l);
						var m = h.length > 1;
						k = m ? f + 2 : 0, e.each(h, function (g, h) {
							e.each(g.before, l), e.each(g.lines, function (g) {
								m && (c.fillStyle = e.color(b.legendColorBackground).alpha(d).rgbaString(), c.fillRect(a.x, a.y, f, f), c.strokeStyle = e.color(b.labelColors[h].borderColor).alpha(d).rgbaString(), c.strokeRect(a.x, a.y, f, f), c.fillStyle = e.color(b.labelColors[h].backgroundColor).alpha(d).rgbaString(), c.fillRect(a.x + 1, a.y + 1, f - 2, f - 2), c.fillStyle = j), l(g)
							}), e.each(g.after, l)
						}), k = 0, e.each(b.afterBody, l), a.y -= g
					},
					drawFooter: function (a, b, c, d) {
						var f = b.footer;
						if (f.length) {
							a.y += b.footerMarginTop, c.textAlign = b._footerAlign, c.textBaseline = "top";
							var g = e.color(b.footerFontColor);
							c.fillStyle = g.alpha(d * g.alpha()).rgbString(), c.font = e.fontString(b.footerFontSize, b._footerFontStyle, b._footerFontFamily), e.each(f, function (d) {
								c.fillText(d, a.x, a.y), a.y += b.footerFontSize + b.footerSpacing
							})
						}
					},
					draw: function () {
						var a = this._chart.ctx,
							b = this._view;
						if (0 !== b.opacity) {
							var c = this.getTooltipSize(b),
								d = {
									x: b.x,
									y: b.y
								},
								f = Math.abs(b.opacity < .001) ? 0 : b.opacity;
							if (this._options.enabled) {
								var g = e.color(b.backgroundColor);
								a.fillStyle = g.alpha(f * g.alpha()).rgbString(), e.drawRoundedRectangle(a, d.x, d.y, c.width, c.height, b.cornerRadius), a.fill(),
									this.drawCaret(d, c, f, b.caretPadding), d.x += b.xPadding, d.y += b.yPadding, this.drawTitle(d, b, a, f), this.drawBody(d, b, a, f), this.drawFooter(d, b, a, f)
							}
						}
					}
				})
			}
		}, {}],
		34: [function (a, b, c) {
			"use strict";
			b.exports = function (a, b) {
				var c = a.helpers,
					d = a.defaults.global;
				d.elements.arc = {
					backgroundColor: d.defaultColor,
					borderColor: "#fff",
					borderWidth: 2
				}, a.elements.Arc = a.Element.extend({
					inLabelRange: function (a) {
						var b = this._view;
						return !!b && Math.pow(a - b.x, 2) < Math.pow(b.radius + b.hoverRadius, 2)
					},
					inRange: function (a, b) {
						var d = this._view;
						if (d) {
							for (var e = c.getAngleFromPoint(d, {
									x: a,
									y: b
								}), f = e.angle, g = e.distance, h = d.startAngle, i = d.endAngle; i < h;) i += 2 * Math.PI;
							for (; f > i;) f -= 2 * Math.PI;
							for (; f < h;) f += 2 * Math.PI;
							var j = f >= h && f <= i,
								k = g >= d.innerRadius && g <= d.outerRadius;
							return j && k
						}
						return !1
					},
					tooltipPosition: function () {
						var a = this._view,
							b = a.startAngle + (a.endAngle - a.startAngle) / 2,
							c = (a.outerRadius - a.innerRadius) / 2 + a.innerRadius;
						return {
							x: a.x + Math.cos(b) * c,
							y: a.y + Math.sin(b) * c
						}
					},
					draw: function () {
						var a = this._chart.ctx,
							b = this._view,
							c = b.startAngle,
							d = b.endAngle;
						a.beginPath(), a.arc(b.x, b.y, b.outerRadius, c, d), a.arc(b.x, b.y, b.innerRadius, d, c, !0), a.closePath(), a.strokeStyle = b.borderColor, a.lineWidth = b.borderWidth, a.fillStyle = b.backgroundColor, a.fill(), a.lineJoin = "bevel", b.borderWidth && a.stroke()
					}
				})
			}
		}, {}],
		35: [function (a, b, c) {
			"use strict";
			b.exports = function (a) {
				var b = a.helpers,
					c = a.defaults.global;
				a.defaults.global.elements.line = {
					tension: .4,
					backgroundColor: c.defaultColor,
					borderWidth: 3,
					borderColor: c.defaultColor,
					borderCapStyle: "butt",
					borderDash: [],
					borderDashOffset: 0,
					borderJoinStyle: "miter",
					fill: !0
				}, a.elements.Line = a.Element.extend({
					lineToNextPoint: function (a, b, c, d, e) {
						var f = this,
							g = f._chart.ctx,
							h = !!f._view && f._view.spanGaps;
						b._view.skip && !h ? d.call(f, a, b, c) : a._view.skip && !h ? e.call(f, a, b, c) : 0 === b._view.tension ? g.lineTo(b._view.x, b._view.y) : g.bezierCurveTo(a._view.controlPointNextX, a._view.controlPointNextY, b._view.controlPointPreviousX, b._view.controlPointPreviousY, b._view.x, b._view.y)
					},
					draw: function () {
						function a(a) {
							g._view.skip || h._view.skip ? a && f.lineTo(d._view.scaleZero.x, d._view.scaleZero.y) : f.bezierCurveTo(h._view.controlPointNextX, h._view.controlPointNextY, g._view.controlPointPreviousX, g._view.controlPointPreviousY, g._view.x, g._view.y)
						}
						var d = this,
							e = d._view,
							f = d._chart.ctx,
							g = d._children[0],
							h = d._children[d._children.length - 1];
						f.save(), d._children.length > 0 && e.fill && (f.beginPath(), b.each(d._children, function (a, c) {
							var g = b.previousItem(d._children, c),
								h = b.nextItem(d._children, c);
							0 === c ? (d._loop ? f.moveTo(e.scaleZero.x, e.scaleZero.y) : f.moveTo(a._view.x, e.scaleZero), a._view.skip ? d._loop || f.moveTo(h._view.x, d._view.scaleZero) : f.lineTo(a._view.x, a._view.y)) : d.lineToNextPoint(g, a, h, function (a, b, c) {
								d._loop ? f.lineTo(d._view.scaleZero.x, d._view.scaleZero.y) : (f.lineTo(a._view.x, d._view.scaleZero), f.moveTo(c._view.x, d._view.scaleZero))
							}, function (a, b) {
								f.lineTo(b._view.x, b._view.y)
							})
						}, d), d._loop ? a(!0) : (f.lineTo(d._children[d._children.length - 1]._view.x, e.scaleZero), f.lineTo(d._children[0]._view.x, e.scaleZero)), f.fillStyle = e.backgroundColor || c.defaultColor, f.closePath(), f.fill());
						var i = c.elements.line;
						f.lineCap = e.borderCapStyle || i.borderCapStyle, f.setLineDash && f.setLineDash(e.borderDash || i.borderDash), f.lineDashOffset = e.borderDashOffset || i.borderDashOffset, f.lineJoin = e.borderJoinStyle || i.borderJoinStyle, f.lineWidth = e.borderWidth || i.borderWidth, f.strokeStyle = e.borderColor || c.defaultColor, f.beginPath(), b.each(d._children, function (a, c) {
							var e = b.previousItem(d._children, c),
								g = b.nextItem(d._children, c);
							0 === c ? f.moveTo(a._view.x, a._view.y) : d.lineToNextPoint(e, a, g, function (a, b, c) {
								f.moveTo(c._view.x, c._view.y)
							}, function (a, b) {
								f.moveTo(b._view.x, b._view.y)
							})
						}, d), d._loop && d._children.length > 0 && a(), f.stroke(), f.restore()
					}
				})
			}
		}, {}],
		36: [function (a, b, c) {
			"use strict";
			b.exports = function (a) {
				var b = a.helpers,
					c = a.defaults.global,
					d = c.defaultColor;
				c.elements.point = {
					radius: 3,
					pointStyle: "circle",
					backgroundColor: d,
					borderWidth: 1,
					borderColor: d,
					hitRadius: 1,
					hoverRadius: 4,
					hoverBorderWidth: 1
				}, a.elements.Point = a.Element.extend({
					inRange: function (a, b) {
						var c = this._view;
						return !!c && Math.pow(a - c.x, 2) + Math.pow(b - c.y, 2) < Math.pow(c.hitRadius + c.radius, 2)
					},
					inLabelRange: function (a) {
						var b = this._view;
						return !!b && Math.pow(a - b.x, 2) < Math.pow(b.radius + b.hitRadius, 2)
					},
					tooltipPosition: function () {
						var a = this._view;
						return {
							x: a.x,
							y: a.y,
							padding: a.radius + a.borderWidth
						}
					},
					draw: function () {
						var a, e, f, g, h, i, j = this._view,
							k = this._chart.ctx,
							l = j.pointStyle,
							m = j.radius,
							n = j.x,
							o = j.y;
						if (!j.skip) {
							if ("object" == typeof l && (a = l.toString(), "[object HTMLImageElement]" === a || "[object HTMLCanvasElement]" === a)) return void k.drawImage(l, n - l.width / 2, o - l.height / 2);
							if (!(isNaN(m) || m <= 0)) {
								switch (k.strokeStyle = j.borderColor || d, k.lineWidth = b.getValueOrDefault(j.borderWidth, c.elements.point.borderWidth), k.fillStyle = j.backgroundColor || d, l) {
									default: k.beginPath(),
									k.arc(n, o, m, 0, 2 * Math.PI),
									k.closePath(),
									k.fill();
									break;
									case "triangle":
											k.beginPath(),
										e = 3 * m / Math.sqrt(3),
										h = e * Math.sqrt(3) / 2,
										k.moveTo(n - e / 2, o + h / 3),
										k.lineTo(n + e / 2, o + h / 3),
										k.lineTo(n, o - 2 * h / 3),
										k.closePath(),
										k.fill();
										break;
									case "rect":
											i = 1 / Math.SQRT2 * m,
										k.fillRect(n - i, o - i, 2 * i, 2 * i),
										k.strokeRect(n - i, o - i, 2 * i, 2 * i);
										break;
									case "rectRot":
											i = 1 / Math.SQRT2 * m,
										k.beginPath(),
										k.moveTo(n - i, o),
										k.lineTo(n, o + i),
										k.lineTo(n + i, o),
										k.lineTo(n, o - i),
										k.closePath(),
										k.fill();
										break;
									case "cross":
											k.beginPath(),
										k.moveTo(n, o + m),
										k.lineTo(n, o - m),
										k.moveTo(n - m, o),
										k.lineTo(n + m, o),
										k.closePath();
										break;
									case "crossRot":
											k.beginPath(),
										f = Math.cos(Math.PI / 4) * m,
										g = Math.sin(Math.PI / 4) * m,
										k.moveTo(n - f, o - g),
										k.lineTo(n + f, o + g),
										k.moveTo(n - f, o + g),
										k.lineTo(n + f, o - g),
										k.closePath();
										break;
									case "star":
											k.beginPath(),
										k.moveTo(n, o + m),
										k.lineTo(n, o - m),
										k.moveTo(n - m, o),
										k.lineTo(n + m, o),
										f = Math.cos(Math.PI / 4) * m,
										g = Math.sin(Math.PI / 4) * m,
										k.moveTo(n - f, o - g),
										k.lineTo(n + f, o + g),
										k.moveTo(n - f, o + g),
										k.lineTo(n + f, o - g),
										k.closePath();
										break;
									case "line":
											k.beginPath(),
										k.moveTo(n - m, o),
										k.lineTo(n + m, o),
										k.closePath();
										break;
									case "dash":
											k.beginPath(),
										k.moveTo(n, o),
										k.lineTo(n + m, o),
										k.closePath()
								}
								k.stroke()
							}
						}
					}
				})
			}
		}, {}],
		37: [function (a, b, c) {
			"use strict";
			b.exports = function (a) {
				var b = (a.helpers, a.defaults.global);
				b.elements.rectangle = {
					backgroundColor: b.defaultColor,
					borderWidth: 0,
					borderColor: b.defaultColor,
					borderSkipped: "bottom"
				}, a.elements.Rectangle = a.Element.extend({
					draw: function () {
						function a(a) {
							return i[(k + a) % 4]
						}
						var b = this._chart.ctx,
							c = this._view,
							d = c.width / 2,
							e = c.x - d,
							f = c.x + d,
							g = c.base - (c.base - c.y),
							h = c.borderWidth / 2;
						c.borderWidth && (e += h, f -= h, g += h), b.beginPath(), b.fillStyle = c.backgroundColor, b.strokeStyle = c.borderColor, b.lineWidth = c.borderWidth;
						var i = [
								[e, c.base],
								[e, g],
								[f, g],
								[f, c.base]
							],
							j = ["bottom", "left", "top", "right"],
							k = j.indexOf(c.borderSkipped, 0);
						k === -1 && (k = 0), b.moveTo.apply(b, a(0));
						for (var l = 1; l < 4; l++) b.lineTo.apply(b, a(l));
						b.fill(), c.borderWidth && b.stroke()
					},
					height: function () {
						var a = this._view;
						return a.base - a.y
					},
					inRange: function (a, b) {
						var c = this._view;
						return !!c && (c.y < c.base ? a >= c.x - c.width / 2 && a <= c.x + c.width / 2 && b >= c.y && b <= c.base : a >= c.x - c.width / 2 && a <= c.x + c.width / 2 && b >= c.base && b <= c.y)
					},
					inLabelRange: function (a) {
						var b = this._view;
						return !!b && (a >= b.x - b.width / 2 && a <= b.x + b.width / 2)
					},
					tooltipPosition: function () {
						var a = this._view;
						return {
							x: a.x,
							y: a.y
						}
					}
				})
			}
		}, {}],
		38: [function (a, b, c) {
			"use strict";
			b.exports = function (a) {
				var b = a.helpers,
					c = {
						position: "bottom"
					},
					d = a.Scale.extend({
						determineDataLimits: function () {
							var a = this;
							a.minIndex = 0, a.maxIndex = a.chart.data.labels.length - 1;
							var c;
							void 0 !== a.options.ticks.min && (c = b.indexOf(a.chart.data.labels, a.options.ticks.min), a.minIndex = c !== -1 ? c : a.minIndex), void 0 !== a.options.ticks.max && (c = b.indexOf(a.chart.data.labels, a.options.ticks.max), a.maxIndex = c !== -1 ? c : a.maxIndex), a.min = a.chart.data.labels[a.minIndex], a.max = a.chart.data.labels[a.maxIndex]
						},
						buildTicks: function (a) {
							var b = this;
							b.ticks = 0 === b.minIndex && b.maxIndex === b.chart.data.labels.length - 1 ? b.chart.data.labels : b.chart.data.labels.slice(b.minIndex, b.maxIndex + 1)
						},
						getLabelForIndex: function (a, b) {
							return this.ticks[a]
						},
						getPixelForValue: function (a, b, c, d) {
							var e = this,
								f = Math.max(e.maxIndex + 1 - e.minIndex - (e.options.gridLines.offsetGridLines ? 0 : 1), 1);
							if (e.isHorizontal()) {
								var g = e.width - (e.paddingLeft + e.paddingRight),
									h = g / f,
									i = h * (b - e.minIndex) + e.paddingLeft;
								return e.options.gridLines.offsetGridLines && d && (i += h / 2), e.left + Math.round(i)
							}
							var j = e.height - (e.paddingTop + e.paddingBottom),
								k = j / f,
								l = k * (b - e.minIndex) + e.paddingTop;
							return e.options.gridLines.offsetGridLines && d && (l += k / 2), e.top + Math.round(l)
						},
						getPixelForTick: function (a, b) {
							return this.getPixelForValue(this.ticks[a], a + this.minIndex, null, b)
						},
						getValueForPixel: function (a) {
							var b, c = this,
								d = Math.max(c.ticks.length - (c.options.gridLines.offsetGridLines ? 0 : 1), 1),
								e = c.isHorizontal(),
								f = e ? c.width - (c.paddingLeft + c.paddingRight) : c.height - (c.paddingTop + c.paddingBottom),
								g = f / d;
							return c.options.gridLines.offsetGridLines && (a -= g / 2), a -= e ? c.paddingLeft : c.paddingTop, b = a <= 0 ? 0 : Math.round(a / g)
						}
					});
				a.scaleService.registerScaleType("category", d, c)
			}
		}, {}],
		39: [function (a, b, c) {
			"use strict";
			b.exports = function (a) {
				var b = a.helpers,
					c = {
						position: "left",
						ticks: {
							callback: function (a, c, d) {
								var e = d.length > 3 ? d[2] - d[1] : d[1] - d[0];
								Math.abs(e) > 1 && a !== Math.floor(a) && (e = a - Math.floor(a));
								var f = b.log10(Math.abs(e)),
									g = "";
								if (0 !== a) {
									var h = -1 * Math.floor(f);
									h = Math.max(Math.min(h, 20), 0), g = a.toFixed(h)
								} else g = "0";
								return g
							}
						}
					},
					d = a.LinearScaleBase.extend({
						determineDataLimits: function () {
							function a(a) {
								return h ? a.xAxisID === c.id : a.yAxisID === c.id
							}
							var c = this,
								d = c.options,
								e = (d.ticks, c.chart),
								f = e.data,
								g = f.datasets,
								h = c.isHorizontal();
							if (c.min = null, c.max = null, d.stacked) {
								var i = {},
									j = !1,
									k = !1;
								b.each(g, function (f, g) {
									var h = e.getDatasetMeta(g);
									void 0 === i[h.type] && (i[h.type] = {
										positiveValues: [],
										negativeValues: []
									});
									var l = i[h.type].positiveValues,
										m = i[h.type].negativeValues;
									e.isDatasetVisible(g) && a(h) && b.each(f.data, function (a, b) {
										var e = +c.getRightValue(a);
										isNaN(e) || h.data[b].hidden || (l[b] = l[b] || 0, m[b] = m[b] || 0, d.relativePoints ? l[b] = 100 : e < 0 ? (k = !0, m[b] += e) : (j = !0, l[b] += e))
									})
								}), b.each(i, function (a) {
									var d = a.positiveValues.concat(a.negativeValues),
										e = b.min(d),
										f = b.max(d);
									c.min = null === c.min ? e : Math.min(c.min, e), c.max = null === c.max ? f : Math.max(c.max, f)
								})
							} else b.each(g, function (d, f) {
								var g = e.getDatasetMeta(f);
								e.isDatasetVisible(f) && a(g) && b.each(d.data, function (a, b) {
									var d = +c.getRightValue(a);
									isNaN(d) || g.data[b].hidden || (null === c.min ? c.min = d : d < c.min && (c.min = d), null === c.max ? c.max = d : d > c.max && (c.max = d))
								})
							});
							this.handleTickRangeOptions()
						},
						getTickLimit: function () {
							var c, d = this,
								e = d.options.ticks;
							if (d.isHorizontal()) c = Math.min(e.maxTicksLimit ? e.maxTicksLimit : 11, Math.ceil(d.width / 50));
							else {
								var f = b.getValueOrDefault(e.fontSize, a.defaults.global.defaultFontSize);
								c = Math.min(e.maxTicksLimit ? e.maxTicksLimit : 11, Math.ceil(d.height / (2 * f)))
							}
							return c
						},
						handleDirectionalChanges: function () {
							this.isHorizontal() || this.ticks.reverse()
						},
						getLabelForIndex: function (a, b) {
							return +this.getRightValue(this.chart.data.datasets[b].data[a])
						},
						getPixelForValue: function (a, b, c, d) {
							var e, f, g = this,
								h = g.paddingLeft,
								i = g.paddingBottom,
								j = g.start,
								k = +g.getRightValue(a),
								l = g.end - j;
							return g.isHorizontal() ? (f = g.width - (h + g.paddingRight), e = g.left + f / l * (k - j), Math.round(e + h)) : (f = g.height - (g.paddingTop + i), e = g.bottom - i - f / l * (k - j), Math.round(e))
						},
						getValueForPixel: function (a) {
							var b = this,
								c = b.isHorizontal(),
								d = b.paddingLeft,
								e = b.paddingBottom,
								f = c ? b.width - (d + b.paddingRight) : b.height - (b.paddingTop + e),
								g = (c ? a - b.left - d : b.bottom - e - a) / f;
							return b.start + (b.end - b.start) * g
						},
						getPixelForTick: function (a, b) {
							return this.getPixelForValue(this.ticksAsNumbers[a], null, null, b)
						}
					});
				a.scaleService.registerScaleType("linear", d, c)
			}
		}, {}],
		40: [function (a, b, c) {
			"use strict";
			b.exports = function (a) {
				var b = a.helpers,
					c = b.noop;
				a.LinearScaleBase = a.Scale.extend({
					handleTickRangeOptions: function () {
						var a = this,
							c = a.options,
							d = c.ticks;
						if (d.beginAtZero) {
							var e = b.sign(a.min),
								f = b.sign(a.max);
							e < 0 && f < 0 ? a.max = 0 : e > 0 && f > 0 && (a.min = 0)
						}
						void 0 !== d.min ? a.min = d.min : void 0 !== d.suggestedMin && (a.min = Math.min(a.min, d.suggestedMin)), void 0 !== d.max ? a.max = d.max : void 0 !== d.suggestedMax && (a.max = Math.max(a.max, d.suggestedMax)), a.min === a.max && (a.max++, d.beginAtZero || a.min--)
					},
					getTickLimit: c,
					handleDirectionalChanges: c,
					buildTicks: function () {
						var a = this,
							c = a.options,
							d = c.ticks,
							e = b.getValueOrDefault,
							f = (a.isHorizontal(), a.ticks = []),
							g = a.getTickLimit();
						g = Math.max(2, g);
						var h, i = d.fixedStepSize && d.fixedStepSize > 0 || d.stepSize && d.stepSize > 0;
						if (i) h = e(d.fixedStepSize, d.stepSize);
						else {
							var j = b.niceNum(a.max - a.min, !1);
							h = b.niceNum(j / (g - 1), !0)
						}
						var k = Math.floor(a.min / h) * h,
							l = Math.ceil(a.max / h) * h,
							m = (l - k) / h;
						m = b.almostEquals(m, Math.round(m), h / 1e3) ? Math.round(m) : Math.ceil(m), f.push(void 0 !== d.min ? d.min : k);
						for (var n = 1; n < m; ++n) f.push(k + n * h);
						f.push(void 0 !== d.max ? d.max : l), a.handleDirectionalChanges(), a.max = b.max(f), a.min = b.min(f), d.reverse ? (f.reverse(), a.start = a.max, a.end = a.min) : (a.start = a.min, a.end = a.max)
					},
					convertTicksToLabels: function () {
						var b = this;
						b.ticksAsNumbers = b.ticks.slice(), b.zeroLineIndex = b.ticks.indexOf(0), a.Scale.prototype.convertTicksToLabels.call(b)
					}
				})
			}
		}, {}],
		41: [function (a, b, c) {
			"use strict";
			b.exports = function (a) {
				var b = a.helpers,
					c = {
						position: "left",
						ticks: {
							callback: function (a, c, d) {
								var e = a / Math.pow(10, Math.floor(b.log10(a)));
								return 1 === e || 2 === e || 5 === e || 0 === c || c === d.length - 1 ? a.toExponential() : ""
							}
						}
					},
					d = a.Scale.extend({
						determineDataLimits: function () {
							function a(a) {
								return j ? a.xAxisID === c.id : a.yAxisID === c.id
							}
							var c = this,
								d = c.options,
								e = d.ticks,
								f = c.chart,
								g = f.data,
								h = g.datasets,
								i = b.getValueOrDefault,
								j = c.isHorizontal();
							if (c.min = null, c.max = null, d.stacked) {
								var k = {};
								b.each(h, function (e, g) {
									var h = f.getDatasetMeta(g);
									f.isDatasetVisible(g) && a(h) && (void 0 === k[h.type] && (k[h.type] = []), b.each(e.data, function (a, b) {
										var e = k[h.type],
											f = +c.getRightValue(a);
										isNaN(f) || h.data[b].hidden || (e[b] = e[b] || 0, d.relativePoints ? e[b] = 100 : e[b] += f)
									}))
								}), b.each(k, function (a) {
									var d = b.min(a),
										e = b.max(a);
									c.min = null === c.min ? d : Math.min(c.min, d), c.max = null === c.max ? e : Math.max(c.max, e)
								})
							} else b.each(h, function (d, e) {
								var g = f.getDatasetMeta(e);
								f.isDatasetVisible(e) && a(g) && b.each(d.data, function (a, b) {
									var d = +c.getRightValue(a);
									isNaN(d) || g.data[b].hidden || (null === c.min ? c.min = d : d < c.min && (c.min = d), null === c.max ? c.max = d : d > c.max && (c.max = d))
								})
							});
							c.min = i(e.min, c.min), c.max = i(e.max, c.max), c.min === c.max && (0 !== c.min && null !== c.min ? (c.min = Math.pow(10, Math.floor(b.log10(c.min)) - 1), c.max = Math.pow(10, Math.floor(b.log10(c.max)) + 1)) : (c.min = 1, c.max = 10))
						},
						buildTicks: function () {
							for (var a = this, c = a.options, d = c.ticks, e = b.getValueOrDefault, f = a.ticks = [], g = e(d.min, Math.pow(10, Math.floor(b.log10(a.min)))); g < a.max;) {
								f.push(g);
								var h = Math.floor(b.log10(g)),
									i = Math.floor(g / Math.pow(10, h)) + 1;
								10 === i && (i = 1, ++h), g = i * Math.pow(10, h)
							}
							var j = e(d.max, g);
							f.push(j), a.isHorizontal() || f.reverse(), a.max = b.max(f), a.min = b.min(f), d.reverse ? (f.reverse(), a.start = a.max, a.end = a.min) : (a.start = a.min, a.end = a.max)
						},
						convertTicksToLabels: function () {
							this.tickValues = this.ticks.slice(), a.Scale.prototype.convertTicksToLabels.call(this)
						},
						getLabelForIndex: function (a, b) {
							return +this.getRightValue(this.chart.data.datasets[b].data[a])
						},
						getPixelForTick: function (a, b) {
							return this.getPixelForValue(this.tickValues[a], null, null, b)
						},
						getPixelForValue: function (a, c, d, e) {
							var f, g, h = this,
								i = h.start,
								j = +h.getRightValue(a),
								k = b.log10(h.end) - b.log10(i),
								l = h.paddingTop,
								m = h.paddingBottom,
								n = h.paddingLeft;
							return h.isHorizontal() ? 0 === j ? g = h.left + n : (f = h.width - (n + h.paddingRight), g = h.left + f / k * (b.log10(j) - b.log10(i)), g += n) : 0 === j ? g = h.top + l : (f = h.height - (l + m), g = h.bottom - m - f / k * (b.log10(j) - b.log10(i))), g
						},
						getValueForPixel: function (a) {
							var c, d, e = this,
								f = b.log10(e.end) - b.log10(e.start);
							return e.isHorizontal() ? (d = e.width - (e.paddingLeft + e.paddingRight), c = e.start * Math.pow(10, (a - e.left - e.paddingLeft) * f / d)) : (d = e.height - (e.paddingTop + e.paddingBottom), c = Math.pow(10, (e.bottom - e.paddingBottom - a) * f / d) / e.start), c
						}
					});
				a.scaleService.registerScaleType("logarithmic", d, c)
			}
		}, {}],
		42: [function (a, b, c) {
			"use strict";
			b.exports = function (a) {
				var b = a.helpers,
					c = a.defaults.global,
					d = {
						display: !0,
						animate: !0,
						lineArc: !1,
						position: "chartArea",
						angleLines: {
							display: !0,
							color: "rgba(0, 0, 0, 0.1)",
							lineWidth: 1
						},
						ticks: {
							showLabelBackdrop: !0,
							backdropColor: "rgba(255,255,255,0.75)",
							backdropPaddingY: 2,
							backdropPaddingX: 2
						},
						pointLabels: {
							fontSize: 10,
							callback: function (a) {
								return a
							}
						}
					},
					e = a.LinearScaleBase.extend({
						getValueCount: function () {
							return this.chart.data.labels.length
						},
						setDimensions: function () {
							var a = this,
								d = a.options,
								e = d.ticks;
							a.width = a.maxWidth, a.height = a.maxHeight, a.xCenter = Math.round(a.width / 2), a.yCenter = Math.round(a.height / 2);
							var f = b.min([a.height, a.width]),
								g = b.getValueOrDefault(e.fontSize, c.defaultFontSize);
							a.drawingArea = d.display ? f / 2 - (g / 2 + e.backdropPaddingY) : f / 2
						},
						determineDataLimits: function () {
							var a = this,
								c = a.chart;
							a.min = null, a.max = null, b.each(c.data.datasets, function (d, e) {
								if (c.isDatasetVisible(e)) {
									var f = c.getDatasetMeta(e);
									b.each(d.data, function (b, c) {
										var d = +a.getRightValue(b);
										isNaN(d) || f.data[c].hidden || (null === a.min ? a.min = d : d < a.min && (a.min = d), null === a.max ? a.max = d : d > a.max && (a.max = d))
									})
								}
							}), a.handleTickRangeOptions()
						},
						getTickLimit: function () {
							var a = this.options.ticks,
								d = b.getValueOrDefault(a.fontSize, c.defaultFontSize);
							return Math.min(a.maxTicksLimit ? a.maxTicksLimit : 11, Math.ceil(this.drawingArea / (1.5 * d)))
						},
						convertTicksToLabels: function () {
							var b = this;
							a.LinearScaleBase.prototype.convertTicksToLabels.call(b), b.pointLabels = b.chart.data.labels.map(b.options.pointLabels.callback, b)
						},
						getLabelForIndex: function (a, b) {
							return +this.getRightValue(this.chart.data.datasets[b].data[a])
						},
						fit: function () {
							var a, d, e, f, g, h, i, j, k, l, m, n, o = this.options.pointLabels,
								p = b.getValueOrDefault(o.fontSize, c.defaultFontSize),
								q = b.getValueOrDefault(o.fontStyle, c.defaultFontStyle),
								r = b.getValueOrDefault(o.fontFamily, c.defaultFontFamily),
								s = b.fontString(p, q, r),
								t = b.min([this.height / 2 - p - 5, this.width / 2]),
								u = this.width,
								v = 0;
							for (this.ctx.font = s, d = 0; d < this.getValueCount(); d++) a = this.getPointPosition(d, t), e = this.ctx.measureText(this.pointLabels[d] ? this.pointLabels[d] : "").width + 5, 0 === d || d === this.getValueCount() / 2 ? (f = e / 2, a.x + f > u && (u = a.x + f, g = d), a.x - f < v && (v = a.x - f, i = d)) : d < this.getValueCount() / 2 ? a.x + e > u && (u = a.x + e, g = d) : d > this.getValueCount() / 2 && a.x - e < v && (v = a.x - e, i = d);
							k = v, l = Math.ceil(u - this.width), h = this.getIndexAngle(g), j = this.getIndexAngle(i), m = l / Math.sin(h + Math.PI / 2), n = k / Math.sin(j + Math.PI / 2), m = b.isNumber(m) ? m : 0, n = b.isNumber(n) ? n : 0, this.drawingArea = Math.round(t - (n + m) / 2), this.setCenterPoint(n, m)
						},
						setCenterPoint: function (a, b) {
							var c = this,
								d = c.width - b - c.drawingArea,
								e = a + c.drawingArea;
							c.xCenter = Math.round((e + d) / 2 + c.left), c.yCenter = Math.round(c.height / 2 + c.top)
						},
						getIndexAngle: function (a) {
							var b = 2 * Math.PI / this.getValueCount();
							return a * b - Math.PI / 2
						},
						getDistanceFromCenterForValue: function (a) {
							var b = this;
							if (null === a) return 0;
							var c = b.drawingArea / (b.max - b.min);
							return b.options.reverse ? (b.max - a) * c : (a - b.min) * c
						},
						getPointPosition: function (a, b) {
							var c = this,
								d = c.getIndexAngle(a);
							return {
								x: Math.round(Math.cos(d) * b) + c.xCenter,
								y: Math.round(Math.sin(d) * b) + c.yCenter
							}
						},
						getPointPositionForValue: function (a, b) {
							return this.getPointPosition(a, this.getDistanceFromCenterForValue(b))
						},
						getBasePosition: function () {
							var a = this,
								b = a.min,
								c = a.max;
							return a.getPointPositionForValue(0, a.beginAtZero ? 0 : b < 0 && c < 0 ? c : b > 0 && c > 0 ? b : 0)
						},
						draw: function () {
							var a = this,
								d = a.options,
								e = d.gridLines,
								f = d.ticks,
								g = d.angleLines,
								h = d.pointLabels,
								i = b.getValueOrDefault;
							if (d.display) {
								var j = a.ctx,
									k = i(f.fontSize, c.defaultFontSize),
									l = i(f.fontStyle, c.defaultFontStyle),
									m = i(f.fontFamily, c.defaultFontFamily),
									n = b.fontString(k, l, m);
								if (b.each(a.ticks, function (g, h) {
										if (h > 0 || d.reverse) {
											var l = a.getDistanceFromCenterForValue(a.ticksAsNumbers[h]),
												m = a.yCenter - l;
											if (e.display && 0 !== h)
												if (j.strokeStyle = b.getValueAtIndexOrDefault(e.color, h - 1), j.lineWidth = b.getValueAtIndexOrDefault(e.lineWidth, h - 1), d.lineArc) j.beginPath(), j.arc(a.xCenter, a.yCenter, l, 0, 2 * Math.PI), j.closePath(), j.stroke();
												else {
													j.beginPath();
													for (var o = 0; o < a.getValueCount(); o++) {
														var p = a.getPointPosition(o, l);
														0 === o ? j.moveTo(p.x, p.y) : j.lineTo(p.x, p.y)
													}
													j.closePath(), j.stroke()
												}
											if (f.display) {
												var q = i(f.fontColor, c.defaultFontColor);
												if (j.font = n, f.showLabelBackdrop) {
													var r = j.measureText(g).width;
													j.fillStyle = f.backdropColor, j.fillRect(a.xCenter - r / 2 - f.backdropPaddingX, m - k / 2 - f.backdropPaddingY, r + 2 * f.backdropPaddingX, k + 2 * f.backdropPaddingY)
												}
												j.textAlign = "center", j.textBaseline = "middle", j.fillStyle = q, j.fillText(g, a.xCenter, m)
											}
										}
									}), !d.lineArc) {
									j.lineWidth = g.lineWidth, j.strokeStyle = g.color;
									for (var o = a.getDistanceFromCenterForValue(d.reverse ? a.min : a.max), p = i(h.fontSize, c.defaultFontSize), q = i(h.fontStyle, c.defaultFontStyle), r = i(h.fontFamily, c.defaultFontFamily), s = b.fontString(p, q, r), t = a.getValueCount() - 1; t >= 0; t--) {
										if (g.display) {
											var u = a.getPointPosition(t, o);
											j.beginPath(), j.moveTo(a.xCenter, a.yCenter), j.lineTo(u.x, u.y), j.stroke(), j.closePath()
										}
										var v = a.getPointPosition(t, o + 5),
											w = i(h.fontColor, c.defaultFontColor);
										j.font = s, j.fillStyle = w;
										var x = a.pointLabels,
											y = x.length,
											z = x.length / 2,
											A = z / 2,
											B = t < A || t > y - A,
											C = t === A || t === y - A;
										0 === t ? j.textAlign = "center" : t === z ? j.textAlign = "center" : t < z ? j.textAlign = "left" : j.textAlign = "right", C ? j.textBaseline = "middle" : B ? j.textBaseline = "bottom" : j.textBaseline = "top", j.fillText(x[t] ? x[t] : "", v.x, v.y)
									}
								}
							}
						}
					});
				a.scaleService.registerScaleType("radialLinear", e, d)
			}
		}, {}],
		43: [function (a, b, c) {
			"use strict";
			var d = a(1);
			d = "function" == typeof d ? d : window.moment, b.exports = function (a) {
				var b = a.helpers,
					c = {
						units: [{
							name: "millisecond",
							steps: [1, 2, 5, 10, 20, 50, 100, 250, 500]
						}, {
							name: "second",
							steps: [1, 2, 5, 10, 30]
						}, {
							name: "minute",
							steps: [1, 2, 5, 10, 30]
						}, {
							name: "hour",
							steps: [1, 2, 3, 6, 12]
						}, {
							name: "day",
							steps: [1, 2, 5]
						}, {
							name: "week",
							maxStep: 4
						}, {
							name: "month",
							maxStep: 3
						}, {
							name: "quarter",
							maxStep: 4
						}, {
							name: "year",
							maxStep: !1
						}]
					},
					e = {
						position: "bottom",
						time: {
							parser: !1,
							format: !1,
							unit: !1,
							round: !1,
							displayFormat: !1,
							isoWeekday: !1,
							displayFormats: {
								millisecond: "h:mm:ss.SSS a",
								second: "h:mm:ss a",
								minute: "h:mm:ss a",
								hour: "MMM D, hA",
								day: "ll",
								week: "ll",
								month: "MMM YYYY",
								quarter: "[Q]Q - YYYY",
								year: "YYYY"
							}
						},
						ticks: {
							autoSkip: !1
						}
					},
					f = a.Scale.extend({
						initialize: function () {
							if (!d) throw new Error("Chart.js - Moment.js could not be found! You must include it before Chart.js to use the time scale. Download at https://momentjs.com");
							a.Scale.prototype.initialize.call(this)
						},
						getLabelMoment: function (a, b) {
							return this.labelMoments[a][b]
						},
						getMomentStartOf: function (a) {
							var b = this;
							return "week" === b.options.time.unit && b.options.time.isoWeekday !== !1 ? a.clone().startOf("isoWeek").isoWeekday(b.options.time.isoWeekday) : a.clone().startOf(b.tickUnit)
						},
						determineDataLimits: function () {
							var a = this;
							a.labelMoments = [];
							var c = [];
							a.chart.data.labels && a.chart.data.labels.length > 0 ? (b.each(a.chart.data.labels, function (b, d) {
								var e = a.parseTime(b);
								e.isValid() && (a.options.time.round && e.startOf(a.options.time.round), c.push(e))
							}, a), a.firstTick = d.min.call(a, c), a.lastTick = d.max.call(a, c)) : (a.firstTick = null, a.lastTick = null), b.each(a.chart.data.datasets, function (e, f) {
								var g = [],
									h = a.chart.isDatasetVisible(f);
								"object" == typeof e.data[0] && null !== e.data[0] ? b.each(e.data, function (b, c) {
									var e = a.parseTime(a.getRightValue(b));
									e.isValid() && (a.options.time.round && e.startOf(a.options.time.round), g.push(e), h && (a.firstTick = null !== a.firstTick ? d.min(a.firstTick, e) : e, a.lastTick = null !== a.lastTick ? d.max(a.lastTick, e) : e))
								}, a) : g = c, a.labelMoments.push(g)
							}, a), a.options.time.min && (a.firstTick = a.parseTime(a.options.time.min)), a.options.time.max && (a.lastTick = a.parseTime(a.options.time.max)), a.firstTick = (a.firstTick || d()).clone(), a.lastTick = (a.lastTick || d()).clone()
						},
						buildTicks: function (d) {
							var e = this;
							e.ctx.save();
							var f = b.getValueOrDefault(e.options.ticks.fontSize, a.defaults.global.defaultFontSize),
								g = b.getValueOrDefault(e.options.ticks.fontStyle, a.defaults.global.defaultFontStyle),
								h = b.getValueOrDefault(e.options.ticks.fontFamily, a.defaults.global.defaultFontFamily),
								i = b.fontString(f, g, h);
							if (e.ctx.font = i, e.ticks = [], e.unitScale = 1, e.scaleSizeInUnits = 0, e.options.time.unit) e.tickUnit = e.options.time.unit || "day", e.displayFormat = e.options.time.displayFormats[e.tickUnit], e.scaleSizeInUnits = e.lastTick.diff(e.firstTick, e.tickUnit, !0), e.unitScale = b.getValueOrDefault(e.options.time.unitStepSize, 1);
							else {
								var j = e.isHorizontal() ? e.width - (e.paddingLeft + e.paddingRight) : e.height - (e.paddingTop + e.paddingBottom),
									k = e.tickFormatFunction(e.firstTick, 0, []),
									l = e.ctx.measureText(k).width,
									m = Math.cos(b.toRadians(e.options.ticks.maxRotation)),
									n = Math.sin(b.toRadians(e.options.ticks.maxRotation));
								l = l * m + f * n;
								var o = j / l;
								e.tickUnit = "millisecond", e.scaleSizeInUnits = e.lastTick.diff(e.firstTick, e.tickUnit, !0), e.displayFormat = e.options.time.displayFormats[e.tickUnit];
								for (var p = 0, q = c.units[p]; p < c.units.length;) {
									if (e.unitScale = 1, b.isArray(q.steps) && Math.ceil(e.scaleSizeInUnits / o) < b.max(q.steps)) {
										for (var r = 0; r < q.steps.length; ++r)
											if (q.steps[r] >= Math.ceil(e.scaleSizeInUnits / o)) {
												e.unitScale = b.getValueOrDefault(e.options.time.unitStepSize, q.steps[r]);
												break
											}
										break
									}
									if (q.maxStep === !1 || Math.ceil(e.scaleSizeInUnits / o) < q.maxStep) {
										e.unitScale = b.getValueOrDefault(e.options.time.unitStepSize, Math.ceil(e.scaleSizeInUnits / o));
										break
									}++p, q = c.units[p], e.tickUnit = q.name;
									var s = e.firstTick.diff(e.getMomentStartOf(e.firstTick), e.tickUnit, !0),
										t = e.getMomentStartOf(e.lastTick.clone().add(1, e.tickUnit)).diff(e.lastTick, e.tickUnit, !0);
									e.scaleSizeInUnits = e.lastTick.diff(e.firstTick, e.tickUnit, !0) + s + t, e.displayFormat = e.options.time.displayFormats[q.name]
								}
							}
							var u;
							if (e.options.time.min ? u = e.getMomentStartOf(e.firstTick) : (e.firstTick = e.getMomentStartOf(e.firstTick), u = e.firstTick), !e.options.time.max) {
								var v = e.getMomentStartOf(e.lastTick);
								0 !== v.diff(e.lastTick, e.tickUnit, !0) && (e.lastTick = e.getMomentStartOf(e.lastTick.add(1, e.tickUnit)))
							}
							e.smallestLabelSeparation = e.width, b.each(e.chart.data.datasets, function (a, b) {
								for (var c = 1; c < e.labelMoments[b].length; c++) e.smallestLabelSeparation = Math.min(e.smallestLabelSeparation, e.labelMoments[b][c].diff(e.labelMoments[b][c - 1], e.tickUnit, !0))
							}, e), e.options.time.displayFormat && (e.displayFormat = e.options.time.displayFormat), e.ticks.push(e.firstTick.clone());
							for (var w = 1; w <= e.scaleSizeInUnits; ++w) {
								var x = u.clone().add(w, e.tickUnit);
								if (e.options.time.max && x.diff(e.lastTick, e.tickUnit, !0) >= 0) break;
								w % e.unitScale === 0 && e.ticks.push(x)
							}
							var y = e.ticks[e.ticks.length - 1].diff(e.lastTick, e.tickUnit);
							0 === y && 0 !== e.scaleSizeInUnits || (e.options.time.max ? (e.ticks.push(e.lastTick.clone()), e.scaleSizeInUnits = e.lastTick.diff(e.ticks[0], e.tickUnit, !0)) : (e.ticks.push(e.lastTick.clone()), e.scaleSizeInUnits = e.lastTick.diff(e.firstTick, e.tickUnit, !0))), e.ctx.restore()
						},
						getLabelForIndex: function (a, b) {
							var c = this,
								d = c.chart.data.labels && a < c.chart.data.labels.length ? c.chart.data.labels[a] : "";
							return "object" == typeof c.chart.data.datasets[b].data[0] && (d = c.getRightValue(c.chart.data.datasets[b].data[a])), c.options.time.tooltipFormat && (d = c.parseTime(d).format(c.options.time.tooltipFormat)), d
						},
						tickFormatFunction: function (a, c, d) {
							var e = a.format(this.displayFormat),
								f = this.options.ticks,
								g = b.getValueOrDefault(f.callback, f.userCallback);
							return g ? g(e, c, d) : e
						},
						convertTicksToLabels: function () {
							var a = this;
							a.tickMoments = a.ticks, a.ticks = a.ticks.map(a.tickFormatFunction, a)
						},
						getPixelForValue: function (a, b, c, d) {
							var e = this,
								f = a && a.isValid && a.isValid() ? a : e.getLabelMoment(c, b);
							if (f) {
								var g = f.diff(e.firstTick, e.tickUnit, !0),
									h = g / e.scaleSizeInUnits;
								if (e.isHorizontal()) {
									var i = e.width - (e.paddingLeft + e.paddingRight),
										j = (i / Math.max(e.ticks.length - 1, 1), i * h + e.paddingLeft);
									return e.left + Math.round(j)
								}
								var k = e.height - (e.paddingTop + e.paddingBottom),
									l = (k / Math.max(e.ticks.length - 1, 1), k * h + e.paddingTop);
								return e.top + Math.round(l)
							}
						},
						getPixelForTick: function (a, b) {
							return this.getPixelForValue(this.tickMoments[a], null, null, b)
						},
						getValueForPixel: function (a) {
							var b = this,
								c = b.isHorizontal() ? b.width - (b.paddingLeft + b.paddingRight) : b.height - (b.paddingTop + b.paddingBottom),
								e = (a - (b.isHorizontal() ? b.left + b.paddingLeft : b.top + b.paddingTop)) / c;
							return e *= b.scaleSizeInUnits, b.firstTick.clone().add(d.duration(e, b.tickUnit).asSeconds(), "seconds")
						},
						parseTime: function (a) {
							var b = this;
							return "string" == typeof b.options.time.parser ? d(a, b.options.time.parser) : "function" == typeof b.options.time.parser ? b.options.time.parser(a) : "function" == typeof a.getMonth || "number" == typeof a ? d(a) : a.isValid && a.isValid() ? a : "string" != typeof b.options.time.format && b.options.time.format.call ? (console.warn("options.time.format is deprecated and replaced by options.time.parser. See http://nnnick.github.io/Chart.js/docs-v2/#scales-time-scale"), b.options.time.format(a)) : d(a, b.options.time.format)
						}
					});
				a.scaleService.registerScaleType("time", f, e)
			}
		}, {
			1: 1
		}]
	}, {}, [7])(7)
}), ! function (a, b) {
	"function" == typeof define && define.amd ? define(b) : "object" == typeof exports ? module.exports = b(require, exports, module) : a.CountUp = b()
}(this, function (a, b, c) {
	var d = function (a, b, c, d, e, f) {
		for (var g = 0, h = ["webkit", "moz", "ms", "o"], i = 0; i < h.length && !window.requestAnimationFrame; ++i) window.requestAnimationFrame = window[h[i] + "RequestAnimationFrame"], window.cancelAnimationFrame = window[h[i] + "CancelAnimationFrame"] || window[h[i] + "CancelRequestAnimationFrame"];
		window.requestAnimationFrame || (window.requestAnimationFrame = function (a, b) {
			var c = (new Date).getTime(),
				d = Math.max(0, 16 - (c - g)),
				e = window.setTimeout(function () {
					a(c + d)
				}, d);
			return g = c + d, e
		}), window.cancelAnimationFrame || (window.cancelAnimationFrame = function (a) {
			clearTimeout(a)
		});
		var j = this;
		j.options = {
			useEasing: !0,
			useGrouping: !0,
			separator: ",",
			decimal: ".",
			easingFn: null,
			formattingFn: null
		};
		for (var k in f) f.hasOwnProperty(k) && (j.options[k] = f[k]);
		"" === j.options.separator && (j.options.useGrouping = !1), j.options.prefix || (j.options.prefix = ""), j.options.suffix || (j.options.suffix = ""), j.d = "string" == typeof a ? document.getElementById(a) : a, j.startVal = Number(b), j.endVal = Number(c), j.countDown = j.startVal > j.endVal, j.frameVal = j.startVal, j.decimals = Math.max(0, d || 0), j.dec = Math.pow(10, j.decimals), j.duration = 1e3 * Number(e) || 2e3, j.formatNumber = function (a) {
			a = a.toFixed(j.decimals), a += "";
			var b, c, d, e;
			if (b = a.split("."), c = b[0], d = b.length > 1 ? j.options.decimal + b[1] : "", e = /(\d+)(\d{3})/, j.options.useGrouping)
				for (; e.test(c);) c = c.replace(e, "$1" + j.options.separator + "$2");
			return j.options.prefix + c + d + j.options.suffix
		}, j.easeOutExpo = function (a, b, c, d) {
			return c * (-Math.pow(2, -10 * a / d) + 1) * 1024 / 1023 + b
		}, j.easingFn = j.options.easingFn ? j.options.easingFn : j.easeOutExpo, j.formattingFn = j.options.formattingFn ? j.options.formattingFn : j.formatNumber, j.version = function () {
			return "1.7.1"
		}, j.printValue = function (a) {
			var b = j.formattingFn(a);
			"INPUT" === j.d.tagName ? this.d.value = b : "text" === j.d.tagName || "tspan" === j.d.tagName ? this.d.textContent = b : this.d.innerHTML = b
		}, j.count = function (a) {
			j.startTime || (j.startTime = a), j.timestamp = a;
			var b = a - j.startTime;
			j.remaining = j.duration - b, j.options.useEasing ? j.countDown ? j.frameVal = j.startVal - j.easingFn(b, 0, j.startVal - j.endVal, j.duration) : j.frameVal = j.easingFn(b, j.startVal, j.endVal - j.startVal, j.duration) : j.countDown ? j.frameVal = j.startVal - (j.startVal - j.endVal) * (b / j.duration) : j.frameVal = j.startVal + (j.endVal - j.startVal) * (b / j.duration), j.countDown ? j.frameVal = j.frameVal < j.endVal ? j.endVal : j.frameVal : j.frameVal = j.frameVal > j.endVal ? j.endVal : j.frameVal, j.frameVal = Math.round(j.frameVal * j.dec) / j.dec, j.printValue(j.frameVal), b < j.duration ? j.rAF = requestAnimationFrame(j.count) : j.callback && j.callback()
		}, j.start = function (a) {
			return j.callback = a, j.rAF = requestAnimationFrame(j.count), !1
		}, j.pauseResume = function () {
			j.paused ? (j.paused = !1, delete j.startTime, j.duration = j.remaining, j.startVal = j.frameVal, requestAnimationFrame(j.count)) : (j.paused = !0, cancelAnimationFrame(j.rAF))
		}, j.reset = function () {
			j.paused = !1, delete j.startTime, j.startVal = b, cancelAnimationFrame(j.rAF), j.printValue(j.startVal)
		}, j.update = function (a) {
			cancelAnimationFrame(j.rAF), j.paused = !1, delete j.startTime, j.startVal = j.frameVal, j.endVal = Number(a), j.countDown = j.startVal > j.endVal, j.rAF = requestAnimationFrame(j.count)
		}, j.printValue(j.startVal)
	};
	return d
}),
/*!
 * Cropper v2.3.4
 * https://github.com/fengyuanchen/cropper
 *
 * Copyright (c) 2014-2016 Fengyuan Chen and contributors
 * Released under the MIT license
 *
 * Date: 2016-09-03T05:50:45.412Z
 */
function (a) {
	"function" == typeof define && define.amd ? define(["jquery"], a) : a("object" == typeof exports ? require("jquery") : jQuery)
}(function (a) {
	"use strict";

	function b(a) {
		return "number" == typeof a && !isNaN(a)
	}

	function c(a) {
		return "undefined" == typeof a
	}

	function d(a, c) {
		var d = [];
		return b(c) && d.push(c), d.slice.apply(a, d)
	}

	function e(a, b) {
		var c = d(arguments, 2);
		return function () {
			return a.apply(b, c.concat(d(arguments)))
		}
	}

	function f(a) {
		var b = a.match(/^(https?:)\/\/([^\:\/\?#]+):?(\d*)/i);
		return b && (b[1] !== u.protocol || b[2] !== u.hostname || b[3] !== u.port)
	}

	function g(a) {
		var b = "timestamp=" + (new Date).getTime();
		return a + (a.indexOf("?") === -1 ? "?" : "&") + b
	}

	function h(a) {
		return a ? ' crossOrigin="' + a + '"' : ""
	}

	function i(a, b) {
		var c;
		return a.naturalWidth && !qa ? b(a.naturalWidth, a.naturalHeight) : (c = document.createElement("img"), c.onload = function () {
			b(this.width, this.height)
		}, void(c.src = a.src))
	}

	function j(a) {
		var c = [],
			d = a.rotate,
			e = a.scaleX,
			f = a.scaleY;
		return b(d) && 0 !== d && c.push("rotate(" + d + "deg)"), b(e) && 1 !== e && c.push("scaleX(" + e + ")"), b(f) && 1 !== f && c.push("scaleY(" + f + ")"), c.length ? c.join(" ") : "none"
	}

	function k(a, b) {
		var c, d, e = ua(a.degree) % 180,
			f = (e > 90 ? 180 - e : e) * Math.PI / 180,
			g = va(f),
			h = wa(f),
			i = a.width,
			j = a.height,
			k = a.aspectRatio;
		return b ? (c = i / (h + g / k), d = c / k) : (c = i * h + j * g, d = i * g + j * h), {
			width: c,
			height: d
		}
	}

	function l(c, d) {
		var e, f, g, h = a("<canvas>")[0],
			i = h.getContext("2d"),
			j = 0,
			l = 0,
			m = d.naturalWidth,
			n = d.naturalHeight,
			o = d.rotate,
			p = d.scaleX,
			q = d.scaleY,
			r = b(p) && b(q) && (1 !== p || 1 !== q),
			s = b(o) && 0 !== o,
			t = s || r,
			u = m * ua(p || 1),
			v = n * ua(q || 1);
		return r && (e = u / 2, f = v / 2), s && (g = k({
			width: u,
			height: v,
			degree: o
		}), u = g.width, v = g.height, e = u / 2, f = v / 2), h.width = u, h.height = v, t && (j = -m / 2, l = -n / 2, i.save(), i.translate(e, f)), s && i.rotate(o * Math.PI / 180), r && i.scale(p, q), i.drawImage(c, za(j), za(l), za(m), za(n)), t && i.restore(), h
	}

	function m(b) {
		var c = b.length,
			d = 0,
			e = 0;
		return c && (a.each(b, function (a, b) {
			d += b.pageX, e += b.pageY
		}), d /= c, e /= c), {
			pageX: d,
			pageY: e
		}
	}

	function n(a, b, c) {
		var d, e = "";
		for (d = b, c += b; d < c; d++) e += Aa(a.getUint8(d));
		return e
	}

	function o(a) {
		var b, c, d, e, f, g, h, i, j, k, l = new y(a),
			m = l.byteLength;
		if (255 === l.getUint8(0) && 216 === l.getUint8(1))
			for (j = 2; j < m;) {
				if (255 === l.getUint8(j) && 225 === l.getUint8(j + 1)) {
					h = j;
					break
				}
				j++
			}
		if (h && (c = h + 4, d = h + 10, "Exif" === n(l, c, 4) && (g = l.getUint16(d), f = 18761 === g, (f || 19789 === g) && 42 === l.getUint16(d + 2, f) && (e = l.getUint32(d + 4, f), e >= 8 && (i = d + e)))), i)
			for (m = l.getUint16(i, f), k = 0; k < m; k++)
				if (j = i + 12 * k + 2, 274 === l.getUint16(j, f)) {
					j += 8, b = l.getUint16(j, f), qa && l.setUint16(j, 1, f);
					break
				}
		return b
	}

	function p(a) {
		var b, c = a.replace($, ""),
			d = atob(c),
			e = d.length,
			f = new w(e),
			g = new x(f);
		for (b = 0; b < e; b++) g[b] = d.charCodeAt(b);
		return f
	}

	function q(a) {
		var b, c = new x(a),
			d = c.length,
			e = "";
		for (b = 0; b < d; b++) e += Aa(c[b]);
		return "data:image/jpeg;base64," + z(e)
	}

	function r(b, c) {
		this.$element = a(b), this.options = a.extend({}, r.DEFAULTS, a.isPlainObject(c) && c), this.isLoaded = !1, this.isBuilt = !1, this.isCompleted = !1, this.isRotated = !1, this.isCropped = !1, this.isDisabled = !1, this.isReplaced = !1, this.isLimited = !1, this.wheeling = !1, this.isImg = !1, this.originalUrl = "", this.canvas = null, this.cropBox = null, this.init()
	}
	var s = a(window),
		t = a(document),
		u = window.location,
		v = window.navigator,
		w = window.ArrayBuffer,
		x = window.Uint8Array,
		y = window.DataView,
		z = window.btoa,
		A = "cropper",
		B = "cropper-modal",
		C = "cropper-hide",
		D = "cropper-hidden",
		E = "cropper-invisible",
		F = "cropper-move",
		G = "cropper-crop",
		H = "cropper-disabled",
		I = "cropper-bg",
		J = "mousedown touchstart pointerdown MSPointerDown",
		K = "mousemove touchmove pointermove MSPointerMove",
		L = "mouseup touchend touchcancel pointerup pointercancel MSPointerUp MSPointerCancel",
		M = "wheel mousewheel DOMMouseScroll",
		N = "dblclick",
		O = "load." + A,
		P = "error." + A,
		Q = "resize." + A,
		R = "build." + A,
		S = "built." + A,
		T = "cropstart." + A,
		U = "cropmove." + A,
		V = "cropend." + A,
		W = "crop." + A,
		X = "zoom." + A,
		Y = /^(e|w|s|n|se|sw|ne|nw|all|crop|move|zoom)$/,
		Z = /^data:/,
		$ = /^data:([^;]+);base64,/,
		_ = /^data:image\/jpeg.*;base64,/,
		aa = "preview",
		ba = "action",
		ca = "e",
		da = "w",
		ea = "s",
		fa = "n",
		ga = "se",
		ha = "sw",
		ia = "ne",
		ja = "nw",
		ka = "all",
		la = "crop",
		ma = "move",
		na = "zoom",
		oa = "none",
		pa = a.isFunction(a("<canvas>")[0].getContext),
		qa = v && /(Macintosh|iPhone|iPod|iPad).*AppleWebKit/i.test(v.userAgent),
		ra = Number,
		sa = Math.min,
		ta = Math.max,
		ua = Math.abs,
		va = Math.sin,
		wa = Math.cos,
		xa = Math.sqrt,
		ya = Math.round,
		za = Math.floor,
		Aa = String.fromCharCode;
	r.prototype = {
		constructor: r,
		init: function () {
			var a, b = this.$element;
			if (b.is("img")) {
				if (this.isImg = !0, this.originalUrl = a = b.attr("src"), !a) return;
				a = b.prop("src")
			} else b.is("canvas") && pa && (a = b[0].toDataURL());
			this.load(a)
		},
		trigger: function (b, c) {
			var d = a.Event(b, c);
			return this.$element.trigger(d), d
		},
		load: function (b) {
			var c, d, e = this.options,
				h = this.$element;
			if (b && (h.one(R, e.build), !this.trigger(R).isDefaultPrevented())) {
				if (this.url = b, this.image = {}, !e.checkOrientation || !w) return this.clone();
				if (c = a.proxy(this.read, this), Z.test(b)) return _.test(b) ? c(p(b)) : this.clone();
				d = new XMLHttpRequest, d.onerror = d.onabort = a.proxy(function () {
					this.clone()
				}, this), d.onload = function () {
					c(this.response)
				}, e.checkCrossOrigin && f(b) && h.prop("crossOrigin") && (b = g(b)), d.open("get", b), d.responseType = "arraybuffer", d.send()
			}
		},
		read: function (a) {
			var b = this.options,
				c = o(a),
				d = this.image,
				e = 0,
				f = 1,
				g = 1;
			if (c > 1) switch (this.url = q(a), c) {
				case 2:
					f = -1;
					break;
				case 3:
					e = -180;
					break;
				case 4:
					g = -1;
					break;
				case 5:
					e = 90, g = -1;
					break;
				case 6:
					e = 90;
					break;
				case 7:
					e = 90, f = -1;
					break;
				case 8:
					e = -90
			}
			b.rotatable && (d.rotate = e), b.scalable && (d.scaleX = f, d.scaleY = g), this.clone()
		},
		clone: function () {
			var b, c, d = this.options,
				e = this.$element,
				i = this.url,
				j = "";
			d.checkCrossOrigin && f(i) && (j = e.prop("crossOrigin"), j ? b = i : (j = "anonymous", b = g(i))), this.crossOrigin = j, this.crossOriginUrl = b, this.$clone = c = a("<img" + h(j) + ' src="' + (b || i) + '">'), this.isImg ? e[0].complete ? this.start() : e.one(O, a.proxy(this.start, this)) : c.one(O, a.proxy(this.start, this)).one(P, a.proxy(this.stop, this)).addClass(C).insertAfter(e)
		},
		start: function () {
			var b = this.$element,
				c = this.$clone;
			this.isImg || (c.off(P, this.stop), b = c), i(b[0], a.proxy(function (b, c) {
				a.extend(this.image, {
					naturalWidth: b,
					naturalHeight: c,
					aspectRatio: b / c
				}), this.isLoaded = !0, this.build()
			}, this))
		},
		stop: function () {
			this.$clone.remove(), this.$clone = null
		},
		build: function () {
			var b, c, d, e = this.options,
				f = this.$element,
				g = this.$clone;
			this.isLoaded && (this.isBuilt && this.unbuild(), this.$container = f.parent(), this.$cropper = b = a(r.TEMPLATE), this.$canvas = b.find(".cropper-canvas").append(g), this.$dragBox = b.find(".cropper-drag-box"), this.$cropBox = c = b.find(".cropper-crop-box"), this.$viewBox = b.find(".cropper-view-box"), this.$face = d = c.find(".cropper-face"), f.addClass(D).after(b), this.isImg || g.removeClass(C), this.initPreview(), this.bind(), e.aspectRatio = ta(0, e.aspectRatio) || NaN, e.viewMode = ta(0, sa(3, ya(e.viewMode))) || 0, e.autoCrop ? (this.isCropped = !0, e.modal && this.$dragBox.addClass(B)) : c.addClass(D), e.guides || c.find(".cropper-dashed").addClass(D), e.center || c.find(".cropper-center").addClass(D), e.cropBoxMovable && d.addClass(F).data(ba, ka), e.highlight || d.addClass(E), e.background && b.addClass(I), e.cropBoxResizable || c.find(".cropper-line, .cropper-point").addClass(D), this.setDragMode(e.dragMode), this.render(), this.isBuilt = !0, this.setData(e.data), f.one(S, e.built), this.completing = setTimeout(a.proxy(function () {
				this.trigger(S), this.trigger(W, this.getData()), this.isCompleted = !0
			}, this), 0))
		},
		unbuild: function () {
			this.isBuilt && (this.isCompleted || clearTimeout(this.completing), this.isBuilt = !1, this.isCompleted = !1, this.initialImage = null, this.initialCanvas = null, this.initialCropBox = null, this.container = null, this.canvas = null, this.cropBox = null, this.unbind(), this.resetPreview(), this.$preview = null, this.$viewBox = null, this.$cropBox = null, this.$dragBox = null, this.$canvas = null, this.$container = null, this.$cropper.remove(), this.$cropper = null)
		},
		render: function () {
			this.initContainer(), this.initCanvas(), this.initCropBox(), this.renderCanvas(), this.isCropped && this.renderCropBox()
		},
		initContainer: function () {
			var a = this.options,
				b = this.$element,
				c = this.$container,
				d = this.$cropper;
			d.addClass(D), b.removeClass(D), d.css(this.container = {
				width: ta(c.width(), ra(a.minContainerWidth) || 200),
				height: ta(c.height(), ra(a.minContainerHeight) || 100)
			}), b.addClass(D), d.removeClass(D)
		},
		initCanvas: function () {
			var b, c = this.options.viewMode,
				d = this.container,
				e = d.width,
				f = d.height,
				g = this.image,
				h = g.naturalWidth,
				i = g.naturalHeight,
				j = 90 === ua(g.rotate),
				k = j ? i : h,
				l = j ? h : i,
				m = k / l,
				n = e,
				o = f;
			f * m > e ? 3 === c ? n = f * m : o = e / m : 3 === c ? o = e / m : n = f * m, b = {
				naturalWidth: k,
				naturalHeight: l,
				aspectRatio: m,
				width: n,
				height: o
			}, b.oldLeft = b.left = (e - n) / 2, b.oldTop = b.top = (f - o) / 2, this.canvas = b, this.isLimited = 1 === c || 2 === c, this.limitCanvas(!0, !0), this.initialImage = a.extend({}, g), this.initialCanvas = a.extend({}, b)
		},
		limitCanvas: function (a, b) {
			var c, d, e, f, g = this.options,
				h = g.viewMode,
				i = this.container,
				j = i.width,
				k = i.height,
				l = this.canvas,
				m = l.aspectRatio,
				n = this.cropBox,
				o = this.isCropped && n;
			a && (c = ra(g.minCanvasWidth) || 0, d = ra(g.minCanvasHeight) || 0, h && (h > 1 ? (c = ta(c, j), d = ta(d, k), 3 === h && (d * m > c ? c = d * m : d = c / m)) : c ? c = ta(c, o ? n.width : 0) : d ? d = ta(d, o ? n.height : 0) : o && (c = n.width, d = n.height, d * m > c ? c = d * m : d = c / m)), c && d ? d * m > c ? d = c / m : c = d * m : c ? d = c / m : d && (c = d * m), l.minWidth = c, l.minHeight = d, l.maxWidth = 1 / 0, l.maxHeight = 1 / 0), b && (h ? (e = j - l.width, f = k - l.height, l.minLeft = sa(0, e), l.minTop = sa(0, f), l.maxLeft = ta(0, e), l.maxTop = ta(0, f), o && this.isLimited && (l.minLeft = sa(n.left, n.left + n.width - l.width), l.minTop = sa(n.top, n.top + n.height - l.height), l.maxLeft = n.left, l.maxTop = n.top, 2 === h && (l.width >= j && (l.minLeft = sa(0, e), l.maxLeft = ta(0, e)), l.height >= k && (l.minTop = sa(0, f), l.maxTop = ta(0, f))))) : (l.minLeft = -l.width, l.minTop = -l.height, l.maxLeft = j, l.maxTop = k))
		},
		renderCanvas: function (a) {
			var b, c, d = this.canvas,
				e = this.image,
				f = e.rotate,
				g = e.naturalWidth,
				h = e.naturalHeight;
			this.isRotated && (this.isRotated = !1, c = k({
				width: e.width,
				height: e.height,
				degree: f
			}), b = c.width / c.height, b !== d.aspectRatio && (d.left -= (c.width - d.width) / 2, d.top -= (c.height - d.height) / 2, d.width = c.width, d.height = c.height, d.aspectRatio = b, d.naturalWidth = g, d.naturalHeight = h, f % 180 && (c = k({
				width: g,
				height: h,
				degree: f
			}), d.naturalWidth = c.width, d.naturalHeight = c.height), this.limitCanvas(!0, !1))), (d.width > d.maxWidth || d.width < d.minWidth) && (d.left = d.oldLeft), (d.height > d.maxHeight || d.height < d.minHeight) && (d.top = d.oldTop), d.width = sa(ta(d.width, d.minWidth), d.maxWidth), d.height = sa(ta(d.height, d.minHeight), d.maxHeight), this.limitCanvas(!1, !0), d.oldLeft = d.left = sa(ta(d.left, d.minLeft), d.maxLeft), d.oldTop = d.top = sa(ta(d.top, d.minTop), d.maxTop), this.$canvas.css({
				width: d.width,
				height: d.height,
				left: d.left,
				top: d.top
			}), this.renderImage(), this.isCropped && this.isLimited && this.limitCropBox(!0, !0), a && this.output()
		},
		renderImage: function (b) {
			var c, d = this.canvas,
				e = this.image;
			e.rotate && (c = k({
				width: d.width,
				height: d.height,
				degree: e.rotate,
				aspectRatio: e.aspectRatio
			}, !0)), a.extend(e, c ? {
				width: c.width,
				height: c.height,
				left: (d.width - c.width) / 2,
				top: (d.height - c.height) / 2
			} : {
				width: d.width,
				height: d.height,
				left: 0,
				top: 0
			}), this.$clone.css({
				width: e.width,
				height: e.height,
				marginLeft: e.left,
				marginTop: e.top,
				transform: j(e)
			}), b && this.output()
		},
		initCropBox: function () {
			var b = this.options,
				c = this.canvas,
				d = b.aspectRatio,
				e = ra(b.autoCropArea) || .8,
				f = {
					width: c.width,
					height: c.height
				};
			d && (c.height * d > c.width ? f.height = f.width / d : f.width = f.height * d), this.cropBox = f, this.limitCropBox(!0, !0), f.width = sa(ta(f.width, f.minWidth), f.maxWidth), f.height = sa(ta(f.height, f.minHeight), f.maxHeight), f.width = ta(f.minWidth, f.width * e), f.height = ta(f.minHeight, f.height * e), f.oldLeft = f.left = c.left + (c.width - f.width) / 2, f.oldTop = f.top = c.top + (c.height - f.height) / 2, this.initialCropBox = a.extend({}, f)
		},
		limitCropBox: function (a, b) {
			var c, d, e, f, g = this.options,
				h = g.aspectRatio,
				i = this.container,
				j = i.width,
				k = i.height,
				l = this.canvas,
				m = this.cropBox,
				n = this.isLimited;
			a && (c = ra(g.minCropBoxWidth) || 0, d = ra(g.minCropBoxHeight) || 0, c = sa(c, j), d = sa(d, k), e = sa(j, n ? l.width : j), f = sa(k, n ? l.height : k), h && (c && d ? d * h > c ? d = c / h : c = d * h : c ? d = c / h : d && (c = d * h), f * h > e ? f = e / h : e = f * h), m.minWidth = sa(c, e), m.minHeight = sa(d, f), m.maxWidth = e, m.maxHeight = f), b && (n ? (m.minLeft = ta(0, l.left), m.minTop = ta(0, l.top), m.maxLeft = sa(j, l.left + l.width) - m.width, m.maxTop = sa(k, l.top + l.height) - m.height) : (m.minLeft = 0, m.minTop = 0, m.maxLeft = j - m.width, m.maxTop = k - m.height))
		},
		renderCropBox: function () {
			var a = this.options,
				b = this.container,
				c = b.width,
				d = b.height,
				e = this.cropBox;
			(e.width > e.maxWidth || e.width < e.minWidth) && (e.left = e.oldLeft), (e.height > e.maxHeight || e.height < e.minHeight) && (e.top = e.oldTop), e.width = sa(ta(e.width, e.minWidth), e.maxWidth), e.height = sa(ta(e.height, e.minHeight), e.maxHeight), this.limitCropBox(!1, !0), e.oldLeft = e.left = sa(ta(e.left, e.minLeft), e.maxLeft), e.oldTop = e.top = sa(ta(e.top, e.minTop), e.maxTop), a.movable && a.cropBoxMovable && this.$face.data(ba, e.width === c && e.height === d ? ma : ka), this.$cropBox.css({
				width: e.width,
				height: e.height,
				left: e.left,
				top: e.top
			}), this.isCropped && this.isLimited && this.limitCanvas(!0, !0), this.isDisabled || this.output()
		},
		output: function () {
			this.preview(), this.isCompleted && this.trigger(W, this.getData())
		},
		initPreview: function () {
			var b, c = h(this.crossOrigin),
				d = c ? this.crossOriginUrl : this.url;
			this.$preview = a(this.options.preview), this.$clone2 = b = a("<img" + c + ' src="' + d + '">'), this.$viewBox.html(b), this.$preview.each(function () {
				var b = a(this);
				b.data(aa, {
					width: b.width(),
					height: b.height(),
					html: b.html()
				}), b.html("<img" + c + ' src="' + d + '" style="display:block;width:100%;height:auto;min-width:0!important;min-height:0!important;max-width:none!important;max-height:none!important;image-orientation:0deg!important;">')
			})
		},
		resetPreview: function () {
			this.$preview.each(function () {
				var b = a(this),
					c = b.data(aa);
				b.css({
					width: c.width,
					height: c.height
				}).html(c.html).removeData(aa)
			})
		},
		preview: function () {
			var b = this.image,
				c = this.canvas,
				d = this.cropBox,
				e = d.width,
				f = d.height,
				g = b.width,
				h = b.height,
				i = d.left - c.left - b.left,
				k = d.top - c.top - b.top;
			this.isCropped && !this.isDisabled && (this.$clone2.css({
				width: g,
				height: h,
				marginLeft: -i,
				marginTop: -k,
				transform: j(b)
			}), this.$preview.each(function () {
				var c = a(this),
					d = c.data(aa),
					l = d.width,
					m = d.height,
					n = l,
					o = m,
					p = 1;
				e && (p = l / e, o = f * p), f && o > m && (p = m / f, n = e * p, o = m), c.css({
					width: n,
					height: o
				}).find("img").css({
					width: g * p,
					height: h * p,
					marginLeft: -i * p,
					marginTop: -k * p,
					transform: j(b)
				})
			}))
		},
		bind: function () {
			var b = this.options,
				c = this.$element,
				d = this.$cropper;
			a.isFunction(b.cropstart) && c.on(T, b.cropstart), a.isFunction(b.cropmove) && c.on(U, b.cropmove), a.isFunction(b.cropend) && c.on(V, b.cropend), a.isFunction(b.crop) && c.on(W, b.crop), a.isFunction(b.zoom) && c.on(X, b.zoom), d.on(J, a.proxy(this.cropStart, this)), b.zoomable && b.zoomOnWheel && d.on(M, a.proxy(this.wheel, this)), b.toggleDragModeOnDblclick && d.on(N, a.proxy(this.dblclick, this)), t.on(K, this._cropMove = e(this.cropMove, this)).on(L, this._cropEnd = e(this.cropEnd, this)), b.responsive && s.on(Q, this._resize = e(this.resize, this))
		},
		unbind: function () {
			var b = this.options,
				c = this.$element,
				d = this.$cropper;
			a.isFunction(b.cropstart) && c.off(T, b.cropstart), a.isFunction(b.cropmove) && c.off(U, b.cropmove), a.isFunction(b.cropend) && c.off(V, b.cropend), a.isFunction(b.crop) && c.off(W, b.crop), a.isFunction(b.zoom) && c.off(X, b.zoom), d.off(J, this.cropStart), b.zoomable && b.zoomOnWheel && d.off(M, this.wheel), b.toggleDragModeOnDblclick && d.off(N, this.dblclick), t.off(K, this._cropMove).off(L, this._cropEnd), b.responsive && s.off(Q, this._resize)
		},
		resize: function () {
			var b, c, d, e = this.options.restore,
				f = this.$container,
				g = this.container;
			!this.isDisabled && g && (d = f.width() / g.width, 1 === d && f.height() === g.height || (e && (b = this.getCanvasData(), c = this.getCropBoxData()), this.render(), e && (this.setCanvasData(a.each(b, function (a, c) {
				b[a] = c * d
			})), this.setCropBoxData(a.each(c, function (a, b) {
				c[a] = b * d
			})))))
		},
		dblclick: function () {
			this.isDisabled || (this.$dragBox.hasClass(G) ? this.setDragMode(ma) : this.setDragMode(la))
		},
		wheel: function (b) {
			var c = b.originalEvent || b,
				d = ra(this.options.wheelZoomRatio) || .1,
				e = 1;
			this.isDisabled || (b.preventDefault(), this.wheeling || (this.wheeling = !0, setTimeout(a.proxy(function () {
				this.wheeling = !1
			}, this), 50), c.deltaY ? e = c.deltaY > 0 ? 1 : -1 : c.wheelDelta ? e = -c.wheelDelta / 120 : c.detail && (e = c.detail > 0 ? 1 : -1), this.zoom(-e * d, b)))
		},
		cropStart: function (b) {
			var c, d, e = this.options,
				f = b.originalEvent,
				g = f && f.touches,
				h = b;
			if (!this.isDisabled) {
				if (g) {
					if (c = g.length, c > 1) {
						if (!e.zoomable || !e.zoomOnTouch || 2 !== c) return;
						h = g[1], this.startX2 = h.pageX, this.startY2 = h.pageY, d = na
					}
					h = g[0]
				}
				if (d = d || a(h.target).data(ba), Y.test(d)) {
					if (this.trigger(T, {
							originalEvent: f,
							action: d
						}).isDefaultPrevented()) return;
					b.preventDefault(), this.action = d, this.cropping = !1, this.startX = h.pageX || f && f.pageX, this.startY = h.pageY || f && f.pageY, d === la && (this.cropping = !0, this.$dragBox.addClass(B))
				}
			}
		},
		cropMove: function (a) {
			var b, c = this.options,
				d = a.originalEvent,
				e = d && d.touches,
				f = a,
				g = this.action;
			if (!this.isDisabled) {
				if (e) {
					if (b = e.length, b > 1) {
						if (!c.zoomable || !c.zoomOnTouch || 2 !== b) return;
						f = e[1], this.endX2 = f.pageX, this.endY2 = f.pageY
					}
					f = e[0]
				}
				if (g) {
					if (this.trigger(U, {
							originalEvent: d,
							action: g
						}).isDefaultPrevented()) return;
					a.preventDefault(), this.endX = f.pageX || d && d.pageX, this.endY = f.pageY || d && d.pageY, this.change(f.shiftKey, g === na ? a : null)
				}
			}
		},
		cropEnd: function (a) {
			var b = a.originalEvent,
				c = this.action;
			this.isDisabled || c && (a.preventDefault(), this.cropping && (this.cropping = !1, this.$dragBox.toggleClass(B, this.isCropped && this.options.modal)), this.action = "", this.trigger(V, {
				originalEvent: b,
				action: c
			}))
		},
		change: function (a, b) {
			var c, d, e = this.options,
				f = e.aspectRatio,
				g = this.action,
				h = this.container,
				i = this.canvas,
				j = this.cropBox,
				k = j.width,
				l = j.height,
				m = j.left,
				n = j.top,
				o = m + k,
				p = n + l,
				q = 0,
				r = 0,
				s = h.width,
				t = h.height,
				u = !0;
			switch (!f && a && (f = k && l ? k / l : 1), this.isLimited && (q = j.minLeft, r = j.minTop, s = q + sa(h.width, i.width, i.left + i.width), t = r + sa(h.height, i.height, i.top + i.height)), d = {
				x: this.endX - this.startX,
				y: this.endY - this.startY
			}, f && (d.X = d.y * f, d.Y = d.x / f), g) {
				case ka:
					m += d.x, n += d.y;
					break;
				case ca:
					if (d.x >= 0 && (o >= s || f && (n <= r || p >= t))) {
						u = !1;
						break
					}
					k += d.x, f && (l = k / f, n -= d.Y / 2), k < 0 && (g = da, k = 0);
					break;
				case fa:
					if (d.y <= 0 && (n <= r || f && (m <= q || o >= s))) {
						u = !1;
						break
					}
					l -= d.y, n += d.y, f && (k = l * f, m += d.X / 2), l < 0 && (g = ea, l = 0);
					break;
				case da:
					if (d.x <= 0 && (m <= q || f && (n <= r || p >= t))) {
						u = !1;
						break
					}
					k -= d.x, m += d.x, f && (l = k / f, n += d.Y / 2), k < 0 && (g = ca, k = 0);
					break;
				case ea:
					if (d.y >= 0 && (p >= t || f && (m <= q || o >= s))) {
						u = !1;
						break
					}
					l += d.y, f && (k = l * f, m -= d.X / 2), l < 0 && (g = fa, l = 0);
					break;
				case ia:
					if (f) {
						if (d.y <= 0 && (n <= r || o >= s)) {
							u = !1;
							break
						}
						l -= d.y, n += d.y, k = l * f
					} else d.x >= 0 ? o < s ? k += d.x : d.y <= 0 && n <= r && (u = !1) : k += d.x, d.y <= 0 ? n > r && (l -= d.y, n += d.y) : (l -= d.y, n += d.y);
					k < 0 && l < 0 ? (g = ha, l = 0, k = 0) : k < 0 ? (g = ja, k = 0) : l < 0 && (g = ga, l = 0);
					break;
				case ja:
					if (f) {
						if (d.y <= 0 && (n <= r || m <= q)) {
							u = !1;
							break
						}
						l -= d.y, n += d.y, k = l * f, m += d.X
					} else d.x <= 0 ? m > q ? (k -= d.x, m += d.x) : d.y <= 0 && n <= r && (u = !1) : (k -= d.x, m += d.x), d.y <= 0 ? n > r && (l -= d.y, n += d.y) : (l -= d.y, n += d.y);
					k < 0 && l < 0 ? (g = ga, l = 0, k = 0) : k < 0 ? (g = ia, k = 0) : l < 0 && (g = ha, l = 0);
					break;
				case ha:
					if (f) {
						if (d.x <= 0 && (m <= q || p >= t)) {
							u = !1;
							break
						}
						k -= d.x, m += d.x, l = k / f
					} else d.x <= 0 ? m > q ? (k -= d.x, m += d.x) : d.y >= 0 && p >= t && (u = !1) : (k -= d.x, m += d.x), d.y >= 0 ? p < t && (l += d.y) : l += d.y;
					k < 0 && l < 0 ? (g = ia, l = 0, k = 0) : k < 0 ? (g = ga, k = 0) : l < 0 && (g = ja, l = 0);
					break;
				case ga:
					if (f) {
						if (d.x >= 0 && (o >= s || p >= t)) {
							u = !1;
							break
						}
						k += d.x, l = k / f
					} else d.x >= 0 ? o < s ? k += d.x : d.y >= 0 && p >= t && (u = !1) : k += d.x, d.y >= 0 ? p < t && (l += d.y) : l += d.y;
					k < 0 && l < 0 ? (g = ja, l = 0, k = 0) : k < 0 ? (g = ha, k = 0) : l < 0 && (g = ia, l = 0);
					break;
				case ma:
					this.move(d.x, d.y), u = !1;
					break;
				case na:
					this.zoom(function (a, b, c, d) {
						var e = xa(a * a + b * b),
							f = xa(c * c + d * d);
						return (f - e) / e
					}(ua(this.startX - this.startX2), ua(this.startY - this.startY2), ua(this.endX - this.endX2), ua(this.endY - this.endY2)), b), this.startX2 = this.endX2, this.startY2 = this.endY2, u = !1;
					break;
				case la:
					if (!d.x || !d.y) {
						u = !1;
						break
					}
					c = this.$cropper.offset(), m = this.startX - c.left, n = this.startY - c.top, k = j.minWidth, l = j.minHeight, d.x > 0 ? g = d.y > 0 ? ga : ia : d.x < 0 && (m -= k, g = d.y > 0 ? ha : ja), d.y < 0 && (n -= l), this.isCropped || (this.$cropBox.removeClass(D), this.isCropped = !0, this.isLimited && this.limitCropBox(!0, !0))
			}
			u && (j.width = k, j.height = l, j.left = m, j.top = n, this.action = g, this.renderCropBox()), this.startX = this.endX, this.startY = this.endY
		},
		crop: function () {
			this.isBuilt && !this.isDisabled && (this.isCropped || (this.isCropped = !0, this.limitCropBox(!0, !0), this.options.modal && this.$dragBox.addClass(B), this.$cropBox.removeClass(D)), this.setCropBoxData(this.initialCropBox))
		},
		reset: function () {
			this.isBuilt && !this.isDisabled && (this.image = a.extend({}, this.initialImage), this.canvas = a.extend({}, this.initialCanvas), this.cropBox = a.extend({}, this.initialCropBox), this.renderCanvas(), this.isCropped && this.renderCropBox())
		},
		clear: function () {
			this.isCropped && !this.isDisabled && (a.extend(this.cropBox, {
				left: 0,
				top: 0,
				width: 0,
				height: 0
			}), this.isCropped = !1, this.renderCropBox(), this.limitCanvas(!0, !0), this.renderCanvas(), this.$dragBox.removeClass(B), this.$cropBox.addClass(D))
		},
		replace: function (a, b) {
			!this.isDisabled && a && (this.isImg && this.$element.attr("src", a), b ? (this.url = a, this.$clone.attr("src", a), this.isBuilt && this.$preview.find("img").add(this.$clone2).attr("src", a)) : (this.isImg && (this.isReplaced = !0), this.options.data = null, this.load(a)))
		},
		enable: function () {
			this.isBuilt && (this.isDisabled = !1, this.$cropper.removeClass(H))
		},
		disable: function () {
			this.isBuilt && (this.isDisabled = !0, this.$cropper.addClass(H))
		},
		destroy: function () {
			var a = this.$element;
			this.isLoaded ? (this.isImg && this.isReplaced && a.attr("src", this.originalUrl), this.unbuild(), a.removeClass(D)) : this.isImg ? a.off(O, this.start) : this.$clone && this.$clone.remove(), a.removeData(A)
		},
		move: function (a, b) {
			var d = this.canvas;
			this.moveTo(c(a) ? a : d.left + ra(a), c(b) ? b : d.top + ra(b))
		},
		moveTo: function (a, d) {
			var e = this.canvas,
				f = !1;
			c(d) && (d = a), a = ra(a), d = ra(d), this.isBuilt && !this.isDisabled && this.options.movable && (b(a) && (e.left = a, f = !0), b(d) && (e.top = d, f = !0), f && this.renderCanvas(!0))
		},
		zoom: function (a, b) {
			var c = this.canvas;
			a = ra(a), a = a < 0 ? 1 / (1 - a) : 1 + a, this.zoomTo(c.width * a / c.naturalWidth, b)
		},
		zoomTo: function (a, b) {
			var c, d, e, f, g, h = this.options,
				i = this.canvas,
				j = i.width,
				k = i.height,
				l = i.naturalWidth,
				n = i.naturalHeight;
			if (a = ra(a), a >= 0 && this.isBuilt && !this.isDisabled && h.zoomable) {
				if (d = l * a, e = n * a, b && (c = b.originalEvent), this.trigger(X, {
						originalEvent: c,
						oldRatio: j / l,
						ratio: d / l
					}).isDefaultPrevented()) return;
				c ? (f = this.$cropper.offset(), g = c.touches ? m(c.touches) : {
					pageX: b.pageX || c.pageX || 0,
					pageY: b.pageY || c.pageY || 0
				}, i.left -= (d - j) * ((g.pageX - f.left - i.left) / j), i.top -= (e - k) * ((g.pageY - f.top - i.top) / k)) : (i.left -= (d - j) / 2, i.top -= (e - k) / 2), i.width = d, i.height = e, this.renderCanvas(!0)
			}
		},
		rotate: function (a) {
			this.rotateTo((this.image.rotate || 0) + ra(a))
		},
		rotateTo: function (a) {
			a = ra(a), b(a) && this.isBuilt && !this.isDisabled && this.options.rotatable && (this.image.rotate = a % 360, this.isRotated = !0, this.renderCanvas(!0))
		},
		scale: function (a, d) {
			var e = this.image,
				f = !1;
			c(d) && (d = a), a = ra(a), d = ra(d), this.isBuilt && !this.isDisabled && this.options.scalable && (b(a) && (e.scaleX = a, f = !0), b(d) && (e.scaleY = d, f = !0), f && this.renderImage(!0))
		},
		scaleX: function (a) {
			var c = this.image.scaleY;
			this.scale(a, b(c) ? c : 1)
		},
		scaleY: function (a) {
			var c = this.image.scaleX;
			this.scale(b(c) ? c : 1, a)
		},
		getData: function (b) {
			var c, d, e = this.options,
				f = this.image,
				g = this.canvas,
				h = this.cropBox;
			return this.isBuilt && this.isCropped ? (d = {
				x: h.left - g.left,
				y: h.top - g.top,
				width: h.width,
				height: h.height
			}, c = f.width / f.naturalWidth, a.each(d, function (a, e) {
				e /= c, d[a] = b ? ya(e) : e
			})) : d = {
				x: 0,
				y: 0,
				width: 0,
				height: 0
			}, e.rotatable && (d.rotate = f.rotate || 0), e.scalable && (d.scaleX = f.scaleX || 1, d.scaleY = f.scaleY || 1), d
		},
		setData: function (c) {
			var d, e, f, g = this.options,
				h = this.image,
				i = this.canvas,
				j = {};
			a.isFunction(c) && (c = c.call(this.element)), this.isBuilt && !this.isDisabled && a.isPlainObject(c) && (g.rotatable && b(c.rotate) && c.rotate !== h.rotate && (h.rotate = c.rotate, this.isRotated = d = !0), g.scalable && (b(c.scaleX) && c.scaleX !== h.scaleX && (h.scaleX = c.scaleX, e = !0), b(c.scaleY) && c.scaleY !== h.scaleY && (h.scaleY = c.scaleY, e = !0)), d ? this.renderCanvas() : e && this.renderImage(), f = h.width / h.naturalWidth, b(c.x) && (j.left = c.x * f + i.left), b(c.y) && (j.top = c.y * f + i.top), b(c.width) && (j.width = c.width * f), b(c.height) && (j.height = c.height * f), this.setCropBoxData(j))
		},
		getContainerData: function () {
			return this.isBuilt ? this.container : {}
		},
		getImageData: function () {
			return this.isLoaded ? this.image : {}
		},
		getCanvasData: function () {
			var b = this.canvas,
				c = {};
			return this.isBuilt && a.each(["left", "top", "width", "height", "naturalWidth", "naturalHeight"], function (a, d) {
				c[d] = b[d]
			}), c
		},
		setCanvasData: function (c) {
			var d = this.canvas,
				e = d.aspectRatio;
			a.isFunction(c) && (c = c.call(this.$element)), this.isBuilt && !this.isDisabled && a.isPlainObject(c) && (b(c.left) && (d.left = c.left), b(c.top) && (d.top = c.top), b(c.width) ? (d.width = c.width, d.height = c.width / e) : b(c.height) && (d.height = c.height, d.width = c.height * e), this.renderCanvas(!0))
		},
		getCropBoxData: function () {
			var a, b = this.cropBox;
			return this.isBuilt && this.isCropped && (a = {
				left: b.left,
				top: b.top,
				width: b.width,
				height: b.height
			}), a || {}
		},
		setCropBoxData: function (c) {
			var d, e, f = this.cropBox,
				g = this.options.aspectRatio;
			a.isFunction(c) && (c = c.call(this.$element)), this.isBuilt && this.isCropped && !this.isDisabled && a.isPlainObject(c) && (b(c.left) && (f.left = c.left), b(c.top) && (f.top = c.top), b(c.width) && (d = !0, f.width = c.width), b(c.height) && (e = !0, f.height = c.height), g && (d ? f.height = f.width / g : e && (f.width = f.height * g)), this.renderCropBox())
		},
		getCroppedCanvas: function (b) {
			var c, d, e, f, g, h, i, j, k, m, n;
			if (this.isBuilt && pa) return this.isCropped ? (a.isPlainObject(b) || (b = {}), n = this.getData(), c = n.width, d = n.height, j = c / d, a.isPlainObject(b) && (g = b.width, h = b.height, g ? (h = g / j, i = g / c) : h && (g = h * j, i = h / d)), e = za(g || c), f = za(h || d), k = a("<canvas>")[0], k.width = e, k.height = f, m = k.getContext("2d"), b.fillColor && (m.fillStyle = b.fillColor, m.fillRect(0, 0, e, f)), m.drawImage.apply(m, function () {
				var a, b, e, f, g, h, j = l(this.$clone[0], this.image),
					k = j.width,
					m = j.height,
					o = this.canvas,
					p = [j],
					q = n.x + o.naturalWidth * (ua(n.scaleX || 1) - 1) / 2,
					r = n.y + o.naturalHeight * (ua(n.scaleY || 1) - 1) / 2;
				return q <= -c || q > k ? q = a = e = g = 0 : q <= 0 ? (e = -q, q = 0, a = g = sa(k, c + q)) : q <= k && (e = 0, a = g = sa(c, k - q)), a <= 0 || r <= -d || r > m ? r = b = f = h = 0 : r <= 0 ? (f = -r, r = 0, b = h = sa(m, d + r)) : r <= m && (f = 0, b = h = sa(d, m - r)), p.push(za(q), za(r), za(a), za(b)), i && (e *= i, f *= i, g *= i, h *= i), g > 0 && h > 0 && p.push(za(e), za(f), za(g), za(h)), p
			}.call(this)), k) : l(this.$clone[0], this.image)
		},
		setAspectRatio: function (a) {
			var b = this.options;
			this.isDisabled || c(a) || (b.aspectRatio = ta(0, a) || NaN, this.isBuilt && (this.initCropBox(), this.isCropped && this.renderCropBox()))
		},
		setDragMode: function (a) {
			var b, c, d = this.options;
			this.isLoaded && !this.isDisabled && (b = a === la, c = d.movable && a === ma, a = b || c ? a : oa, this.$dragBox.data(ba, a).toggleClass(G, b).toggleClass(F, c), d.cropBoxMovable || this.$face.data(ba, a).toggleClass(G, b).toggleClass(F, c))
		}
	}, r.DEFAULTS = {
		viewMode: 0,
		dragMode: "crop",
		aspectRatio: NaN,
		data: null,
		preview: "",
		responsive: !0,
		restore: !0,
		checkCrossOrigin: !0,
		checkOrientation: !0,
		modal: !0,
		guides: !0,
		center: !0,
		highlight: !0,
		background: !0,
		autoCrop: !0,
		autoCropArea: .8,
		movable: !0,
		rotatable: !0,
		scalable: !0,
		zoomable: !0,
		zoomOnTouch: !0,
		zoomOnWheel: !0,
		wheelZoomRatio: .1,
		cropBoxMovable: !0,
		cropBoxResizable: !0,
		toggleDragModeOnDblclick: !0,
		minCanvasWidth: 0,
		minCanvasHeight: 0,
		minCropBoxWidth: 0,
		minCropBoxHeight: 0,
		minContainerWidth: 200,
		minContainerHeight: 100,
		build: null,
		built: null,
		cropstart: null,
		cropmove: null,
		cropend: null,
		crop: null,
		zoom: null
	}, r.setDefaults = function (b) {
		a.extend(r.DEFAULTS, b)
	}, r.TEMPLATE = '<div class="cropper-container"><div class="cropper-wrap-box"><div class="cropper-canvas"></div></div><div class="cropper-drag-box"></div><div class="cropper-crop-box"><span class="cropper-view-box"></span><span class="cropper-dashed dashed-h"></span><span class="cropper-dashed dashed-v"></span><span class="cropper-center"></span><span class="cropper-face"></span><span class="cropper-line line-e" data-action="e"></span><span class="cropper-line line-n" data-action="n"></span><span class="cropper-line line-w" data-action="w"></span><span class="cropper-line line-s" data-action="s"></span><span class="cropper-point point-e" data-action="e"></span><span class="cropper-point point-n" data-action="n"></span><span class="cropper-point point-w" data-action="w"></span><span class="cropper-point point-s" data-action="s"></span><span class="cropper-point point-ne" data-action="ne"></span><span class="cropper-point point-nw" data-action="nw"></span><span class="cropper-point point-sw" data-action="sw"></span><span class="cropper-point point-se" data-action="se"></span></div></div>', r.other = a.fn.cropper, a.fn.cropper = function (b) {
		var e, f = d(arguments, 1);
		return this.each(function () {
			var c, d, g = a(this),
				h = g.data(A);
			if (!h) {
				if (/destroy/.test(b)) return;
				c = a.extend({}, g.data(), a.isPlainObject(b) && b), g.data(A, h = new r(this, c))
			}
			"string" == typeof b && a.isFunction(d = h[b]) && (e = d.apply(h, f))
		}), c(e) ? this : e
	}, a.fn.cropper.Constructor = r, a.fn.cropper.setDefaults = r.setDefaults, a.fn.cropper.noConflict = function () {
		return a.fn.cropper = r.other, this
	}
}),
/*! DataTables 1.10.13
 * ©2008-2016 SpryMedia Ltd - datatables.net/license
 */
function (a) {
	"use strict";
	"function" == typeof define && define.amd ? define(["jquery"], function (b) {
		return a(b, window, document)
	}) : "object" == typeof exports ? module.exports = function (b, c) {
		return b || (b = window), c || (c = "undefined" != typeof window ? require("jquery") : require("jquery")(b)), a(c, b, b.document)
	} : a(jQuery, window, document)
}(function (a, b, c, d) {
	"use strict";

	function e(b) {
		var c, d, f = "a aa ai ao as b fn i m o s ",
			g = {};
		a.each(b, function (a, h) {
			c = a.match(/^([^A-Z]+?)([A-Z])/), c && f.indexOf(c[1] + " ") !== -1 && (d = a.replace(c[0], c[2].toLowerCase()), g[d] = a, "o" === c[1] && e(b[a]))
		}), b._hungarianMap = g
	}

	function f(b, c, g) {
		b._hungarianMap || e(b);
		var h;
		a.each(c, function (e, i) {
			h = b._hungarianMap[e], h === d || !g && c[h] !== d || ("o" === h.charAt(0) ? (c[h] || (c[h] = {}), a.extend(!0, c[h], c[e]), f(b[h], c[h], g)) : c[h] = c[e])
		})
	}

	function g(a) {
		var b = Wa.defaults.oLanguage,
			c = a.sZeroRecords;
		!a.sEmptyTable && c && "No data available in table" === b.sEmptyTable && Ha(a, a, "sZeroRecords", "sEmptyTable"), !a.sLoadingRecords && c && "Loading..." === b.sLoadingRecords && Ha(a, a, "sZeroRecords", "sLoadingRecords"), a.sInfoThousands && (a.sThousands = a.sInfoThousands);
		var d = a.sDecimal;
		d && Qa(d)
	}

	function h(a) {
		nb(a, "ordering", "bSort"), nb(a, "orderMulti", "bSortMulti"), nb(a, "orderClasses", "bSortClasses"), nb(a, "orderCellsTop", "bSortCellsTop"), nb(a, "order", "aaSorting"), nb(a, "orderFixed", "aaSortingFixed"), nb(a, "paging", "bPaginate"), nb(a, "pagingType", "sPaginationType"), nb(a, "pageLength", "iDisplayLength"), nb(a, "searching", "bFilter"), "boolean" == typeof a.sScrollX && (a.sScrollX = a.sScrollX ? "100%" : ""), "boolean" == typeof a.scrollX && (a.scrollX = a.scrollX ? "100%" : "");
		var b = a.aoSearchCols;
		if (b)
			for (var c = 0, d = b.length; c < d; c++) b[c] && f(Wa.models.oSearch, b[c])
	}

	function i(b) {
		nb(b, "orderable", "bSortable"), nb(b, "orderData", "aDataSort"), nb(b, "orderSequence", "asSorting"), nb(b, "orderDataType", "sortDataType");
		var c = b.aDataSort;
		c && !a.isArray(c) && (b.aDataSort = [c])
	}

	function j(c) {
		if (!Wa.__browser) {
			var d = {};
			Wa.__browser = d;
			var e = a("<div/>").css({
					position: "fixed",
					top: 0,
					left: a(b).scrollLeft() * -1,
					height: 1,
					width: 1,
					overflow: "hidden"
				}).append(a("<div/>").css({
					position: "absolute",
					top: 1,
					left: 1,
					width: 100,
					overflow: "scroll"
				}).append(a("<div/>").css({
					width: "100%",
					height: 10
				}))).appendTo("body"),
				f = e.children(),
				g = f.children();
			d.barWidth = f[0].offsetWidth - f[0].clientWidth, d.bScrollOversize = 100 === g[0].offsetWidth && 100 !== f[0].clientWidth, d.bScrollbarLeft = 1 !== Math.round(g.offset().left), d.bBounding = !!e[0].getBoundingClientRect().width, e.remove()
		}
		a.extend(c.oBrowser, Wa.__browser), c.oScroll.iBarWidth = Wa.__browser.barWidth
	}

	function k(a, b, c, e, f, g) {
		var h, i = e,
			j = !1;
		for (c !== d && (h = c, j = !0); i !== f;) a.hasOwnProperty(i) && (h = j ? b(h, a[i], i, a) : a[i], j = !0, i += g);
		return h
	}

	function l(b, d) {
		var e = Wa.defaults.column,
			f = b.aoColumns.length,
			g = a.extend({}, Wa.models.oColumn, e, {
				nTh: d ? d : c.createElement("th"),
				sTitle: e.sTitle ? e.sTitle : d ? d.innerHTML : "",
				aDataSort: e.aDataSort ? e.aDataSort : [f],
				mData: e.mData ? e.mData : f,
				idx: f
			});
		b.aoColumns.push(g);
		var h = b.aoPreSearchCols;
		h[f] = a.extend({}, Wa.models.oSearch, h[f]), m(b, f, a(d).data())
	}

	function m(b, c, e) {
		var g = b.aoColumns[c],
			h = b.oClasses,
			j = a(g.nTh);
		if (!g.sWidthOrig) {
			g.sWidthOrig = j.attr("width") || null;
			var k = (j.attr("style") || "").match(/width:\s*(\d+[pxem%]+)/);
			k && (g.sWidthOrig = k[1])
		}
		e !== d && null !== e && (i(e), f(Wa.defaults.column, e), e.mDataProp === d || e.mData || (e.mData = e.mDataProp), e.sType && (g._sManualType = e.sType), e.className && !e.sClass && (e.sClass = e.className), a.extend(g, e), Ha(g, e, "sWidth", "sWidthOrig"), e.iDataSort !== d && (g.aDataSort = [e.iDataSort]), Ha(g, e, "aDataSort"));
		var l = g.mData,
			m = B(l),
			n = g.mRender ? B(g.mRender) : null,
			o = function (a) {
				return "string" == typeof a && a.indexOf("@") !== -1
			};
		g._bAttrSrc = a.isPlainObject(l) && (o(l.sort) || o(l.type) || o(l.filter)), g._setter = null, g.fnGetData = function (a, b, c) {
			var e = m(a, b, d, c);
			return n && b ? n(e, b, a, c) : e
		}, g.fnSetData = function (a, b, c) {
			return C(l)(a, b, c)
		}, "number" != typeof l && (b._rowReadObject = !0), b.oFeatures.bSort || (g.bSortable = !1, j.addClass(h.sSortableNone));
		var p = a.inArray("asc", g.asSorting) !== -1,
			q = a.inArray("desc", g.asSorting) !== -1;
		g.bSortable && (p || q) ? p && !q ? (g.sSortingClass = h.sSortableAsc, g.sSortingClassJUI = h.sSortJUIAscAllowed) : !p && q ? (g.sSortingClass = h.sSortableDesc, g.sSortingClassJUI = h.sSortJUIDescAllowed) : (g.sSortingClass = h.sSortable, g.sSortingClassJUI = h.sSortJUI) : (g.sSortingClass = h.sSortableNone, g.sSortingClassJUI = "")
	}

	function n(a) {
		if (a.oFeatures.bAutoWidth !== !1) {
			var b = a.aoColumns;
			ra(a);
			for (var c = 0, d = b.length; c < d; c++) b[c].nTh.style.width = b[c].sWidth
		}
		var e = a.oScroll;
		"" === e.sY && "" === e.sX || pa(a), La(a, null, "column-sizing", [a])
	}

	function o(a, b) {
		var c = r(a, "bVisible");
		return "number" == typeof c[b] ? c[b] : null
	}

	function p(b, c) {
		var d = r(b, "bVisible"),
			e = a.inArray(c, d);
		return e !== -1 ? e : null
	}

	function q(b) {
		var c = 0;
		return a.each(b.aoColumns, function (b, d) {
			d.bVisible && "none" !== a(d.nTh).css("display") && c++
		}), c
	}

	function r(b, c) {
		var d = [];
		return a.map(b.aoColumns, function (a, b) {
			a[c] && d.push(b)
		}), d
	}

	function s(a) {
		var b, c, e, f, g, h, i, j, k, l = a.aoColumns,
			m = a.aoData,
			n = Wa.ext.type.detect;
		for (b = 0, c = l.length; b < c; b++)
			if (i = l[b], k = [], !i.sType && i._sManualType) i.sType = i._sManualType;
			else if (!i.sType) {
			for (e = 0, f = n.length; e < f; e++) {
				for (g = 0, h = m.length; g < h && (k[g] === d && (k[g] = y(a, g, b, "type")), j = n[e](k[g], a), j || e === n.length - 1) && "html" !== j; g++);
				if (j) {
					i.sType = j;
					break
				}
			}
			i.sType || (i.sType = "string")
		}
	}

	function t(b, c, e, f) {
		var g, h, i, j, k, m, n, o = b.aoColumns;
		if (c)
			for (g = c.length - 1; g >= 0; g--) {
				n = c[g];
				var p = n.targets !== d ? n.targets : n.aTargets;
				for (a.isArray(p) || (p = [p]), i = 0, j = p.length; i < j; i++)
					if ("number" == typeof p[i] && p[i] >= 0) {
						for (; o.length <= p[i];) l(b);
						f(p[i], n)
					} else if ("number" == typeof p[i] && p[i] < 0) f(o.length + p[i], n);
				else if ("string" == typeof p[i])
					for (k = 0, m = o.length; k < m; k++)("_all" == p[i] || a(o[k].nTh).hasClass(p[i])) && f(k, n)
			}
		if (e)
			for (g = 0, h = e.length; g < h; g++) f(g, e[g])
	}

	function u(b, c, e, f) {
		var g = b.aoData.length,
			h = a.extend(!0, {}, Wa.models.oRow, {
				src: e ? "dom" : "data",
				idx: g
			});
		h._aData = c, b.aoData.push(h);
		for (var i = b.aoColumns, j = 0, k = i.length; j < k; j++) i[j].sType = null;
		b.aiDisplayMaster.push(g);
		var l = b.rowIdFn(c);
		return l !== d && (b.aIds[l] = h), !e && b.oFeatures.bDeferRender || I(b, g, e, f), g
	}

	function v(b, c) {
		var d;
		return c instanceof a || (c = a(c)), c.map(function (a, c) {
			return d = H(b, c), u(b, d.data, c, d.cells)
		})
	}

	function w(a, b) {
		return b._DT_RowIndex !== d ? b._DT_RowIndex : null
	}

	function x(b, c, d) {
		return a.inArray(d, b.aoData[c].anCells)
	}

	function y(a, b, c, e) {
		var f = a.iDraw,
			g = a.aoColumns[c],
			h = a.aoData[b]._aData,
			i = g.sDefaultContent,
			j = g.fnGetData(h, e, {
				settings: a,
				row: b,
				col: c
			});
		if (j === d) return a.iDrawError != f && null === i && (Ga(a, 0, "Requested unknown parameter " + ("function" == typeof g.mData ? "{function}" : "'" + g.mData + "'") + " for row " + b + ", column " + c, 4), a.iDrawError = f), i;
		if (j !== h && null !== j || null === i || e === d) {
			if ("function" == typeof j) return j.call(h)
		} else j = i;
		return null === j && "display" == e ? "" : j
	}

	function z(a, b, c, d) {
		var e = a.aoColumns[c],
			f = a.aoData[b]._aData;
		e.fnSetData(f, d, {
			settings: a,
			row: b,
			col: c
		})
	}

	function A(b) {
		return a.map(b.match(/(\\.|[^\.])+/g) || [""], function (a) {
			return a.replace(/\\\./g, ".")
		})
	}

	function B(b) {
		if (a.isPlainObject(b)) {
			var c = {};
			return a.each(b, function (a, b) {
					b && (c[a] = B(b))
				}),
				function (a, b, e, f) {
					var g = c[b] || c._;
					return g !== d ? g(a, b, e, f) : a
				}
		}
		if (null === b) return function (a) {
			return a
		};
		if ("function" == typeof b) return function (a, c, d, e) {
			return b(a, c, d, e)
		};
		if ("string" != typeof b || b.indexOf(".") === -1 && b.indexOf("[") === -1 && b.indexOf("(") === -1) return function (a, c) {
			return a[b]
		};
		var e = function (b, c, f) {
			var g, h, i, j;
			if ("" !== f)
				for (var k = A(f), l = 0, m = k.length; l < m; l++) {
					if (g = k[l].match(ob), h = k[l].match(pb), g) {
						if (k[l] = k[l].replace(ob, ""), "" !== k[l] && (b = b[k[l]]), i = [], k.splice(0, l + 1), j = k.join("."), a.isArray(b))
							for (var n = 0, o = b.length; n < o; n++) i.push(e(b[n], c, j));
						var p = g[0].substring(1, g[0].length - 1);
						b = "" === p ? i : i.join(p);
						break
					}
					if (h) k[l] = k[l].replace(pb, ""), b = b[k[l]]();
					else {
						if (null === b || b[k[l]] === d) return d;
						b = b[k[l]]
					}
				}
			return b
		};
		return function (a, c) {
			return e(a, c, b)
		}
	}

	function C(b) {
		if (a.isPlainObject(b)) return C(b._);
		if (null === b) return function () {};
		if ("function" == typeof b) return function (a, c, d) {
			b(a, "set", c, d)
		};
		if ("string" != typeof b || b.indexOf(".") === -1 && b.indexOf("[") === -1 && b.indexOf("(") === -1) return function (a, c) {
			a[b] = c
		};
		var c = function (b, e, f) {
			for (var g, h, i, j, k, l = A(f), m = l[l.length - 1], n = 0, o = l.length - 1; n < o; n++) {
				if (h = l[n].match(ob), i = l[n].match(pb), h) {
					if (l[n] = l[n].replace(ob, ""), b[l[n]] = [], g = l.slice(), g.splice(0, n + 1), k = g.join("."), a.isArray(e))
						for (var p = 0, q = e.length; p < q; p++) j = {}, c(j, e[p], k), b[l[n]].push(j);
					else b[l[n]] = e;
					return
				}
				i && (l[n] = l[n].replace(pb, ""), b = b[l[n]](e)), null !== b[l[n]] && b[l[n]] !== d || (b[l[n]] = {}), b = b[l[n]]
			}
			m.match(pb) ? b = b[m.replace(pb, "")](e) : b[m.replace(ob, "")] = e
		};
		return function (a, d) {
			return c(a, d, b)
		}
	}

	function D(a) {
		return hb(a.aoData, "_aData")
	}

	function E(a) {
		a.aoData.length = 0, a.aiDisplayMaster.length = 0, a.aiDisplay.length = 0, a.aIds = {}
	}

	function F(a, b, c) {
		for (var e = -1, f = 0, g = a.length; f < g; f++) a[f] == b ? e = f : a[f] > b && a[f]--;
		e != -1 && c === d && a.splice(e, 1)
	}

	function G(a, b, c, e) {
		var f, g, h = a.aoData[b],
			i = function (c, d) {
				for (; c.childNodes.length;) c.removeChild(c.firstChild);
				c.innerHTML = y(a, b, d, "display")
			};
		if ("dom" !== c && (c && "auto" !== c || "dom" !== h.src)) {
			var j = h.anCells;
			if (j)
				if (e !== d) i(j[e], e);
				else
					for (f = 0, g = j.length; f < g; f++) i(j[f], f)
		} else h._aData = H(a, h, e, e === d ? d : h._aData).data;
		h._aSortData = null, h._aFilterData = null;
		var k = a.aoColumns;
		if (e !== d) k[e].sType = null;
		else {
			for (f = 0, g = k.length; f < g; f++) k[f].sType = null;
			J(a, h)
		}
	}

	function H(b, c, e, f) {
		var g, h, i, j = [],
			k = c.firstChild,
			l = 0,
			m = b.aoColumns,
			n = b._rowReadObject;
		f = f !== d ? f : n ? {} : [];
		var o = function (a, b) {
				if ("string" == typeof a) {
					var c = a.indexOf("@");
					if (c !== -1) {
						var d = a.substring(c + 1),
							e = C(a);
						e(f, b.getAttribute(d))
					}
				}
			},
			p = function (b) {
				if (e === d || e === l)
					if (h = m[l], i = a.trim(b.innerHTML), h && h._bAttrSrc) {
						var c = C(h.mData._);
						c(f, i), o(h.mData.sort, b), o(h.mData.type, b), o(h.mData.filter, b)
					} else n ? (h._setter || (h._setter = C(h.mData)), h._setter(f, i)) : f[l] = i;
				l++
			};
		if (k)
			for (; k;) g = k.nodeName.toUpperCase(), "TD" != g && "TH" != g || (p(k), j.push(k)), k = k.nextSibling;
		else {
			j = c.anCells;
			for (var q = 0, r = j.length; q < r; q++) p(j[q])
		}
		var s = c.firstChild ? c : c.nTr;
		if (s) {
			var t = s.getAttribute("id");
			t && C(b.rowId)(f, t)
		}
		return {
			data: f,
			cells: j
		}
	}

	function I(b, d, e, f) {
		var g, h, i, j, k, l = b.aoData[d],
			m = l._aData,
			n = [];
		if (null === l.nTr) {
			for (g = e || c.createElement("tr"), l.nTr = g, l.anCells = n, g._DT_RowIndex = d, J(b, l), j = 0, k = b.aoColumns.length; j < k; j++) i = b.aoColumns[j], h = e ? f[j] : c.createElement(i.sCellType), h._DT_CellIndex = {
				row: d,
				column: j
			}, n.push(h), e && !i.mRender && i.mData === j || a.isPlainObject(i.mData) && i.mData._ === j + ".display" || (h.innerHTML = y(b, d, j, "display")), i.sClass && (h.className += " " + i.sClass), i.bVisible && !e ? g.appendChild(h) : !i.bVisible && e && h.parentNode.removeChild(h), i.fnCreatedCell && i.fnCreatedCell.call(b.oInstance, h, y(b, d, j), m, d, j);
			La(b, "aoRowCreatedCallback", null, [g, m, d])
		}
		l.nTr.setAttribute("role", "row")
	}

	function J(b, c) {
		var d = c.nTr,
			e = c._aData;
		if (d) {
			var f = b.rowIdFn(e);
			if (f && (d.id = f), e.DT_RowClass) {
				var g = e.DT_RowClass.split(" ");
				c.__rowc = c.__rowc ? mb(c.__rowc.concat(g)) : g, a(d).removeClass(c.__rowc.join(" ")).addClass(e.DT_RowClass)
			}
			e.DT_RowAttr && a(d).attr(e.DT_RowAttr), e.DT_RowData && a(d).data(e.DT_RowData)
		}
	}

	function K(b) {
		var c, d, e, f, g, h = b.nTHead,
			i = b.nTFoot,
			j = 0 === a("th, td", h).length,
			k = b.oClasses,
			l = b.aoColumns;
		for (j && (f = a("<tr/>").appendTo(h)), c = 0, d = l.length; c < d; c++) g = l[c], e = a(g.nTh).addClass(g.sClass), j && e.appendTo(f), b.oFeatures.bSort && (e.addClass(g.sSortingClass), g.bSortable !== !1 && (e.attr("tabindex", b.iTabIndex).attr("aria-controls", b.sTableId), Aa(b, g.nTh, c))), g.sTitle != e[0].innerHTML && e.html(g.sTitle), Na(b, "header")(b, e, g, k);
		if (j && P(b.aoHeader, h), a(h).find(">tr").attr("role", "row"), a(h).find(">tr>th, >tr>td").addClass(k.sHeaderTH), a(i).find(">tr>th, >tr>td").addClass(k.sFooterTH), null !== i) {
			var m = b.aoFooter[0];
			for (c = 0, d = m.length; c < d; c++) g = l[c], g.nTf = m[c].cell, g.sClass && a(g.nTf).addClass(g.sClass)
		}
	}

	function L(b, c, e) {
		var f, g, h, i, j, k, l, m, n, o = [],
			p = [],
			q = b.aoColumns.length;
		if (c) {
			for (e === d && (e = !1), f = 0, g = c.length; f < g; f++) {
				for (o[f] = c[f].slice(), o[f].nTr = c[f].nTr, h = q - 1; h >= 0; h--) b.aoColumns[h].bVisible || e || o[f].splice(h, 1);
				p.push([])
			}
			for (f = 0, g = o.length; f < g; f++) {
				if (l = o[f].nTr)
					for (; k = l.firstChild;) l.removeChild(k);
				for (h = 0, i = o[f].length; h < i; h++)
					if (m = 1, n = 1, p[f][h] === d) {
						for (l.appendChild(o[f][h].cell), p[f][h] = 1; o[f + m] !== d && o[f][h].cell == o[f + m][h].cell;) p[f + m][h] = 1, m++;
						for (; o[f][h + n] !== d && o[f][h].cell == o[f][h + n].cell;) {
							for (j = 0; j < m; j++) p[f + j][h + n] = 1;
							n++
						}
						a(o[f][h].cell).attr("rowspan", m).attr("colspan", n)
					}
			}
		}
	}

	function M(b) {
		var c = La(b, "aoPreDrawCallback", "preDraw", [b]);
		if (a.inArray(!1, c) !== -1) return void na(b, !1);
		var e = [],
			f = 0,
			g = b.asStripeClasses,
			h = g.length,
			i = (b.aoOpenRows.length, b.oLanguage),
			j = b.iInitDisplayStart,
			k = "ssp" == Oa(b),
			l = b.aiDisplay;
		b.bDrawing = !0, j !== d && j !== -1 && (b._iDisplayStart = k ? j : j >= b.fnRecordsDisplay() ? 0 : j, b.iInitDisplayStart = -1);
		var m = b._iDisplayStart,
			n = b.fnDisplayEnd();
		if (b.bDeferLoading) b.bDeferLoading = !1, b.iDraw++, na(b, !1);
		else if (k) {
			if (!b.bDestroying && !S(b)) return
		} else b.iDraw++;
		if (0 !== l.length)
			for (var o = k ? 0 : m, p = k ? b.aoData.length : n, r = o; r < p; r++) {
				var s = l[r],
					t = b.aoData[s];
				null === t.nTr && I(b, s);
				var u = t.nTr;
				if (0 !== h) {
					var v = g[f % h];
					t._sRowStripe != v && (a(u).removeClass(t._sRowStripe).addClass(v), t._sRowStripe = v)
				}
				La(b, "aoRowCallback", null, [u, t._aData, f, r]), e.push(u), f++
			} else {
				var w = i.sZeroRecords;
				1 == b.iDraw && "ajax" == Oa(b) ? w = i.sLoadingRecords : i.sEmptyTable && 0 === b.fnRecordsTotal() && (w = i.sEmptyTable), e[0] = a("<tr/>", {
					class: h ? g[0] : ""
				}).append(a("<td />", {
					valign: "top",
					colSpan: q(b),
					class: b.oClasses.sRowEmpty
				}).html(w))[0]
			}
		La(b, "aoHeaderCallback", "header", [a(b.nTHead).children("tr")[0], D(b), m, n, l]), La(b, "aoFooterCallback", "footer", [a(b.nTFoot).children("tr")[0], D(b), m, n, l]);
		var x = a(b.nTBody);
		x.children().detach(), x.append(a(e)), La(b, "aoDrawCallback", "draw", [b]), b.bSorted = !1, b.bFiltered = !1, b.bDrawing = !1
	}

	function N(a, b) {
		var c = a.oFeatures,
			d = c.bSort,
			e = c.bFilter;
		d && xa(a), e ? X(a, a.oPreviousSearch) : a.aiDisplay = a.aiDisplayMaster.slice(), b !== !0 && (a._iDisplayStart = 0), a._drawHold = b, M(a), a._drawHold = !1
	}

	function O(b) {
		var c = b.oClasses,
			d = a(b.nTable),
			e = a("<div/>").insertBefore(d),
			f = b.oFeatures,
			g = a("<div/>", {
				id: b.sTableId + "_wrapper",
				class: c.sWrapper + (b.nTFoot ? "" : " " + c.sNoFooter)
			});
		b.nHolding = e[0], b.nTableWrapper = g[0], b.nTableReinsertBefore = b.nTable.nextSibling;
		for (var h, i, j, k, l, m, n = b.sDom.split(""), o = 0; o < n.length; o++) {
			if (h = null, i = n[o], "<" == i) {
				if (j = a("<div/>")[0], k = n[o + 1], "'" == k || '"' == k) {
					for (l = "", m = 2; n[o + m] != k;) l += n[o + m], m++;
					if ("H" == l ? l = c.sJUIHeader : "F" == l && (l = c.sJUIFooter), l.indexOf(".") != -1) {
						var p = l.split(".");
						j.id = p[0].substr(1, p[0].length - 1), j.className = p[1]
					} else "#" == l.charAt(0) ? j.id = l.substr(1, l.length - 1) : j.className = l;
					o += m
				}
				g.append(j), g = a(j)
			} else if (">" == i) g = g.parent();
			else if ("l" == i && f.bPaginate && f.bLengthChange) h = ja(b);
			else if ("f" == i && f.bFilter) h = W(b);
			else if ("r" == i && f.bProcessing) h = ma(b);
			else if ("t" == i) h = oa(b);
			else if ("i" == i && f.bInfo) h = da(b);
			else if ("p" == i && f.bPaginate) h = ka(b);
			else if (0 !== Wa.ext.feature.length)
				for (var q = Wa.ext.feature, r = 0, s = q.length; r < s; r++)
					if (i == q[r].cFeature) {
						h = q[r].fnInit(b);
						break
					}
			if (h) {
				var t = b.aanFeatures;
				t[i] || (t[i] = []), t[i].push(h), g.append(h)
			}
		}
		e.replaceWith(g), b.nHolding = null
	}

	function P(b, c) {
		var d, e, f, g, h, i, j, k, l, m, n, o = a(c).children("tr"),
			p = function (a, b, c) {
				for (var d = a[b]; d[c];) c++;
				return c
			};
		for (b.splice(0, b.length), f = 0, i = o.length; f < i; f++) b.push([]);
		for (f = 0, i = o.length; f < i; f++)
			for (d = o[f], k = 0, e = d.firstChild; e;) {
				if ("TD" == e.nodeName.toUpperCase() || "TH" == e.nodeName.toUpperCase())
					for (l = 1 * e.getAttribute("colspan"), m = 1 * e.getAttribute("rowspan"), l = l && 0 !== l && 1 !== l ? l : 1, m = m && 0 !== m && 1 !== m ? m : 1, j = p(b, f, k), n = 1 === l, h = 0; h < l; h++)
						for (g = 0; g < m; g++) b[f + g][j + h] = {
							cell: e,
							unique: n
						}, b[f + g].nTr = d;
				e = e.nextSibling
			}
	}

	function Q(a, b, c) {
		var d = [];
		c || (c = a.aoHeader, b && (c = [], P(c, b)));
		for (var e = 0, f = c.length; e < f; e++)
			for (var g = 0, h = c[e].length; g < h; g++) !c[e][g].unique || d[g] && a.bSortCellsTop || (d[g] = c[e][g].cell);
		return d
	}

	function R(b, c, d) {
		if (La(b, "aoServerParams", "serverParams", [c]), c && a.isArray(c)) {
			var e = {},
				f = /(.*?)\[\]$/;
			a.each(c, function (a, b) {
				var c = b.name.match(f);
				if (c) {
					var d = c[0];
					e[d] || (e[d] = []), e[d].push(b.value)
				} else e[b.name] = b.value
			}), c = e
		}
		var g, h = b.ajax,
			i = b.oInstance,
			j = function (a) {
				La(b, null, "xhr", [b, a, b.jqXHR]), d(a)
			};
		if (a.isPlainObject(h) && h.data) {
			g = h.data;
			var k = a.isFunction(g) ? g(c, b) : g;
			c = a.isFunction(g) && k ? k : a.extend(!0, c, k), delete h.data
		}
		var l = {
			data: c,
			success: function (a) {
				var c = a.error || a.sError;
				c && Ga(b, 0, c), b.json = a, j(a)
			},
			dataType: "json",
			cache: !1,
			type: b.sServerMethod,
			error: function (c, d, e) {
				var f = La(b, null, "xhr", [b, null, b.jqXHR]);
				a.inArray(!0, f) === -1 && ("parsererror" == d ? Ga(b, 0, "Invalid JSON response", 1) : 4 === c.readyState && Ga(b, 0, "Ajax error", 7)), na(b, !1)
			}
		};
		b.oAjaxData = c, La(b, null, "preXhr", [b, c]), b.fnServerData ? b.fnServerData.call(i, b.sAjaxSource, a.map(c, function (a, b) {
			return {
				name: b,
				value: a
			}
		}), j, b) : b.sAjaxSource || "string" == typeof h ? b.jqXHR = a.ajax(a.extend(l, {
			url: h || b.sAjaxSource
		})) : a.isFunction(h) ? b.jqXHR = h.call(i, c, j, b) : (b.jqXHR = a.ajax(a.extend(l, h)), h.data = g)
	}

	function S(a) {
		return !a.bAjaxDataGet || (a.iDraw++, na(a, !0), R(a, T(a), function (b) {
			U(a, b)
		}), !1)
	}

	function T(b) {
		var c, d, e, f, g = b.aoColumns,
			h = g.length,
			i = b.oFeatures,
			j = b.oPreviousSearch,
			k = b.aoPreSearchCols,
			l = [],
			m = wa(b),
			n = b._iDisplayStart,
			o = i.bPaginate !== !1 ? b._iDisplayLength : -1,
			p = function (a, b) {
				l.push({
					name: a,
					value: b
				})
			};
		p("sEcho", b.iDraw), p("iColumns", h), p("sColumns", hb(g, "sName").join(",")), p("iDisplayStart", n), p("iDisplayLength", o);
		var q = {
			draw: b.iDraw,
			columns: [],
			order: [],
			start: n,
			length: o,
			search: {
				value: j.sSearch,
				regex: j.bRegex
			}
		};
		for (c = 0; c < h; c++) e = g[c], f = k[c], d = "function" == typeof e.mData ? "function" : e.mData, q.columns.push({
			data: d,
			name: e.sName,
			searchable: e.bSearchable,
			orderable: e.bSortable,
			search: {
				value: f.sSearch,
				regex: f.bRegex
			}
		}), p("mDataProp_" + c, d), i.bFilter && (p("sSearch_" + c, f.sSearch), p("bRegex_" + c, f.bRegex), p("bSearchable_" + c, e.bSearchable)), i.bSort && p("bSortable_" + c, e.bSortable);
		i.bFilter && (p("sSearch", j.sSearch), p("bRegex", j.bRegex)), i.bSort && (a.each(m, function (a, b) {
			q.order.push({
				column: b.col,
				dir: b.dir
			}), p("iSortCol_" + a, b.col), p("sSortDir_" + a, b.dir)
		}), p("iSortingCols", m.length));
		var r = Wa.ext.legacy.ajax;
		return null === r ? b.sAjaxSource ? l : q : r ? l : q
	}

	function U(a, b) {
		var c = function (a, c) {
				return b[a] !== d ? b[a] : b[c]
			},
			e = V(a, b),
			f = c("sEcho", "draw"),
			g = c("iTotalRecords", "recordsTotal"),
			h = c("iTotalDisplayRecords", "recordsFiltered");
		if (f) {
			if (1 * f < a.iDraw) return;
			a.iDraw = 1 * f
		}
		E(a), a._iRecordsTotal = parseInt(g, 10), a._iRecordsDisplay = parseInt(h, 10);
		for (var i = 0, j = e.length; i < j; i++) u(a, e[i]);
		a.aiDisplay = a.aiDisplayMaster.slice(), a.bAjaxDataGet = !1, M(a), a._bInitComplete || ha(a, b), a.bAjaxDataGet = !0, na(a, !1)
	}

	function V(b, c) {
		var e = a.isPlainObject(b.ajax) && b.ajax.dataSrc !== d ? b.ajax.dataSrc : b.sAjaxDataProp;
		return "data" === e ? c.aaData || c[e] : "" !== e ? B(e)(c) : c
	}

	function W(b) {
		var d = b.oClasses,
			e = b.sTableId,
			f = b.oLanguage,
			g = b.oPreviousSearch,
			h = b.aanFeatures,
			i = '<input type="search" class="' + d.sFilterInput + '"/>',
			j = f.sSearch;
		j = j.match(/_INPUT_/) ? j.replace("_INPUT_", i) : j + i;
		var k = a("<div/>", {
				id: h.f ? null : e + "_filter",
				class: d.sFilter
			}).append(a("<label/>").append(j)),
			l = function () {
				var a = (h.f, this.value ? this.value : "");
				a != g.sSearch && (X(b, {
					sSearch: a,
					bRegex: g.bRegex,
					bSmart: g.bSmart,
					bCaseInsensitive: g.bCaseInsensitive
				}), b._iDisplayStart = 0, M(b))
			},
			m = null !== b.searchDelay ? b.searchDelay : "ssp" === Oa(b) ? 400 : 0,
			n = a("input", k).val(g.sSearch).attr("placeholder", f.sSearchPlaceholder).on("keyup.DT search.DT input.DT paste.DT cut.DT", m ? ub(l, m) : l).on("keypress.DT", function (a) {
				if (13 == a.keyCode) return !1
			}).attr("aria-controls", e);
		return a(b.nTable).on("search.dt.DT", function (a, d) {
			if (b === d) try {
				n[0] !== c.activeElement && n.val(g.sSearch)
			} catch (a) {}
		}), k[0]
	}

	function X(a, b, c) {
		var e = a.oPreviousSearch,
			f = a.aoPreSearchCols,
			g = function (a) {
				e.sSearch = a.sSearch, e.bRegex = a.bRegex, e.bSmart = a.bSmart, e.bCaseInsensitive = a.bCaseInsensitive
			},
			h = function (a) {
				return a.bEscapeRegex !== d ? !a.bEscapeRegex : a.bRegex
			};
		if (s(a), "ssp" != Oa(a)) {
			$(a, b.sSearch, c, h(b), b.bSmart, b.bCaseInsensitive), g(b);
			for (var i = 0; i < f.length; i++) Z(a, f[i].sSearch, i, h(f[i]), f[i].bSmart, f[i].bCaseInsensitive);
			Y(a)
		} else g(b);
		a.bFiltered = !0, La(a, null, "search", [a])
	}

	function Y(b) {
		for (var c, d, e = Wa.ext.search, f = b.aiDisplay, g = 0, h = e.length; g < h; g++) {
			for (var i = [], j = 0, k = f.length; j < k; j++) d = f[j], c = b.aoData[d], e[g](b, c._aFilterData, d, c._aData, j) && i.push(d);
			f.length = 0, a.merge(f, i)
		}
	}

	function Z(a, b, c, d, e, f) {
		if ("" !== b) {
			for (var g, h = [], i = a.aiDisplay, j = _(b, d, e, f), k = 0; k < i.length; k++) g = a.aoData[i[k]]._aFilterData[c], j.test(g) && h.push(i[k]);
			a.aiDisplay = h
		}
	}

	function $(a, b, c, d, e, f) {
		var g, h, i, j = _(b, d, e, f),
			k = a.oPreviousSearch.sSearch,
			l = a.aiDisplayMaster,
			m = [];
		if (0 !== Wa.ext.search.length && (c = !0), h = aa(a), b.length <= 0) a.aiDisplay = l.slice();
		else {
			for ((h || c || k.length > b.length || 0 !== b.indexOf(k) || a.bSorted) && (a.aiDisplay = l.slice()), g = a.aiDisplay, i = 0; i < g.length; i++) j.test(a.aoData[g[i]]._sFilterRow) && m.push(g[i]);
			a.aiDisplay = m
		}
	}

	function _(b, c, d, e) {
		if (b = c ? b : qb(b), d) {
			var f = a.map(b.match(/"[^"]+"|[^ ]+/g) || [""], function (a) {
				if ('"' === a.charAt(0)) {
					var b = a.match(/^"(.*)"$/);
					a = b ? b[1] : a
				}
				return a.replace('"', "")
			});
			b = "^(?=.*?" + f.join(")(?=.*?") + ").*$"
		}
		return new RegExp(b, e ? "i" : "")
	}

	function aa(a) {
		var b, c, d, e, f, g, h, i, j = a.aoColumns,
			k = Wa.ext.type.search,
			l = !1;
		for (c = 0, e = a.aoData.length; c < e; c++)
			if (i = a.aoData[c], !i._aFilterData) {
				for (g = [], d = 0, f = j.length; d < f; d++) b = j[d], b.bSearchable ? (h = y(a, c, d, "filter"), k[b.sType] && (h = k[b.sType](h)), null === h && (h = ""), "string" != typeof h && h.toString && (h = h.toString())) : h = "", h.indexOf && h.indexOf("&") !== -1 && (rb.innerHTML = h, h = sb ? rb.textContent : rb.innerText), h.replace && (h = h.replace(/[\r\n]/g, "")), g.push(h);
				i._aFilterData = g, i._sFilterRow = g.join("  "), l = !0
			}
		return l
	}

	function ba(a) {
		return {
			search: a.sSearch,
			smart: a.bSmart,
			regex: a.bRegex,
			caseInsensitive: a.bCaseInsensitive
		}
	}

	function ca(a) {
		return {
			sSearch: a.search,
			bSmart: a.smart,
			bRegex: a.regex,
			bCaseInsensitive: a.caseInsensitive
		}
	}

	function da(b) {
		var c = b.sTableId,
			d = b.aanFeatures.i,
			e = a("<div/>", {
				class: b.oClasses.sInfo,
				id: d ? null : c + "_info"
			});
		return d || (b.aoDrawCallback.push({
			fn: ea,
			sName: "information"
		}), e.attr("role", "status").attr("aria-live", "polite"), a(b.nTable).attr("aria-describedby", c + "_info")), e[0]
	}

	function ea(b) {
		var c = b.aanFeatures.i;
		if (0 !== c.length) {
			var d = b.oLanguage,
				e = b._iDisplayStart + 1,
				f = b.fnDisplayEnd(),
				g = b.fnRecordsTotal(),
				h = b.fnRecordsDisplay(),
				i = h ? d.sInfo : d.sInfoEmpty;
			h !== g && (i += " " + d.sInfoFiltered), i += d.sInfoPostFix, i = fa(b, i);
			var j = d.fnInfoCallback;
			null !== j && (i = j.call(b.oInstance, b, e, f, g, h, i)), a(c).html(i)
		}
	}

	function fa(a, b) {
		var c = a.fnFormatNumber,
			d = a._iDisplayStart + 1,
			e = a._iDisplayLength,
			f = a.fnRecordsDisplay(),
			g = e === -1;
		return b.replace(/_START_/g, c.call(a, d)).replace(/_END_/g, c.call(a, a.fnDisplayEnd())).replace(/_MAX_/g, c.call(a, a.fnRecordsTotal())).replace(/_TOTAL_/g, c.call(a, f)).replace(/_PAGE_/g, c.call(a, g ? 1 : Math.ceil(d / e))).replace(/_PAGES_/g, c.call(a, g ? 1 : Math.ceil(f / e)))
	}

	function ga(a) {
		var b, c, d, e = a.iInitDisplayStart,
			f = a.aoColumns,
			g = a.oFeatures,
			h = a.bDeferLoading;
		if (!a.bInitialised) return void setTimeout(function () {
			ga(a)
		}, 200);
		for (O(a), K(a), L(a, a.aoHeader), L(a, a.aoFooter), na(a, !0), g.bAutoWidth && ra(a), b = 0, c = f.length; b < c; b++) d = f[b], d.sWidth && (d.nTh.style.width = va(d.sWidth));
		La(a, null, "preInit", [a]), N(a);
		var i = Oa(a);
		("ssp" != i || h) && ("ajax" == i ? R(a, [], function (c) {
			var d = V(a, c);
			for (b = 0; b < d.length; b++) u(a, d[b]);
			a.iInitDisplayStart = e, N(a), na(a, !1), ha(a, c)
		}, a) : (na(a, !1), ha(a)))
	}

	function ha(a, b) {
		a._bInitComplete = !0, (b || a.oInit.aaData) && n(a), La(a, null, "plugin-init", [a, b]), La(a, "aoInitComplete", "init", [a, b])
	}

	function ia(a, b) {
		var c = parseInt(b, 10);
		a._iDisplayLength = c, Ma(a), La(a, null, "length", [a, c])
	}

	function ja(b) {
		for (var c = b.oClasses, d = b.sTableId, e = b.aLengthMenu, f = a.isArray(e[0]), g = f ? e[0] : e, h = f ? e[1] : e, i = a("<select/>", {
				name: d + "_length",
				"aria-controls": d,
				class: c.sLengthSelect
			}), j = 0, k = g.length; j < k; j++) i[0][j] = new Option(h[j], g[j]);
		var l = a("<div><label/></div>").addClass(c.sLength);
		return b.aanFeatures.l || (l[0].id = d + "_length"), l.children().append(b.oLanguage.sLengthMenu.replace("_MENU_", i[0].outerHTML)), a("select", l).val(b._iDisplayLength).on("change.DT", function (c) {
			ia(b, a(this).val()), M(b)
		}), a(b.nTable).on("length.dt.DT", function (c, d, e) {
			b === d && a("select", l).val(e)
		}), l[0]
	}

	function ka(b) {
		var c = b.sPaginationType,
			d = Wa.ext.pager[c],
			e = "function" == typeof d,
			f = function (a) {
				M(a)
			},
			g = a("<div/>").addClass(b.oClasses.sPaging + c)[0],
			h = b.aanFeatures;
		return e || d.fnInit(b, g, f), h.p || (g.id = b.sTableId + "_paginate", b.aoDrawCallback.push({
			fn: function (a) {
				if (e) {
					var b, c, g = a._iDisplayStart,
						i = a._iDisplayLength,
						j = a.fnRecordsDisplay(),
						k = i === -1,
						l = k ? 0 : Math.ceil(g / i),
						m = k ? 1 : Math.ceil(j / i),
						n = d(l, m);
					for (b = 0, c = h.p.length; b < c; b++) Na(a, "pageButton")(a, h.p[b], b, n, l, m)
				} else d.fnUpdate(a, f)
			},
			sName: "pagination"
		})), g
	}

	function la(a, b, c) {
		var d = a._iDisplayStart,
			e = a._iDisplayLength,
			f = a.fnRecordsDisplay();
		0 === f || e === -1 ? d = 0 : "number" == typeof b ? (d = b * e, d > f && (d = 0)) : "first" == b ? d = 0 : "previous" == b ? (d = e >= 0 ? d - e : 0, d < 0 && (d = 0)) : "next" == b ? d + e < f && (d += e) : "last" == b ? d = Math.floor((f - 1) / e) * e : Ga(a, 0, "Unknown paging action: " + b, 5);
		var g = a._iDisplayStart !== d;
		return a._iDisplayStart = d, g && (La(a, null, "page", [a]), c && M(a)), g
	}

	function ma(b) {
		return a("<div/>", {
			id: b.aanFeatures.r ? null : b.sTableId + "_processing",
			class: b.oClasses.sProcessing
		}).html(b.oLanguage.sProcessing).insertBefore(b.nTable)[0]
	}

	function na(b, c) {
		b.oFeatures.bProcessing && a(b.aanFeatures.r).css("display", c ? "block" : "none"), La(b, null, "processing", [b, c])
	}

	function oa(b) {
		var c = a(b.nTable);
		c.attr("role", "grid");
		var d = b.oScroll;
		if ("" === d.sX && "" === d.sY) return b.nTable;
		var e = d.sX,
			f = d.sY,
			g = b.oClasses,
			h = c.children("caption"),
			i = h.length ? h[0]._captionSide : null,
			j = a(c[0].cloneNode(!1)),
			k = a(c[0].cloneNode(!1)),
			l = c.children("tfoot"),
			m = "<div/>",
			n = function (a) {
				return a ? va(a) : null
			};
		l.length || (l = null);
		var o = a(m, {
			class: g.sScrollWrapper
		}).append(a(m, {
			class: g.sScrollHead
		}).css({
			overflow: "hidden",
			position: "relative",
			border: 0,
			width: e ? n(e) : "100%"
		}).append(a(m, {
			class: g.sScrollHeadInner
		}).css({
			"box-sizing": "content-box",
			width: d.sXInner || "100%"
		}).append(j.removeAttr("id").css("margin-left", 0).append("top" === i ? h : null).append(c.children("thead"))))).append(a(m, {
			class: g.sScrollBody
		}).css({
			position: "relative",
			overflow: "auto",
			width: n(e)
		}).append(c));
		l && o.append(a(m, {
			class: g.sScrollFoot
		}).css({
			overflow: "hidden",
			border: 0,
			width: e ? n(e) : "100%"
		}).append(a(m, {
			class: g.sScrollFootInner
		}).append(k.removeAttr("id").css("margin-left", 0).append("bottom" === i ? h : null).append(c.children("tfoot")))));
		var p = o.children(),
			q = p[0],
			r = p[1],
			s = l ? p[2] : null;
		return e && a(r).on("scroll.DT", function (a) {
			var b = this.scrollLeft;
			q.scrollLeft = b, l && (s.scrollLeft = b)
		}), a(r).css(f && d.bCollapse ? "max-height" : "height", f), b.nScrollHead = q, b.nScrollBody = r, b.nScrollFoot = s, b.aoDrawCallback.push({
			fn: pa,
			sName: "scrolling"
		}), o[0]
	}

	function pa(b) {
		var c, e, f, g, h, i, j, k, l, m = b.oScroll,
			p = m.sX,
			q = m.sXInner,
			r = m.sY,
			s = m.iBarWidth,
			t = a(b.nScrollHead),
			u = t[0].style,
			v = t.children("div"),
			w = v[0].style,
			x = v.children("table"),
			y = b.nScrollBody,
			z = a(y),
			A = y.style,
			B = a(b.nScrollFoot),
			C = B.children("div"),
			D = C.children("table"),
			E = a(b.nTHead),
			F = a(b.nTable),
			G = F[0],
			H = G.style,
			I = b.nTFoot ? a(b.nTFoot) : null,
			J = b.oBrowser,
			K = J.bScrollOversize,
			L = hb(b.aoColumns, "nTh"),
			M = [],
			N = [],
			O = [],
			P = [],
			R = function (a) {
				var b = a.style;
				b.paddingTop = "0", b.paddingBottom = "0", b.borderTopWidth = "0", b.borderBottomWidth = "0", b.height = 0
			},
			S = y.scrollHeight > y.clientHeight;
		if (b.scrollBarVis !== S && b.scrollBarVis !== d) return b.scrollBarVis = S, void n(b);
		b.scrollBarVis = S, F.children("thead, tfoot").remove(), I && (i = I.clone().prependTo(F), e = I.find("tr"), g = i.find("tr")), h = E.clone().prependTo(F), c = E.find("tr"), f = h.find("tr"), h.find("th, td").removeAttr("tabindex"), p || (A.width = "100%", t[0].style.width = "100%"), a.each(Q(b, h), function (a, c) {
			j = o(b, a), c.style.width = b.aoColumns[j].sWidth
		}), I && qa(function (a) {
			a.style.width = ""
		}, g), l = F.outerWidth(), "" === p ? (H.width = "100%", K && (F.find("tbody").height() > y.offsetHeight || "scroll" == z.css("overflow-y")) && (H.width = va(F.outerWidth() - s)), l = F.outerWidth()) : "" !== q && (H.width = va(q), l = F.outerWidth()), qa(R, f), qa(function (b) {
			O.push(b.innerHTML), M.push(va(a(b).css("width")))
		}, f), qa(function (b, c) {
			a.inArray(b, L) !== -1 && (b.style.width = M[c])
		}, c), a(f).height(0), I && (qa(R, g), qa(function (b) {
			P.push(b.innerHTML), N.push(va(a(b).css("width")))
		}, g), qa(function (a, b) {
			a.style.width = N[b]
		}, e), a(g).height(0)), qa(function (a, b) {
			a.innerHTML = '<div class="dataTables_sizing" style="height:0;overflow:hidden;">' + O[b] + "</div>", a.style.width = M[b]
		}, f), I && qa(function (a, b) {
			a.innerHTML = '<div class="dataTables_sizing" style="height:0;overflow:hidden;">' + P[b] + "</div>", a.style.width = N[b]
		}, g), F.outerWidth() < l ? (k = y.scrollHeight > y.offsetHeight || "scroll" == z.css("overflow-y") ? l + s : l, K && (y.scrollHeight > y.offsetHeight || "scroll" == z.css("overflow-y")) && (H.width = va(k - s)), "" !== p && "" === q || Ga(b, 1, "Possible column misalignment", 6)) : k = "100%", A.width = va(k), u.width = va(k), I && (b.nScrollFoot.style.width = va(k)), r || K && (A.height = va(G.offsetHeight + s));
		var T = F.outerWidth();
		x[0].style.width = va(T), w.width = va(T);
		var U = F.height() > y.clientHeight || "scroll" == z.css("overflow-y"),
			V = "padding" + (J.bScrollbarLeft ? "Left" : "Right");
		w[V] = U ? s + "px" : "0px", I && (D[0].style.width = va(T), C[0].style.width = va(T), C[0].style[V] = U ? s + "px" : "0px"), F.children("colgroup").insertBefore(F.children("thead")), z.scroll(), !b.bSorted && !b.bFiltered || b._drawHold || (y.scrollTop = 0)
	}

	function qa(a, b, c) {
		for (var d, e, f = 0, g = 0, h = b.length; g < h;) {
			for (d = b[g].firstChild, e = c ? c[g].firstChild : null; d;) 1 === d.nodeType && (c ? a(d, e, f) : a(d, f), f++), d = d.nextSibling, e = c ? e.nextSibling : null;
			g++
		}
	}

	function ra(c) {
		var d, e, f, g = c.nTable,
			h = c.aoColumns,
			i = c.oScroll,
			j = i.sY,
			k = i.sX,
			l = i.sXInner,
			m = h.length,
			p = r(c, "bVisible"),
			s = a("th", c.nTHead),
			t = g.getAttribute("width"),
			u = g.parentNode,
			v = !1,
			w = c.oBrowser,
			x = w.bScrollOversize,
			y = g.style.width;
		for (y && y.indexOf("%") !== -1 && (t = y), d = 0; d < p.length; d++) e = h[p[d]], null !== e.sWidth && (e.sWidth = sa(e.sWidthOrig, u), v = !0);
		if (x || !v && !k && !j && m == q(c) && m == s.length)
			for (d = 0; d < m; d++) {
				var z = o(c, d);
				null !== z && (h[z].sWidth = va(s.eq(d).width()))
			} else {
				var A = a(g).clone().css("visibility", "hidden").removeAttr("id");
				A.find("tbody tr").remove();
				var B = a("<tr/>").appendTo(A.find("tbody"));
				for (A.find("thead, tfoot").remove(), A.append(a(c.nTHead).clone()).append(a(c.nTFoot).clone()), A.find("tfoot th, tfoot td").css("width", ""), s = Q(c, A.find("thead")[0]), d = 0; d < p.length; d++) e = h[p[d]], s[d].style.width = null !== e.sWidthOrig && "" !== e.sWidthOrig ? va(e.sWidthOrig) : "", e.sWidthOrig && k && a(s[d]).append(a("<div/>").css({
					width: e.sWidthOrig,
					margin: 0,
					padding: 0,
					border: 0,
					height: 1
				}));
				if (c.aoData.length)
					for (d = 0; d < p.length; d++) f = p[d], e = h[f], a(ta(c, f)).clone(!1).append(e.sContentPadding).appendTo(B);
				a("[name]", A).removeAttr("name");
				var C = a("<div/>").css(k || j ? {
					position: "absolute",
					top: 0,
					left: 0,
					height: 1,
					right: 0,
					overflow: "hidden"
				} : {}).append(A).appendTo(u);
				k && l ? A.width(l) : k ? (A.css("width", "auto"), A.removeAttr("width"), A.width() < u.clientWidth && t && A.width(u.clientWidth)) : j ? A.width(u.clientWidth) : t && A.width(t);
				var D = 0;
				for (d = 0; d < p.length; d++) {
					var E = a(s[d]),
						F = E.outerWidth() - E.width(),
						G = w.bBounding ? Math.ceil(s[d].getBoundingClientRect().width) : E.outerWidth();
					D += G, h[p[d]].sWidth = va(G - F)
				}
				g.style.width = va(D), C.remove()
			}
		if (t && (g.style.width = va(t)), (t || k) && !c._reszEvt) {
			var H = function () {
				a(b).on("resize.DT-" + c.sInstance, ub(function () {
					n(c)
				}))
			};
			x ? setTimeout(H, 1e3) : H(), c._reszEvt = !0
		}
	}

	function sa(b, d) {
		if (!b) return 0;
		var e = a("<div/>").css("width", va(b)).appendTo(d || c.body),
			f = e[0].offsetWidth;
		return e.remove(), f
	}

	function ta(b, c) {
		var d = ua(b, c);
		if (d < 0) return null;
		var e = b.aoData[d];
		return e.nTr ? e.anCells[c] : a("<td/>").html(y(b, d, c, "display"))[0]
	}

	function ua(a, b) {
		for (var c, d = -1, e = -1, f = 0, g = a.aoData.length; f < g; f++) c = y(a, f, b, "display") + "", c = c.replace(tb, ""), c = c.replace(/&nbsp;/g, " "), c.length > d && (d = c.length, e = f);
		return e
	}

	function va(a) {
		return null === a ? "0px" : "number" == typeof a ? a < 0 ? "0px" : a + "px" : a.match(/\d$/) ? a + "px" : a
	}

	function wa(b) {
		var c, e, f, g, h, i, j, k = [],
			l = b.aoColumns,
			m = b.aaSortingFixed,
			n = a.isPlainObject(m),
			o = [],
			p = function (b) {
				b.length && !a.isArray(b[0]) ? o.push(b) : a.merge(o, b)
			};
		for (a.isArray(m) && p(m), n && m.pre && p(m.pre), p(b.aaSorting), n && m.post && p(m.post), c = 0; c < o.length; c++)
			for (j = o[c][0], g = l[j].aDataSort, e = 0, f = g.length; e < f; e++) h = g[e], i = l[h].sType || "string", o[c]._idx === d && (o[c]._idx = a.inArray(o[c][1], l[h].asSorting)), k.push({
				src: j,
				col: h,
				dir: o[c][1],
				index: o[c]._idx,
				type: i,
				formatter: Wa.ext.type.order[i + "-pre"]
			});
		return k
	}

	function xa(a) {
		var b, c, d, e, f, g = [],
			h = Wa.ext.type.order,
			i = a.aoData,
			j = (a.aoColumns, 0),
			k = a.aiDisplayMaster;
		for (s(a), f = wa(a), b = 0, c = f.length; b < c; b++) e = f[b], e.formatter && j++, Ca(a, e.col);
		if ("ssp" != Oa(a) && 0 !== f.length) {
			for (b = 0, d = k.length; b < d; b++) g[k[b]] = b;
			j === f.length ? k.sort(function (a, b) {
				var c, d, e, h, j, k = f.length,
					l = i[a]._aSortData,
					m = i[b]._aSortData;
				for (e = 0; e < k; e++)
					if (j = f[e],
						c = l[j.col], d = m[j.col], h = c < d ? -1 : c > d ? 1 : 0, 0 !== h) return "asc" === j.dir ? h : -h;
				return c = g[a], d = g[b], c < d ? -1 : c > d ? 1 : 0
			}) : k.sort(function (a, b) {
				var c, d, e, j, k, l, m = f.length,
					n = i[a]._aSortData,
					o = i[b]._aSortData;
				for (e = 0; e < m; e++)
					if (k = f[e], c = n[k.col], d = o[k.col], l = h[k.type + "-" + k.dir] || h["string-" + k.dir], j = l(c, d), 0 !== j) return j;
				return c = g[a], d = g[b], c < d ? -1 : c > d ? 1 : 0
			})
		}
		a.bSorted = !0
	}

	function ya(a) {
		for (var b, c, d = a.aoColumns, e = wa(a), f = a.oLanguage.oAria, g = 0, h = d.length; g < h; g++) {
			var i = d[g],
				j = i.asSorting,
				k = i.sTitle.replace(/<.*?>/g, ""),
				l = i.nTh;
			l.removeAttribute("aria-sort"), i.bSortable ? (e.length > 0 && e[0].col == g ? (l.setAttribute("aria-sort", "asc" == e[0].dir ? "ascending" : "descending"), c = j[e[0].index + 1] || j[0]) : c = j[0], b = k + ("asc" === c ? f.sSortAscending : f.sSortDescending)) : b = k, l.setAttribute("aria-label", b)
		}
	}

	function za(b, c, e, f) {
		var g, h = b.aoColumns[c],
			i = b.aaSorting,
			j = h.asSorting,
			k = function (b, c) {
				var e = b._idx;
				return e === d && (e = a.inArray(b[1], j)), e + 1 < j.length ? e + 1 : c ? null : 0
			};
		if ("number" == typeof i[0] && (i = b.aaSorting = [i]), e && b.oFeatures.bSortMulti) {
			var l = a.inArray(c, hb(i, "0"));
			l !== -1 ? (g = k(i[l], !0), null === g && 1 === i.length && (g = 0), null === g ? i.splice(l, 1) : (i[l][1] = j[g], i[l]._idx = g)) : (i.push([c, j[0], 0]), i[i.length - 1]._idx = 0)
		} else i.length && i[0][0] == c ? (g = k(i[0]), i.length = 1, i[0][1] = j[g], i[0]._idx = g) : (i.length = 0, i.push([c, j[0]]), i[0]._idx = 0);
		N(b), "function" == typeof f && f(b)
	}

	function Aa(a, b, c, d) {
		var e = a.aoColumns[c];
		Ja(b, {}, function (b) {
			e.bSortable !== !1 && (a.oFeatures.bProcessing ? (na(a, !0), setTimeout(function () {
				za(a, c, b.shiftKey, d), "ssp" !== Oa(a) && na(a, !1)
			}, 0)) : za(a, c, b.shiftKey, d))
		})
	}

	function Ba(b) {
		var c, d, e, f = b.aLastSort,
			g = b.oClasses.sSortColumn,
			h = wa(b),
			i = b.oFeatures;
		if (i.bSort && i.bSortClasses) {
			for (c = 0, d = f.length; c < d; c++) e = f[c].src, a(hb(b.aoData, "anCells", e)).removeClass(g + (c < 2 ? c + 1 : 3));
			for (c = 0, d = h.length; c < d; c++) e = h[c].src, a(hb(b.aoData, "anCells", e)).addClass(g + (c < 2 ? c + 1 : 3))
		}
		b.aLastSort = h
	}

	function Ca(a, b) {
		var c, d = a.aoColumns[b],
			e = Wa.ext.order[d.sSortDataType];
		e && (c = e.call(a.oInstance, a, b, p(a, b)));
		for (var f, g, h = Wa.ext.type.order[d.sType + "-pre"], i = 0, j = a.aoData.length; i < j; i++) f = a.aoData[i], f._aSortData || (f._aSortData = []), f._aSortData[b] && !e || (g = e ? c[i] : y(a, i, b, "sort"), f._aSortData[b] = h ? h(g) : g)
	}

	function Da(b) {
		if (b.oFeatures.bStateSave && !b.bDestroying) {
			var c = {
				time: +new Date,
				start: b._iDisplayStart,
				length: b._iDisplayLength,
				order: a.extend(!0, [], b.aaSorting),
				search: ba(b.oPreviousSearch),
				columns: a.map(b.aoColumns, function (a, c) {
					return {
						visible: a.bVisible,
						search: ba(b.aoPreSearchCols[c])
					}
				})
			};
			La(b, "aoStateSaveParams", "stateSaveParams", [b, c]), b.oSavedState = c, b.fnStateSaveCallback.call(b.oInstance, b, c)
		}
	}

	function Ea(b, c, e) {
		var f, g, h = b.aoColumns,
			i = function (c) {
				if (!c || !c.time) return void e();
				var i = La(b, "aoStateLoadParams", "stateLoadParams", [b, j]);
				if (a.inArray(!1, i) !== -1) return void e();
				var k = b.iStateDuration;
				if (k > 0 && c.time < +new Date - 1e3 * k) return void e();
				if (c.columns && h.length !== c.columns.length) return void e();
				if (b.oLoadedState = a.extend(!0, {}, j), c.start !== d && (b._iDisplayStart = c.start, b.iInitDisplayStart = c.start), c.length !== d && (b._iDisplayLength = c.length), c.order !== d && (b.aaSorting = [], a.each(c.order, function (a, c) {
						b.aaSorting.push(c[0] >= h.length ? [0, c[1]] : c)
					})), c.search !== d && a.extend(b.oPreviousSearch, ca(c.search)), c.columns)
					for (f = 0, g = c.columns.length; f < g; f++) {
						var l = c.columns[f];
						l.visible !== d && (h[f].bVisible = l.visible), l.search !== d && a.extend(b.aoPreSearchCols[f], ca(l.search))
					}
				La(b, "aoStateLoaded", "stateLoaded", [b, j]), e()
			};
		if (!b.oFeatures.bStateSave) return void e();
		var j = b.fnStateLoadCallback.call(b.oInstance, b, i);
		j !== d && i(j)
	}

	function Fa(b) {
		var c = Wa.settings,
			d = a.inArray(b, hb(c, "nTable"));
		return d !== -1 ? c[d] : null
	}

	function Ga(a, c, d, e) {
		if (d = "DataTables warning: " + (a ? "table id=" + a.sTableId + " - " : "") + d, e && (d += ". For more information about this error, please see http://datatables.net/tn/" + e), c) b.console && console.log && console.log(d);
		else {
			var f = Wa.ext,
				g = f.sErrMode || f.errMode;
			if (a && La(a, null, "error", [a, e, d]), "alert" == g) alert(d);
			else {
				if ("throw" == g) throw new Error(d);
				"function" == typeof g && g(a, e, d)
			}
		}
	}

	function Ha(b, c, e, f) {
		return a.isArray(e) ? void a.each(e, function (d, e) {
			a.isArray(e) ? Ha(b, c, e[0], e[1]) : Ha(b, c, e)
		}) : (f === d && (f = e), void(c[e] !== d && (b[f] = c[e])))
	}

	function Ia(b, c, d) {
		var e;
		for (var f in c) c.hasOwnProperty(f) && (e = c[f], a.isPlainObject(e) ? (a.isPlainObject(b[f]) || (b[f] = {}), a.extend(!0, b[f], e)) : d && "data" !== f && "aaData" !== f && a.isArray(e) ? b[f] = e.slice() : b[f] = e);
		return b
	}

	function Ja(b, c, d) {
		a(b).on("click.DT", c, function (a) {
			b.blur(), d(a)
		}).on("keypress.DT", c, function (a) {
			13 === a.which && (a.preventDefault(), d(a))
		}).on("selectstart.DT", function () {
			return !1
		})
	}

	function Ka(a, b, c, d) {
		c && a[b].push({
			fn: c,
			sName: d
		})
	}

	function La(b, c, d, e) {
		var f = [];
		if (c && (f = a.map(b[c].slice().reverse(), function (a, c) {
				return a.fn.apply(b.oInstance, e)
			})), null !== d) {
			var g = a.Event(d + ".dt");
			a(b.nTable).trigger(g, e), f.push(g.result)
		}
		return f
	}

	function Ma(a) {
		var b = a._iDisplayStart,
			c = a.fnDisplayEnd(),
			d = a._iDisplayLength;
		b >= c && (b = c - d), b -= b % d, (d === -1 || b < 0) && (b = 0), a._iDisplayStart = b
	}

	function Na(b, c) {
		var d = b.renderer,
			e = Wa.ext.renderer[c];
		return a.isPlainObject(d) && d[c] ? e[d[c]] || e._ : "string" == typeof d ? e[d] || e._ : e._
	}

	function Oa(a) {
		return a.oFeatures.bServerSide ? "ssp" : a.ajax || a.sAjaxSource ? "ajax" : "dom"
	}

	function Pa(a, b) {
		var c = [],
			d = Rb.numbers_length,
			e = Math.floor(d / 2);
		return b <= d ? c = jb(0, b) : a <= e ? (c = jb(0, d - 2), c.push("ellipsis"), c.push(b - 1)) : a >= b - 1 - e ? (c = jb(b - (d - 2), b), c.splice(0, 0, "ellipsis"), c.splice(0, 0, 0)) : (c = jb(a - e + 2, a + e - 1), c.push("ellipsis"), c.push(b - 1), c.splice(0, 0, "ellipsis"), c.splice(0, 0, 0)), c.DT_el = "span", c
	}

	function Qa(b) {
		a.each({
			num: function (a) {
				return Sb(a, b)
			},
			"num-fmt": function (a) {
				return Sb(a, b, ab)
			},
			"html-num": function (a) {
				return Sb(a, b, Za)
			},
			"html-num-fmt": function (a) {
				return Sb(a, b, Za, ab)
			}
		}, function (a, c) {
			Sa.type.order[a + b + "-pre"] = c, a.match(/^html\-/) && (Sa.type.search[a + b] = Sa.type.search.html)
		})
	}

	function Ra(a) {
		return function () {
			var b = [Fa(this[Wa.ext.iApiIndex])].concat(Array.prototype.slice.call(arguments));
			return Wa.ext.internal[a].apply(this, b)
		}
	}
	var Sa, Ta, Ua, Va, Wa = function (b) {
			this.$ = function (a, b) {
				return this.api(!0).$(a, b)
			}, this._ = function (a, b) {
				return this.api(!0).rows(a, b).data()
			}, this.api = function (a) {
				return new Ta(a ? Fa(this[Sa.iApiIndex]) : this)
			}, this.fnAddData = function (b, c) {
				var e = this.api(!0),
					f = a.isArray(b) && (a.isArray(b[0]) || a.isPlainObject(b[0])) ? e.rows.add(b) : e.row.add(b);
				return (c === d || c) && e.draw(), f.flatten().toArray()
			}, this.fnAdjustColumnSizing = function (a) {
				var b = this.api(!0).columns.adjust(),
					c = b.settings()[0],
					e = c.oScroll;
				a === d || a ? b.draw(!1) : "" === e.sX && "" === e.sY || pa(c)
			}, this.fnClearTable = function (a) {
				var b = this.api(!0).clear();
				(a === d || a) && b.draw()
			}, this.fnClose = function (a) {
				this.api(!0).row(a).child.hide()
			}, this.fnDeleteRow = function (a, b, c) {
				var e = this.api(!0),
					f = e.rows(a),
					g = f.settings()[0],
					h = g.aoData[f[0][0]];
				return f.remove(), b && b.call(this, g, h), (c === d || c) && e.draw(), h
			}, this.fnDestroy = function (a) {
				this.api(!0).destroy(a)
			}, this.fnDraw = function (a) {
				this.api(!0).draw(a)
			}, this.fnFilter = function (a, b, c, e, f, g) {
				var h = this.api(!0);
				null === b || b === d ? h.search(a, c, e, g) : h.column(b).search(a, c, e, g), h.draw()
			}, this.fnGetData = function (a, b) {
				var c = this.api(!0);
				if (a !== d) {
					var e = a.nodeName ? a.nodeName.toLowerCase() : "";
					return b !== d || "td" == e || "th" == e ? c.cell(a, b).data() : c.row(a).data() || null
				}
				return c.data().toArray()
			}, this.fnGetNodes = function (a) {
				var b = this.api(!0);
				return a !== d ? b.row(a).node() : b.rows().nodes().flatten().toArray()
			}, this.fnGetPosition = function (a) {
				var b = this.api(!0),
					c = a.nodeName.toUpperCase();
				if ("TR" == c) return b.row(a).index();
				if ("TD" == c || "TH" == c) {
					var d = b.cell(a).index();
					return [d.row, d.columnVisible, d.column]
				}
				return null
			}, this.fnIsOpen = function (a) {
				return this.api(!0).row(a).child.isShown()
			}, this.fnOpen = function (a, b, c) {
				return this.api(!0).row(a).child(b, c).show().child()[0]
			}, this.fnPageChange = function (a, b) {
				var c = this.api(!0).page(a);
				(b === d || b) && c.draw(!1)
			}, this.fnSetColumnVis = function (a, b, c) {
				var e = this.api(!0).column(a).visible(b);
				(c === d || c) && e.columns.adjust().draw()
			}, this.fnSettings = function () {
				return Fa(this[Sa.iApiIndex])
			}, this.fnSort = function (a) {
				this.api(!0).order(a).draw()
			}, this.fnSortListener = function (a, b, c) {
				this.api(!0).order.listener(a, b, c)
			}, this.fnUpdate = function (a, b, c, e, f) {
				var g = this.api(!0);
				return c === d || null === c ? g.row(b).data(a) : g.cell(b, c).data(a), (f === d || f) && g.columns.adjust(), (e === d || e) && g.draw(), 0
			}, this.fnVersionCheck = Sa.fnVersionCheck;
			var c = this,
				e = b === d,
				k = this.length;
			e && (b = {}), this.oApi = this.internal = Sa.internal;
			for (var n in Wa.ext.internal) n && (this[n] = Ra(n));
			return this.each(function () {
				var n, o = {},
					p = k > 1 ? Ia(o, b, !0) : b,
					q = 0,
					r = this.getAttribute("id"),
					s = !1,
					w = Wa.defaults,
					x = a(this);
				if ("table" != this.nodeName.toLowerCase()) return void Ga(null, 0, "Non-table node initialisation (" + this.nodeName + ")", 2);
				h(w), i(w.column), f(w, w, !0), f(w.column, w.column, !0), f(w, a.extend(p, x.data()));
				var y = Wa.settings;
				for (q = 0, n = y.length; q < n; q++) {
					var z = y[q];
					if (z.nTable == this || z.nTHead.parentNode == this || z.nTFoot && z.nTFoot.parentNode == this) {
						var A = p.bRetrieve !== d ? p.bRetrieve : w.bRetrieve,
							C = p.bDestroy !== d ? p.bDestroy : w.bDestroy;
						if (e || A) return z.oInstance;
						if (C) {
							z.oInstance.fnDestroy();
							break
						}
						return void Ga(z, 0, "Cannot reinitialise DataTable", 3)
					}
					if (z.sTableId == this.id) {
						y.splice(q, 1);
						break
					}
				}
				null !== r && "" !== r || (r = "DataTables_Table_" + Wa.ext._unique++, this.id = r);
				var D = a.extend(!0, {}, Wa.models.oSettings, {
					sDestroyWidth: x[0].style.width,
					sInstance: r,
					sTableId: r
				});
				D.nTable = this, D.oApi = c.internal, D.oInit = p, y.push(D), D.oInstance = 1 === c.length ? c : x.dataTable(), h(p), p.oLanguage && g(p.oLanguage), p.aLengthMenu && !p.iDisplayLength && (p.iDisplayLength = a.isArray(p.aLengthMenu[0]) ? p.aLengthMenu[0][0] : p.aLengthMenu[0]), p = Ia(a.extend(!0, {}, w), p), Ha(D.oFeatures, p, ["bPaginate", "bLengthChange", "bFilter", "bSort", "bSortMulti", "bInfo", "bProcessing", "bAutoWidth", "bSortClasses", "bServerSide", "bDeferRender"]), Ha(D, p, ["asStripeClasses", "ajax", "fnServerData", "fnFormatNumber", "sServerMethod", "aaSorting", "aaSortingFixed", "aLengthMenu", "sPaginationType", "sAjaxSource", "sAjaxDataProp", "iStateDuration", "sDom", "bSortCellsTop", "iTabIndex", "fnStateLoadCallback", "fnStateSaveCallback", "renderer", "searchDelay", "rowId", ["iCookieDuration", "iStateDuration"],
					["oSearch", "oPreviousSearch"],
					["aoSearchCols", "aoPreSearchCols"],
					["iDisplayLength", "_iDisplayLength"],
					["bJQueryUI", "bJUI"]
				]), Ha(D.oScroll, p, [
					["sScrollX", "sX"],
					["sScrollXInner", "sXInner"],
					["sScrollY", "sY"],
					["bScrollCollapse", "bCollapse"]
				]), Ha(D.oLanguage, p, "fnInfoCallback"), Ka(D, "aoDrawCallback", p.fnDrawCallback, "user"), Ka(D, "aoServerParams", p.fnServerParams, "user"), Ka(D, "aoStateSaveParams", p.fnStateSaveParams, "user"), Ka(D, "aoStateLoadParams", p.fnStateLoadParams, "user"), Ka(D, "aoStateLoaded", p.fnStateLoaded, "user"), Ka(D, "aoRowCallback", p.fnRowCallback, "user"), Ka(D, "aoRowCreatedCallback", p.fnCreatedRow, "user"), Ka(D, "aoHeaderCallback", p.fnHeaderCallback, "user"), Ka(D, "aoFooterCallback", p.fnFooterCallback, "user"), Ka(D, "aoInitComplete", p.fnInitComplete, "user"), Ka(D, "aoPreDrawCallback", p.fnPreDrawCallback, "user"), D.rowIdFn = B(p.rowId), j(D);
				var E = D.oClasses;
				if (p.bJQueryUI ? (a.extend(E, Wa.ext.oJUIClasses, p.oClasses), p.sDom === w.sDom && "lfrtip" === w.sDom && (D.sDom = '<"H"lfr>t<"F"ip>'), D.renderer ? a.isPlainObject(D.renderer) && !D.renderer.header && (D.renderer.header = "jqueryui") : D.renderer = "jqueryui") : a.extend(E, Wa.ext.classes, p.oClasses), x.addClass(E.sTable), D.iInitDisplayStart === d && (D.iInitDisplayStart = p.iDisplayStart, D._iDisplayStart = p.iDisplayStart), null !== p.iDeferLoading) {
					D.bDeferLoading = !0;
					var F = a.isArray(p.iDeferLoading);
					D._iRecordsDisplay = F ? p.iDeferLoading[0] : p.iDeferLoading, D._iRecordsTotal = F ? p.iDeferLoading[1] : p.iDeferLoading
				}
				var G = D.oLanguage;
				a.extend(!0, G, p.oLanguage), G.sUrl && (a.ajax({
					dataType: "json",
					url: G.sUrl,
					success: function (b) {
						g(b), f(w.oLanguage, b), a.extend(!0, G, b), ga(D)
					},
					error: function () {
						ga(D)
					}
				}), s = !0), null === p.asStripeClasses && (D.asStripeClasses = [E.sStripeOdd, E.sStripeEven]);
				var H = D.asStripeClasses,
					I = x.children("tbody").find("tr").eq(0);
				a.inArray(!0, a.map(H, function (a, b) {
					return I.hasClass(a)
				})) !== -1 && (a("tbody tr", this).removeClass(H.join(" ")), D.asDestroyStripes = H.slice());
				var J, K = [],
					L = this.getElementsByTagName("thead");
				if (0 !== L.length && (P(D.aoHeader, L[0]), K = Q(D)), null === p.aoColumns)
					for (J = [], q = 0, n = K.length; q < n; q++) J.push(null);
				else J = p.aoColumns;
				for (q = 0, n = J.length; q < n; q++) l(D, K ? K[q] : null);
				if (t(D, p.aoColumnDefs, J, function (a, b) {
						m(D, a, b)
					}), I.length) {
					var M = function (a, b) {
						return null !== a.getAttribute("data-" + b) ? b : null
					};
					a(I[0]).children("th, td").each(function (a, b) {
						var c = D.aoColumns[a];
						if (c.mData === a) {
							var e = M(b, "sort") || M(b, "order"),
								f = M(b, "filter") || M(b, "search");
							null === e && null === f || (c.mData = {
								_: a + ".display",
								sort: null !== e ? a + ".@data-" + e : d,
								type: null !== e ? a + ".@data-" + e : d,
								filter: null !== f ? a + ".@data-" + f : d
							}, m(D, a))
						}
					})
				}
				var N = D.oFeatures,
					O = function () {
						if (p.aaSorting === d) {
							var b = D.aaSorting;
							for (q = 0, n = b.length; q < n; q++) b[q][1] = D.aoColumns[q].asSorting[0]
						}
						Ba(D), N.bSort && Ka(D, "aoDrawCallback", function () {
							if (D.bSorted) {
								var b = wa(D),
									c = {};
								a.each(b, function (a, b) {
									c[b.src] = b.dir
								}), La(D, null, "order", [D, b, c]), ya(D)
							}
						}), Ka(D, "aoDrawCallback", function () {
							(D.bSorted || "ssp" === Oa(D) || N.bDeferRender) && Ba(D)
						}, "sc");
						var c = x.children("caption").each(function () {
								this._captionSide = a(this).css("caption-side")
							}),
							e = x.children("thead");
						0 === e.length && (e = a("<thead/>").appendTo(x)), D.nTHead = e[0];
						var f = x.children("tbody");
						0 === f.length && (f = a("<tbody/>").appendTo(x)), D.nTBody = f[0];
						var g = x.children("tfoot");
						if (0 === g.length && c.length > 0 && ("" !== D.oScroll.sX || "" !== D.oScroll.sY) && (g = a("<tfoot/>").appendTo(x)), 0 === g.length || 0 === g.children().length ? x.addClass(E.sNoFooter) : g.length > 0 && (D.nTFoot = g[0], P(D.aoFooter, D.nTFoot)), p.aaData)
							for (q = 0; q < p.aaData.length; q++) u(D, p.aaData[q]);
						else(D.bDeferLoading || "dom" == Oa(D)) && v(D, a(D.nTBody).children("tr"));
						D.aiDisplay = D.aiDisplayMaster.slice(), D.bInitialised = !0, s === !1 && ga(D)
					};
				p.bStateSave ? (N.bStateSave = !0, Ka(D, "aoDrawCallback", Da, "state_save"), Ea(D, p, O)) : O()
			}), c = null, this
		},
		Xa = {},
		Ya = /[\r\n]/g,
		Za = /<.*?>/g,
		$a = /^\d{2,4}[\.\/\-]\d{1,2}[\.\/\-]\d{1,2}([T ]{1}\d{1,2}[:\.]\d{2}([\.:]\d{2})?)?$/,
		_a = new RegExp("(\\" + ["/", ".", "*", "+", "?", "|", "(", ")", "[", "]", "{", "}", "\\", "$", "^", "-"].join("|\\") + ")", "g"),
		ab = /[',$£€¥%\u2009\u202F\u20BD\u20a9\u20BArfk]/gi,
		bb = function (a) {
			return !a || a === !0 || "-" === a
		},
		cb = function (a) {
			var b = parseInt(a, 10);
			return !isNaN(b) && isFinite(a) ? b : null
		},
		db = function (a, b) {
			return Xa[b] || (Xa[b] = new RegExp(qb(b), "g")), "string" == typeof a && "." !== b ? a.replace(/\./g, "").replace(Xa[b], ".") : a
		},
		eb = function (a, b, c) {
			var d = "string" == typeof a;
			return !!bb(a) || (b && d && (a = db(a, b)), c && d && (a = a.replace(ab, "")), !isNaN(parseFloat(a)) && isFinite(a))
		},
		fb = function (a) {
			return bb(a) || "string" == typeof a
		},
		gb = function (a, b, c) {
			if (bb(a)) return !0;
			var d = fb(a);
			return d ? !!eb(lb(a), b, c) || null : null
		},
		hb = function (a, b, c) {
			var e = [],
				f = 0,
				g = a.length;
			if (c !== d)
				for (; f < g; f++) a[f] && a[f][b] && e.push(a[f][b][c]);
			else
				for (; f < g; f++) a[f] && e.push(a[f][b]);
			return e
		},
		ib = function (a, b, c, e) {
			var f = [],
				g = 0,
				h = b.length;
			if (e !== d)
				for (; g < h; g++) a[b[g]][c] && f.push(a[b[g]][c][e]);
			else
				for (; g < h; g++) f.push(a[b[g]][c]);
			return f
		},
		jb = function (a, b) {
			var c, e = [];
			b === d ? (b = 0, c = a) : (c = b, b = a);
			for (var f = b; f < c; f++) e.push(f);
			return e
		},
		kb = function (a) {
			for (var b = [], c = 0, d = a.length; c < d; c++) a[c] && b.push(a[c]);
			return b
		},
		lb = function (a) {
			return a.replace(Za, "")
		},
		mb = function (a) {
			var b, c, d, e = [],
				f = a.length,
				g = 0;
			a: for (c = 0; c < f; c++) {
				for (b = a[c], d = 0; d < g; d++)
					if (e[d] === b) continue a;
				e.push(b), g++
			}
			return e
		};
	Wa.util = {
		throttle: function (a, b) {
			var c, e, f = b !== d ? b : 200;
			return function () {
				var b = this,
					g = +new Date,
					h = arguments;
				c && g < c + f ? (clearTimeout(e), e = setTimeout(function () {
					c = d, a.apply(b, h)
				}, f)) : (c = g, a.apply(b, h))
			}
		},
		escapeRegex: function (a) {
			return a.replace(_a, "\\$1")
		}
	};
	var nb = function (a, b, c) {
			a[b] !== d && (a[c] = a[b])
		},
		ob = /\[.*?\]$/,
		pb = /\(\)$/,
		qb = Wa.util.escapeRegex,
		rb = a("<div>")[0],
		sb = rb.textContent !== d,
		tb = /<.*?>/g,
		ub = Wa.util.throttle,
		vb = [],
		wb = Array.prototype,
		xb = function (b) {
			var c, d, e = Wa.settings,
				f = a.map(e, function (a, b) {
					return a.nTable
				});
			return b ? b.nTable && b.oApi ? [b] : b.nodeName && "table" === b.nodeName.toLowerCase() ? (c = a.inArray(b, f), c !== -1 ? [e[c]] : null) : b && "function" == typeof b.settings ? b.settings().toArray() : ("string" == typeof b ? d = a(b) : b instanceof a && (d = b), d ? d.map(function (b) {
				return c = a.inArray(this, f), c !== -1 ? e[c] : null
			}).toArray() : void 0) : []
		};
	Ta = function (b, c) {
		if (!(this instanceof Ta)) return new Ta(b, c);
		var d = [],
			e = function (a) {
				var b = xb(a);
				b && (d = d.concat(b))
			};
		if (a.isArray(b))
			for (var f = 0, g = b.length; f < g; f++) e(b[f]);
		else e(b);
		this.context = mb(d), c && a.merge(this, c), this.selector = {
			rows: null,
			cols: null,
			opts: null
		}, Ta.extend(this, this, vb)
	}, Wa.Api = Ta, a.extend(Ta.prototype, {
		any: function () {
			return 0 !== this.count()
		},
		concat: wb.concat,
		context: [],
		count: function () {
			return this.flatten().length
		},
		each: function (a) {
			for (var b = 0, c = this.length; b < c; b++) a.call(this, this[b], b, this);
			return this
		},
		eq: function (a) {
			var b = this.context;
			return b.length > a ? new Ta(b[a], this[a]) : null
		},
		filter: function (a) {
			var b = [];
			if (wb.filter) b = wb.filter.call(this, a, this);
			else
				for (var c = 0, d = this.length; c < d; c++) a.call(this, this[c], c, this) && b.push(this[c]);
			return new Ta(this.context, b)
		},
		flatten: function () {
			var a = [];
			return new Ta(this.context, a.concat.apply(a, this.toArray()))
		},
		join: wb.join,
		indexOf: wb.indexOf || function (a, b) {
			for (var c = b || 0, d = this.length; c < d; c++)
				if (this[c] === a) return c;
			return -1
		},
		iterator: function (a, b, c, e) {
			var f, g, h, i, j, k, l, m, n = [],
				o = this.context,
				p = this.selector;
			for ("string" == typeof a && (e = c, c = b, b = a, a = !1), g = 0, h = o.length; g < h; g++) {
				var q = new Ta(o[g]);
				if ("table" === b) f = c.call(q, o[g], g), f !== d && n.push(f);
				else if ("columns" === b || "rows" === b) f = c.call(q, o[g], this[g], g), f !== d && n.push(f);
				else if ("column" === b || "column-rows" === b || "row" === b || "cell" === b)
					for (l = this[g], "column-rows" === b && (k = Db(o[g], p.opts)), i = 0, j = l.length; i < j; i++) m = l[i], f = "cell" === b ? c.call(q, o[g], m.row, m.column, g, i) : c.call(q, o[g], m, g, i, k), f !== d && n.push(f)
			}
			if (n.length || e) {
				var r = new Ta(o, a ? n.concat.apply([], n) : n),
					s = r.selector;
				return s.rows = p.rows, s.cols = p.cols, s.opts = p.opts, r
			}
			return this
		},
		lastIndexOf: wb.lastIndexOf || function (a, b) {
			return this.indexOf.apply(this.toArray.reverse(), arguments)
		},
		length: 0,
		map: function (a) {
			var b = [];
			if (wb.map) b = wb.map.call(this, a, this);
			else
				for (var c = 0, d = this.length; c < d; c++) b.push(a.call(this, this[c], c));
			return new Ta(this.context, b)
		},
		pluck: function (a) {
			return this.map(function (b) {
				return b[a]
			})
		},
		pop: wb.pop,
		push: wb.push,
		reduce: wb.reduce || function (a, b) {
			return k(this, a, b, 0, this.length, 1)
		},
		reduceRight: wb.reduceRight || function (a, b) {
			return k(this, a, b, this.length - 1, -1, -1)
		},
		reverse: wb.reverse,
		selector: null,
		shift: wb.shift,
		sort: wb.sort,
		splice: wb.splice,
		toArray: function () {
			return wb.slice.call(this)
		},
		to$: function () {
			return a(this)
		},
		toJQuery: function () {
			return a(this)
		},
		unique: function () {
			return new Ta(this.context, mb(this))
		},
		unshift: wb.unshift
	}), Ta.extend = function (b, c, d) {
		if (d.length && c && (c instanceof Ta || c.__dt_wrapper)) {
			var e, f, g, h = function (a, b, c) {
				return function () {
					var d = b.apply(a, arguments);
					return Ta.extend(d, d, c.methodExt), d
				}
			};
			for (e = 0, f = d.length; e < f; e++) g = d[e], c[g.name] = "function" == typeof g.val ? h(b, g.val, g) : a.isPlainObject(g.val) ? {} : g.val, c[g.name].__dt_wrapper = !0, Ta.extend(b, c[g.name], g.propExt)
		}
	}, Ta.register = Ua = function (b, c) {
		if (a.isArray(b))
			for (var d = 0, e = b.length; d < e; d++) Ta.register(b[d], c);
		else {
			var f, g, h, i, j = b.split("."),
				k = vb,
				l = function (a, b) {
					for (var c = 0, d = a.length; c < d; c++)
						if (a[c].name === b) return a[c];
					return null
				};
			for (f = 0, g = j.length; f < g; f++) {
				i = j[f].indexOf("()") !== -1, h = i ? j[f].replace("()", "") : j[f];
				var m = l(k, h);
				m || (m = {
					name: h,
					val: {},
					methodExt: [],
					propExt: []
				}, k.push(m)), f === g - 1 ? m.val = c : k = i ? m.methodExt : m.propExt
			}
		}
	}, Ta.registerPlural = Va = function (b, c, e) {
		Ta.register(b, e), Ta.register(c, function () {
			var b = e.apply(this, arguments);
			return b === this ? this : b instanceof Ta ? b.length ? a.isArray(b[0]) ? new Ta(b.context, b[0]) : b[0] : d : b
		})
	};
	var yb = function (b, c) {
		if ("number" == typeof b) return [c[b]];
		var d = a.map(c, function (a, b) {
			return a.nTable
		});
		return a(d).filter(b).map(function (b) {
			var e = a.inArray(this, d);
			return c[e]
		}).toArray()
	};
	Ua("tables()", function (a) {
		return a ? new Ta(yb(a, this.context)) : this
	}), Ua("table()", function (a) {
		var b = this.tables(a),
			c = b.context;
		return c.length ? new Ta(c[0]) : b
	}), Va("tables().nodes()", "table().node()", function () {
		return this.iterator("table", function (a) {
			return a.nTable
		}, 1)
	}), Va("tables().body()", "table().body()", function () {
		return this.iterator("table", function (a) {
			return a.nTBody
		}, 1)
	}), Va("tables().header()", "table().header()", function () {
		return this.iterator("table", function (a) {
			return a.nTHead
		}, 1)
	}), Va("tables().footer()", "table().footer()", function () {
		return this.iterator("table", function (a) {
			return a.nTFoot
		}, 1)
	}), Va("tables().containers()", "table().container()", function () {
		return this.iterator("table", function (a) {
			return a.nTableWrapper
		}, 1)
	}), Ua("draw()", function (a) {
		return this.iterator("table", function (b) {
			"page" === a ? M(b) : ("string" == typeof a && (a = "full-hold" !== a), N(b, a === !1))
		})
	}), Ua("page()", function (a) {
		return a === d ? this.page.info().page : this.iterator("table", function (b) {
			la(b, a)
		})
	}), Ua("page.info()", function (a) {
		if (0 === this.context.length) return d;
		var b = this.context[0],
			c = b._iDisplayStart,
			e = b.oFeatures.bPaginate ? b._iDisplayLength : -1,
			f = b.fnRecordsDisplay(),
			g = e === -1;
		return {
			page: g ? 0 : Math.floor(c / e),
			pages: g ? 1 : Math.ceil(f / e),
			start: c,
			end: b.fnDisplayEnd(),
			length: e,
			recordsTotal: b.fnRecordsTotal(),
			recordsDisplay: f,
			serverSide: "ssp" === Oa(b)
		}
	}), Ua("page.len()", function (a) {
		return a === d ? 0 !== this.context.length ? this.context[0]._iDisplayLength : d : this.iterator("table", function (b) {
			ia(b, a)
		})
	});
	var zb = function (a, b, c) {
		if (c) {
			var d = new Ta(a);
			d.one("draw", function () {
				c(d.ajax.json())
			})
		}
		if ("ssp" == Oa(a)) N(a, b);
		else {
			na(a, !0);
			var e = a.jqXHR;
			e && 4 !== e.readyState && e.abort(), R(a, [], function (c) {
				E(a);
				for (var d = V(a, c), e = 0, f = d.length; e < f; e++) u(a, d[e]);
				N(a, b), na(a, !1)
			})
		}
	};
	Ua("ajax.json()", function () {
		var a = this.context;
		if (a.length > 0) return a[0].json
	}), Ua("ajax.params()", function () {
		var a = this.context;
		if (a.length > 0) return a[0].oAjaxData
	}), Ua("ajax.reload()", function (a, b) {
		return this.iterator("table", function (c) {
			zb(c, b === !1, a)
		})
	}), Ua("ajax.url()", function (b) {
		var c = this.context;
		return b === d ? 0 === c.length ? d : (c = c[0], c.ajax ? a.isPlainObject(c.ajax) ? c.ajax.url : c.ajax : c.sAjaxSource) : this.iterator("table", function (c) {
			a.isPlainObject(c.ajax) ? c.ajax.url = b : c.ajax = b
		})
	}), Ua("ajax.url().load()", function (a, b) {
		return this.iterator("table", function (c) {
			zb(c, b === !1, a)
		})
	});
	var Ab = function (b, c, e, f, g) {
			var h, i, j, k, l, m, n = [],
				o = typeof c;
			for (c && "string" !== o && "function" !== o && c.length !== d || (c = [c]), j = 0, k = c.length; j < k; j++)
				for (i = c[j] && c[j].split && !c[j].match(/[\[\(:]/) ? c[j].split(",") : [c[j]], l = 0, m = i.length; l < m; l++) h = e("string" == typeof i[l] ? a.trim(i[l]) : i[l]), h && h.length && (n = n.concat(h));
			var p = Sa.selector[b];
			if (p.length)
				for (j = 0, k = p.length; j < k; j++) n = p[j](f, g, n);
			return mb(n)
		},
		Bb = function (b) {
			return b || (b = {}), b.filter && b.search === d && (b.search = b.filter), a.extend({
				search: "none",
				order: "current",
				page: "all"
			}, b)
		},
		Cb = function (a) {
			for (var b = 0, c = a.length; b < c; b++)
				if (a[b].length > 0) return a[0] = a[b], a[0].length = 1, a.length = 1, a.context = [a.context[b]], a;
			return a.length = 0, a
		},
		Db = function (b, c) {
			var d, e, f, g = [],
				h = b.aiDisplay,
				i = b.aiDisplayMaster,
				j = c.search,
				k = c.order,
				l = c.page;
			if ("ssp" == Oa(b)) return "removed" === j ? [] : jb(0, i.length);
			if ("current" == l)
				for (d = b._iDisplayStart, e = b.fnDisplayEnd(); d < e; d++) g.push(h[d]);
			else if ("current" == k || "applied" == k) g = "none" == j ? i.slice() : "applied" == j ? h.slice() : a.map(i, function (b, c) {
				return a.inArray(b, h) === -1 ? b : null
			});
			else if ("index" == k || "original" == k)
				for (d = 0, e = b.aoData.length; d < e; d++) "none" == j ? g.push(d) : (f = a.inArray(d, h), (f === -1 && "removed" == j || f >= 0 && "applied" == j) && g.push(d));
			return g
		},
		Eb = function (b, c, e) {
			var f, g = function (c) {
				var g = cb(c);
				if (null !== g && !e) return [g];
				if (f || (f = Db(b, e)), null !== g && a.inArray(g, f) !== -1) return [g];
				if (null === c || c === d || "" === c) return f;
				if ("function" == typeof c) return a.map(f, function (a) {
					var d = b.aoData[a];
					return c(a, d._aData, d.nTr) ? a : null
				});
				var h = kb(ib(b.aoData, f, "nTr"));
				if (c.nodeName) {
					if (c._DT_RowIndex !== d) return [c._DT_RowIndex];
					if (c._DT_CellIndex) return [c._DT_CellIndex.row];
					var i = a(c).closest("*[data-dt-row]");
					return i.length ? [i.data("dt-row")] : []
				}
				if ("string" == typeof c && "#" === c.charAt(0)) {
					var j = b.aIds[c.replace(/^#/, "")];
					if (j !== d) return [j.idx]
				}
				return a(h).filter(c).map(function () {
					return this._DT_RowIndex
				}).toArray()
			};
			return Ab("row", c, g, b, e)
		};
	Ua("rows()", function (b, c) {
		b === d ? b = "" : a.isPlainObject(b) && (c = b, b = ""), c = Bb(c);
		var e = this.iterator("table", function (a) {
			return Eb(a, b, c)
		}, 1);
		return e.selector.rows = b, e.selector.opts = c, e
	}), Ua("rows().nodes()", function () {
		return this.iterator("row", function (a, b) {
			return a.aoData[b].nTr || d
		}, 1)
	}), Ua("rows().data()", function () {
		return this.iterator(!0, "rows", function (a, b) {
			return ib(a.aoData, b, "_aData")
		}, 1)
	}), Va("rows().cache()", "row().cache()", function (a) {
		return this.iterator("row", function (b, c) {
			var d = b.aoData[c];
			return "search" === a ? d._aFilterData : d._aSortData
		}, 1)
	}), Va("rows().invalidate()", "row().invalidate()", function (a) {
		return this.iterator("row", function (b, c) {
			G(b, c, a)
		})
	}), Va("rows().indexes()", "row().index()", function () {
		return this.iterator("row", function (a, b) {
			return b
		}, 1)
	}), Va("rows().ids()", "row().id()", function (a) {
		for (var b = [], c = this.context, d = 0, e = c.length; d < e; d++)
			for (var f = 0, g = this[d].length; f < g; f++) {
				var h = c[d].rowIdFn(c[d].aoData[this[d][f]]._aData);
				b.push((a === !0 ? "#" : "") + h)
			}
		return new Ta(c, b)
	}), Va("rows().remove()", "row().remove()", function () {
		var a = this;
		return this.iterator("row", function (b, c, e) {
			var f, g, h, i, j, k, l = b.aoData,
				m = l[c];
			for (l.splice(c, 1), f = 0, g = l.length; f < g; f++)
				if (j = l[f], k = j.anCells, null !== j.nTr && (j.nTr._DT_RowIndex = f), null !== k)
					for (h = 0, i = k.length; h < i; h++) k[h]._DT_CellIndex.row = f;
			F(b.aiDisplayMaster, c), F(b.aiDisplay, c), F(a[e], c, !1), Ma(b);
			var n = b.rowIdFn(m._aData);
			n !== d && delete b.aIds[n]
		}), this.iterator("table", function (a) {
			for (var b = 0, c = a.aoData.length; b < c; b++) a.aoData[b].idx = b
		}), this
	}), Ua("rows.add()", function (b) {
		var c = this.iterator("table", function (a) {
				var c, d, e, f = [];
				for (d = 0, e = b.length; d < e; d++) c = b[d], c.nodeName && "TR" === c.nodeName.toUpperCase() ? f.push(v(a, c)[0]) : f.push(u(a, c));
				return f
			}, 1),
			d = this.rows(-1);
		return d.pop(), a.merge(d, c), d
	}), Ua("row()", function (a, b) {
		return Cb(this.rows(a, b))
	}), Ua("row().data()", function (a) {
		var b = this.context;
		return a === d ? b.length && this.length ? b[0].aoData[this[0]]._aData : d : (b[0].aoData[this[0]]._aData = a, G(b[0], this[0], "data"), this)
	}), Ua("row().node()", function () {
		var a = this.context;
		return a.length && this.length ? a[0].aoData[this[0]].nTr || null : null
	}), Ua("row.add()", function (b) {
		b instanceof a && b.length && (b = b[0]);
		var c = this.iterator("table", function (a) {
			return b.nodeName && "TR" === b.nodeName.toUpperCase() ? v(a, b)[0] : u(a, b)
		});
		return this.row(c[0])
	});
	var Fb = function (b, c, d, e) {
			var f = [],
				g = function (c, d) {
					if (a.isArray(c) || c instanceof a)
						for (var e = 0, h = c.length; e < h; e++) g(c[e], d);
					else if (c.nodeName && "tr" === c.nodeName.toLowerCase()) f.push(c);
					else {
						var i = a("<tr><td/></tr>").addClass(d);
						a("td", i).addClass(d).html(c)[0].colSpan = q(b), f.push(i[0])
					}
				};
			g(d, e), c._details && c._details.detach(), c._details = a(f), c._detailsShow && c._details.insertAfter(c.nTr)
		},
		Gb = function (a, b) {
			var c = a.context;
			if (c.length) {
				var e = c[0].aoData[b !== d ? b : a[0]];
				e && e._details && (e._details.remove(), e._detailsShow = d, e._details = d)
			}
		},
		Hb = function (a, b) {
			var c = a.context;
			if (c.length && a.length) {
				var d = c[0].aoData[a[0]];
				d._details && (d._detailsShow = b, b ? d._details.insertAfter(d.nTr) : d._details.detach(), Ib(c[0]))
			}
		},
		Ib = function (a) {
			var b = new Ta(a),
				c = ".dt.DT_details",
				d = "draw" + c,
				e = "column-visibility" + c,
				f = "destroy" + c,
				g = a.aoData;
			b.off(d + " " + e + " " + f), hb(g, "_details").length > 0 && (b.on(d, function (c, d) {
				a === d && b.rows({
					page: "current"
				}).eq(0).each(function (a) {
					var b = g[a];
					b._detailsShow && b._details.insertAfter(b.nTr)
				})
			}), b.on(e, function (b, c, d, e) {
				if (a === c)
					for (var f, h = q(c), i = 0, j = g.length; i < j; i++) f = g[i], f._details && f._details.children("td[colspan]").attr("colspan", h)
			}), b.on(f, function (c, d) {
				if (a === d)
					for (var e = 0, f = g.length; e < f; e++) g[e]._details && Gb(b, e)
			}))
		},
		Jb = "",
		Kb = Jb + "row().child",
		Lb = Kb + "()";
	Ua(Lb, function (a, b) {
		var c = this.context;
		return a === d ? c.length && this.length ? c[0].aoData[this[0]]._details : d : (a === !0 ? this.child.show() : a === !1 ? Gb(this) : c.length && this.length && Fb(c[0], c[0].aoData[this[0]], a, b), this)
	}), Ua([Kb + ".show()", Lb + ".show()"], function (a) {
		return Hb(this, !0), this
	}), Ua([Kb + ".hide()", Lb + ".hide()"], function () {
		return Hb(this, !1), this
	}), Ua([Kb + ".remove()", Lb + ".remove()"], function () {
		return Gb(this), this
	}), Ua(Kb + ".isShown()", function () {
		var a = this.context;
		return !(!a.length || !this.length) && (a[0].aoData[this[0]]._detailsShow || !1)
	});
	var Mb = /^([^:]+):(name|visIdx|visible)$/,
		Nb = function (a, b, c, d, e) {
			for (var f = [], g = 0, h = e.length; g < h; g++) f.push(y(a, e[g], b));
			return f
		},
		Ob = function (b, c, d) {
			var e = b.aoColumns,
				f = hb(e, "sName"),
				g = hb(e, "nTh"),
				h = function (c) {
					var h = cb(c);
					if ("" === c) return jb(e.length);
					if (null !== h) return [h >= 0 ? h : e.length + h];
					if ("function" == typeof c) {
						var i = Db(b, d);
						return a.map(e, function (a, d) {
							return c(d, Nb(b, d, 0, 0, i), g[d]) ? d : null
						})
					}
					var j = "string" == typeof c ? c.match(Mb) : "";
					if (j) switch (j[2]) {
						case "visIdx":
						case "visible":
							var k = parseInt(j[1], 10);
							if (k < 0) {
								var l = a.map(e, function (a, b) {
									return a.bVisible ? b : null
								});
								return [l[l.length + k]]
							}
							return [o(b, k)];
						case "name":
							return a.map(f, function (a, b) {
								return a === j[1] ? b : null
							});
						default:
							return []
					}
					if (c.nodeName && c._DT_CellIndex) return [c._DT_CellIndex.column];
					var m = a(g).filter(c).map(function () {
						return a.inArray(this, g)
					}).toArray();
					if (m.length || !c.nodeName) return m;
					var n = a(c).closest("*[data-dt-column]");
					return n.length ? [n.data("dt-column")] : []
				};
			return Ab("column", c, h, b, d)
		},
		Pb = function (b, c, e) {
			var f, g, h, i, j = b.aoColumns,
				k = j[c],
				l = b.aoData;
			if (e === d) return k.bVisible;
			if (k.bVisible !== e) {
				if (e) {
					var m = a.inArray(!0, hb(j, "bVisible"), c + 1);
					for (g = 0, h = l.length; g < h; g++) i = l[g].nTr, f = l[g].anCells, i && i.insertBefore(f[c], f[m] || null)
				} else a(hb(b.aoData, "anCells", c)).detach();
				k.bVisible = e, L(b, b.aoHeader), L(b, b.aoFooter), Da(b)
			}
		};
	Ua("columns()", function (b, c) {
		b === d ? b = "" : a.isPlainObject(b) && (c = b, b = ""), c = Bb(c);
		var e = this.iterator("table", function (a) {
			return Ob(a, b, c)
		}, 1);
		return e.selector.cols = b, e.selector.opts = c, e
	}), Va("columns().header()", "column().header()", function (a, b) {
		return this.iterator("column", function (a, b) {
			return a.aoColumns[b].nTh
		}, 1)
	}), Va("columns().footer()", "column().footer()", function (a, b) {
		return this.iterator("column", function (a, b) {
			return a.aoColumns[b].nTf
		}, 1)
	}), Va("columns().data()", "column().data()", function () {
		return this.iterator("column-rows", Nb, 1)
	}), Va("columns().dataSrc()", "column().dataSrc()", function () {
		return this.iterator("column", function (a, b) {
			return a.aoColumns[b].mData
		}, 1)
	}), Va("columns().cache()", "column().cache()", function (a) {
		return this.iterator("column-rows", function (b, c, d, e, f) {
			return ib(b.aoData, f, "search" === a ? "_aFilterData" : "_aSortData", c)
		}, 1)
	}), Va("columns().nodes()", "column().nodes()", function () {
		return this.iterator("column-rows", function (a, b, c, d, e) {
			return ib(a.aoData, e, "anCells", b)
		}, 1)
	}), Va("columns().visible()", "column().visible()", function (a, b) {
		var c = this.iterator("column", function (b, c) {
			return a === d ? b.aoColumns[c].bVisible : void Pb(b, c, a)
		});
		return a !== d && (this.iterator("column", function (c, d) {
			La(c, null, "column-visibility", [c, d, a, b])
		}), (b === d || b) && this.columns.adjust()), c
	}), Va("columns().indexes()", "column().index()", function (a) {
		return this.iterator("column", function (b, c) {
			return "visible" === a ? p(b, c) : c
		}, 1)
	}), Ua("columns.adjust()", function () {
		return this.iterator("table", function (a) {
			n(a)
		}, 1)
	}), Ua("column.index()", function (a, b) {
		if (0 !== this.context.length) {
			var c = this.context[0];
			if ("fromVisible" === a || "toData" === a) return o(c, b);
			if ("fromData" === a || "toVisible" === a) return p(c, b)
		}
	}), Ua("column()", function (a, b) {
		return Cb(this.columns(a, b))
	});
	var Qb = function (b, c, e) {
		var f, g, h, i, j, k, l, m = b.aoData,
			n = Db(b, e),
			o = kb(ib(m, n, "anCells")),
			p = a([].concat.apply([], o)),
			q = b.aoColumns.length,
			r = function (c) {
				var e = "function" == typeof c;
				if (null === c || c === d || e) {
					for (g = [], h = 0, i = n.length; h < i; h++)
						for (f = n[h], j = 0; j < q; j++) k = {
							row: f,
							column: j
						}, e ? (l = m[f], c(k, y(b, f, j), l.anCells ? l.anCells[j] : null) && g.push(k)) : g.push(k);
					return g
				}
				if (a.isPlainObject(c)) return [c];
				var o = p.filter(c).map(function (a, b) {
					return {
						row: b._DT_CellIndex.row,
						column: b._DT_CellIndex.column
					}
				}).toArray();
				return o.length || !c.nodeName ? o : (l = a(c).closest("*[data-dt-row]"), l.length ? [{
					row: l.data("dt-row"),
					column: l.data("dt-column")
				}] : [])
			};
		return Ab("cell", c, r, b, e)
	};
	Ua("cells()", function (b, c, e) {
			if (a.isPlainObject(b) && (b.row === d ? (e = b, b = null) : (e = c, c = null)), a.isPlainObject(c) && (e = c, c = null), null === c || c === d) return this.iterator("table", function (a) {
				return Qb(a, b, Bb(e))
			});
			var f, g, h, i, j, k = this.columns(c, e),
				l = this.rows(b, e),
				m = this.iterator("table", function (a, b) {
					for (f = [], g = 0, h = l[b].length; g < h; g++)
						for (i = 0, j = k[b].length; i < j; i++) f.push({
							row: l[b][g],
							column: k[b][i]
						});
					return f
				}, 1);
			return a.extend(m.selector, {
				cols: c,
				rows: b,
				opts: e
			}), m
		}), Va("cells().nodes()", "cell().node()", function () {
			return this.iterator("cell", function (a, b, c) {
				var e = a.aoData[b];
				return e && e.anCells ? e.anCells[c] : d
			}, 1)
		}), Ua("cells().data()", function () {
			return this.iterator("cell", function (a, b, c) {
				return y(a, b, c)
			}, 1)
		}), Va("cells().cache()", "cell().cache()", function (a) {
			return a = "search" === a ? "_aFilterData" : "_aSortData", this.iterator("cell", function (b, c, d) {
				return b.aoData[c][a][d]
			}, 1)
		}), Va("cells().render()", "cell().render()", function (a) {
			return this.iterator("cell", function (b, c, d) {
				return y(b, c, d, a)
			}, 1)
		}), Va("cells().indexes()", "cell().index()", function () {
			return this.iterator("cell", function (a, b, c) {
				return {
					row: b,
					column: c,
					columnVisible: p(a, c)
				}
			}, 1)
		}), Va("cells().invalidate()", "cell().invalidate()", function (a) {
			return this.iterator("cell", function (b, c, d) {
				G(b, c, a, d)
			})
		}), Ua("cell()", function (a, b, c) {
			return Cb(this.cells(a, b, c))
		}), Ua("cell().data()", function (a) {
			var b = this.context,
				c = this[0];
			return a === d ? b.length && c.length ? y(b[0], c[0].row, c[0].column) : d : (z(b[0], c[0].row, c[0].column, a), G(b[0], c[0].row, "data", c[0].column), this)
		}), Ua("order()", function (b, c) {
			var e = this.context;
			return b === d ? 0 !== e.length ? e[0].aaSorting : d : ("number" == typeof b ? b = [
				[b, c]
			] : b.length && !a.isArray(b[0]) && (b = Array.prototype.slice.call(arguments)), this.iterator("table", function (a) {
				a.aaSorting = b.slice()
			}))
		}), Ua("order.listener()", function (a, b, c) {
			return this.iterator("table", function (d) {
				Aa(d, a, b, c)
			})
		}), Ua("order.fixed()", function (b) {
			if (!b) {
				var c = this.context,
					e = c.length ? c[0].aaSortingFixed : d;
				return a.isArray(e) ? {
					pre: e
				} : e
			}
			return this.iterator("table", function (c) {
				c.aaSortingFixed = a.extend(!0, {}, b)
			})
		}), Ua(["columns().order()", "column().order()"], function (b) {
			var c = this;
			return this.iterator("table", function (d, e) {
				var f = [];
				a.each(c[e], function (a, c) {
					f.push([c, b])
				}), d.aaSorting = f
			})
		}), Ua("search()", function (b, c, e, f) {
			var g = this.context;
			return b === d ? 0 !== g.length ? g[0].oPreviousSearch.sSearch : d : this.iterator("table", function (d) {
				d.oFeatures.bFilter && X(d, a.extend({}, d.oPreviousSearch, {
					sSearch: b + "",
					bRegex: null !== c && c,
					bSmart: null === e || e,
					bCaseInsensitive: null === f || f
				}), 1)
			})
		}), Va("columns().search()", "column().search()", function (b, c, e, f) {
			return this.iterator("column", function (g, h) {
				var i = g.aoPreSearchCols;
				return b === d ? i[h].sSearch : void(g.oFeatures.bFilter && (a.extend(i[h], {
					sSearch: b + "",
					bRegex: null !== c && c,
					bSmart: null === e || e,
					bCaseInsensitive: null === f || f
				}), X(g, g.oPreviousSearch, 1)))
			})
		}), Ua("state()", function () {
			return this.context.length ? this.context[0].oSavedState : null
		}), Ua("state.clear()", function () {
			return this.iterator("table", function (a) {
				a.fnStateSaveCallback.call(a.oInstance, a, {})
			})
		}), Ua("state.loaded()", function () {
			return this.context.length ? this.context[0].oLoadedState : null
		}), Ua("state.save()", function () {
			return this.iterator("table", function (a) {
				Da(a)
			})
		}), Wa.versionCheck = Wa.fnVersionCheck = function (a) {
			for (var b, c, d = Wa.version.split("."), e = a.split("."), f = 0, g = e.length; f < g; f++)
				if (b = parseInt(d[f], 10) || 0, c = parseInt(e[f], 10) || 0, b !== c) return b > c;
			return !0
		}, Wa.isDataTable = Wa.fnIsDataTable = function (b) {
			var c = a(b).get(0),
				d = !1;
			return b instanceof Wa.Api || (a.each(Wa.settings, function (b, e) {
				var f = e.nScrollHead ? a("table", e.nScrollHead)[0] : null,
					g = e.nScrollFoot ? a("table", e.nScrollFoot)[0] : null;
				e.nTable !== c && f !== c && g !== c || (d = !0)
			}), d)
		}, Wa.tables = Wa.fnTables = function (b) {
			var c = !1;
			a.isPlainObject(b) && (c = b.api, b = b.visible);
			var d = a.map(Wa.settings, function (c) {
				if (!b || b && a(c.nTable).is(":visible")) return c.nTable
			});
			return c ? new Ta(d) : d
		}, Wa.camelToHungarian = f, Ua("$()", function (b, c) {
			var d = this.rows(c).nodes(),
				e = a(d);
			return a([].concat(e.filter(b).toArray(), e.find(b).toArray()))
		}), a.each(["on", "one", "off"], function (b, c) {
			Ua(c + "()", function () {
				var b = Array.prototype.slice.call(arguments);
				b[0] = a.map(b[0].split(/\s/), function (a) {
					return a.match(/\.dt\b/) ? a : a + ".dt"
				}).join(" ");
				var d = a(this.tables().nodes());
				return d[c].apply(d, b), this
			})
		}), Ua("clear()", function () {
			return this.iterator("table", function (a) {
				E(a)
			})
		}), Ua("settings()", function () {
			return new Ta(this.context, this.context)
		}), Ua("init()", function () {
			var a = this.context;
			return a.length ? a[0].oInit : null
		}), Ua("data()", function () {
			return this.iterator("table", function (a) {
				return hb(a.aoData, "_aData")
			}).flatten()
		}), Ua("destroy()", function (c) {
			return c = c || !1, this.iterator("table", function (d) {
				var e, f = d.nTableWrapper.parentNode,
					g = d.oClasses,
					h = d.nTable,
					i = d.nTBody,
					j = d.nTHead,
					k = d.nTFoot,
					l = a(h),
					m = a(i),
					n = a(d.nTableWrapper),
					o = a.map(d.aoData, function (a) {
						return a.nTr
					});
				d.bDestroying = !0, La(d, "aoDestroyCallback", "destroy", [d]), c || new Ta(d).columns().visible(!0), n.off(".DT").find(":not(tbody *)").off(".DT"), a(b).off(".DT-" + d.sInstance), h != j.parentNode && (l.children("thead").detach(), l.append(j)), k && h != k.parentNode && (l.children("tfoot").detach(), l.append(k)), d.aaSorting = [], d.aaSortingFixed = [], Ba(d), a(o).removeClass(d.asStripeClasses.join(" ")), a("th, td", j).removeClass(g.sSortable + " " + g.sSortableAsc + " " + g.sSortableDesc + " " + g.sSortableNone), d.bJUI && (a("th span." + g.sSortIcon + ", td span." + g.sSortIcon, j).detach(), a("th, td", j).each(function () {
					var b = a("div." + g.sSortJUIWrapper, this);
					a(this).append(b.contents()), b.detach()
				})), m.children().detach(), m.append(o);
				var p = c ? "remove" : "detach";
				l[p](), n[p](), !c && f && (f.insertBefore(h, d.nTableReinsertBefore), l.css("width", d.sDestroyWidth).removeClass(g.sTable), e = d.asDestroyStripes.length, e && m.children().each(function (b) {
					a(this).addClass(d.asDestroyStripes[b % e])
				}));
				var q = a.inArray(d, Wa.settings);
				q !== -1 && Wa.settings.splice(q, 1)
			})
		}), a.each(["column", "row", "cell"], function (a, b) {
			Ua(b + "s().every()", function (a) {
				var c = this.selector.opts,
					e = this;
				return this.iterator(b, function (f, g, h, i, j) {
					a.call(e[b](g, "cell" === b ? h : c, "cell" === b ? c : d), g, h, i, j)
				})
			})
		}), Ua("i18n()", function (b, c, e) {
			var f = this.context[0],
				g = B(b)(f.oLanguage);
			return g === d && (g = c), e !== d && a.isPlainObject(g) && (g = g[e] !== d ? g[e] : g._), g.replace("%d", e)
		}), Wa.version = "1.10.13", Wa.settings = [], Wa.models = {}, Wa.models.oSearch = {
			bCaseInsensitive: !0,
			sSearch: "",
			bRegex: !1,
			bSmart: !0
		}, Wa.models.oRow = {
			nTr: null,
			anCells: null,
			_aData: [],
			_aSortData: null,
			_aFilterData: null,
			_sFilterRow: null,
			_sRowStripe: "",
			src: null,
			idx: -1
		}, Wa.models.oColumn = {
			idx: null,
			aDataSort: null,
			asSorting: null,
			bSearchable: null,
			bSortable: null,
			bVisible: null,
			_sManualType: null,
			_bAttrSrc: !1,
			fnCreatedCell: null,
			fnGetData: null,
			fnSetData: null,
			mData: null,
			mRender: null,
			nTh: null,
			nTf: null,
			sClass: null,
			sContentPadding: null,
			sDefaultContent: null,
			sName: null,
			sSortDataType: "std",
			sSortingClass: null,
			sSortingClassJUI: null,
			sTitle: null,
			sType: null,
			sWidth: null,
			sWidthOrig: null
		}, Wa.defaults = {
			aaData: null,
			aaSorting: [
				[0, "asc"]
			],
			aaSortingFixed: [],
			ajax: null,
			aLengthMenu: [10, 25, 50, 100],
			aoColumns: null,
			aoColumnDefs: null,
			aoSearchCols: [],
			asStripeClasses: null,
			bAutoWidth: !0,
			bDeferRender: !1,
			bDestroy: !1,
			bFilter: !0,
			bInfo: !0,
			bJQueryUI: !1,
			bLengthChange: !0,
			bPaginate: !0,
			bProcessing: !1,
			bRetrieve: !1,
			bScrollCollapse: !1,
			bServerSide: !1,
			bSort: !0,
			bSortMulti: !0,
			bSortCellsTop: !1,
			bSortClasses: !0,
			bStateSave: !1,
			fnCreatedRow: null,
			fnDrawCallback: null,
			fnFooterCallback: null,
			fnFormatNumber: function (a) {
				return a.toString().replace(/\B(?=(\d{3})+(?!\d))/g, this.oLanguage.sThousands)
			},
			fnHeaderCallback: null,
			fnInfoCallback: null,
			fnInitComplete: null,
			fnPreDrawCallback: null,
			fnRowCallback: null,
			fnServerData: null,
			fnServerParams: null,
			fnStateLoadCallback: function (a) {
				try {
					return JSON.parse((a.iStateDuration === -1 ? sessionStorage : localStorage).getItem("DataTables_" + a.sInstance + "_" + location.pathname))
				} catch (a) {}
			},
			fnStateLoadParams: null,
			fnStateLoaded: null,
			fnStateSaveCallback: function (a, b) {
				try {
					(a.iStateDuration === -1 ? sessionStorage : localStorage).setItem("DataTables_" + a.sInstance + "_" + location.pathname, JSON.stringify(b))
				} catch (a) {}
			},
			fnStateSaveParams: null,
			iStateDuration: 7200,
			iDeferLoading: null,
			iDisplayLength: 10,
			iDisplayStart: 0,
			iTabIndex: 0,
			oClasses: {},
			oLanguage: {
				oAria: {
					sSortAscending: ": activate to sort column ascending",
					sSortDescending: ": activate to sort column descending"
				},
				oPaginate: {
					sFirst: "First",
					sLast: "Last",
					sNext: "Next",
					sPrevious: "Previous"
				},
				sEmptyTable: "No data available in table",
				sInfo: "Showing _START_ to _END_ of _TOTAL_ entries",
				sInfoEmpty: "Showing 0 to 0 of 0 entries",
				sInfoFiltered: "(filtered from _MAX_ total entries)",
				sInfoPostFix: "",
				sDecimal: "",
				sThousands: ",",
				sLengthMenu: "Show _MENU_ entries",
				sLoadingRecords: "Loading...",
				sProcessing: "Processing...",
				sSearch: "Search:",
				sSearchPlaceholder: "",
				sUrl: "",
				sZeroRecords: "No matching records found"
			},
			oSearch: a.extend({}, Wa.models.oSearch),
			sAjaxDataProp: "data",
			sAjaxSource: null,
			sDom: "lfrtip",
			searchDelay: null,
			sPaginationType: "simple_numbers",
			sScrollX: "",
			sScrollXInner: "",
			sScrollY: "",
			sServerMethod: "GET",
			renderer: null,
			rowId: "DT_RowId"
		}, e(Wa.defaults), Wa.defaults.column = {
			aDataSort: null,
			iDataSort: -1,
			asSorting: ["asc", "desc"],
			bSearchable: !0,
			bSortable: !0,
			bVisible: !0,
			fnCreatedCell: null,
			mData: null,
			mRender: null,
			sCellType: "td",
			sClass: "",
			sContentPadding: "",
			sDefaultContent: null,
			sName: "",
			sSortDataType: "std",
			sTitle: null,
			sType: null,
			sWidth: null
		}, e(Wa.defaults.column), Wa.models.oSettings = {
			oFeatures: {
				bAutoWidth: null,
				bDeferRender: null,
				bFilter: null,
				bInfo: null,
				bLengthChange: null,
				bPaginate: null,
				bProcessing: null,
				bServerSide: null,
				bSort: null,
				bSortMulti: null,
				bSortClasses: null,
				bStateSave: null
			},
			oScroll: {
				bCollapse: null,
				iBarWidth: 0,
				sX: null,
				sXInner: null,
				sY: null
			},
			oLanguage: {
				fnInfoCallback: null
			},
			oBrowser: {
				bScrollOversize: !1,
				bScrollbarLeft: !1,
				bBounding: !1,
				barWidth: 0
			},
			ajax: null,
			aanFeatures: [],
			aoData: [],
			aiDisplay: [],
			aiDisplayMaster: [],
			aIds: {},
			aoColumns: [],
			aoHeader: [],
			aoFooter: [],
			oPreviousSearch: {},
			aoPreSearchCols: [],
			aaSorting: null,
			aaSortingFixed: [],
			asStripeClasses: null,
			asDestroyStripes: [],
			sDestroyWidth: 0,
			aoRowCallback: [],
			aoHeaderCallback: [],
			aoFooterCallback: [],
			aoDrawCallback: [],
			aoRowCreatedCallback: [],
			aoPreDrawCallback: [],
			aoInitComplete: [],
			aoStateSaveParams: [],
			aoStateLoadParams: [],
			aoStateLoaded: [],
			sTableId: "",
			nTable: null,
			nTHead: null,
			nTFoot: null,
			nTBody: null,
			nTableWrapper: null,
			bDeferLoading: !1,
			bInitialised: !1,
			aoOpenRows: [],
			sDom: null,
			searchDelay: null,
			sPaginationType: "two_button",
			iStateDuration: 0,
			aoStateSave: [],
			aoStateLoad: [],
			oSavedState: null,
			oLoadedState: null,
			sAjaxSource: null,
			sAjaxDataProp: null,
			bAjaxDataGet: !0,
			jqXHR: null,
			json: d,
			oAjaxData: d,
			fnServerData: null,
			aoServerParams: [],
			sServerMethod: null,
			fnFormatNumber: null,
			aLengthMenu: null,
			iDraw: 0,
			bDrawing: !1,
			iDrawError: -1,
			_iDisplayLength: 10,
			_iDisplayStart: 0,
			_iRecordsTotal: 0,
			_iRecordsDisplay: 0,
			bJUI: null,
			oClasses: {},
			bFiltered: !1,
			bSorted: !1,
			bSortCellsTop: null,
			oInit: null,
			aoDestroyCallback: [],
			fnRecordsTotal: function () {
				return "ssp" == Oa(this) ? 1 * this._iRecordsTotal : this.aiDisplayMaster.length
			},
			fnRecordsDisplay: function () {
				return "ssp" == Oa(this) ? 1 * this._iRecordsDisplay : this.aiDisplay.length
			},
			fnDisplayEnd: function () {
				var a = this._iDisplayLength,
					b = this._iDisplayStart,
					c = b + a,
					d = this.aiDisplay.length,
					e = this.oFeatures,
					f = e.bPaginate;
				return e.bServerSide ? f === !1 || a === -1 ? b + d : Math.min(b + a, this._iRecordsDisplay) : !f || c > d || a === -1 ? d : c
			},
			oInstance: null,
			sInstance: null,
			iTabIndex: 0,
			nScrollHead: null,
			nScrollFoot: null,
			aLastSort: [],
			oPlugins: {},
			rowIdFn: null,
			rowId: null
		}, Wa.ext = Sa = {
			buttons: {},
			classes: {},
			builder: "-source-",
			errMode: "alert",
			feature: [],
			search: [],
			selector: {
				cell: [],
				column: [],
				row: []
			},
			internal: {},
			legacy: {
				ajax: null
			},
			pager: {},
			renderer: {
				pageButton: {},
				header: {}
			},
			order: {},
			type: {
				detect: [],
				search: {},
				order: {}
			},
			_unique: 0,
			fnVersionCheck: Wa.fnVersionCheck,
			iApiIndex: 0,
			oJUIClasses: {},
			sVersion: Wa.version
		}, a.extend(Sa, {
			afnFiltering: Sa.search,
			aTypes: Sa.type.detect,
			ofnSearch: Sa.type.search,
			oSort: Sa.type.order,
			afnSortData: Sa.order,
			aoFeatures: Sa.feature,
			oApi: Sa.internal,
			oStdClasses: Sa.classes,
			oPagination: Sa.pager
		}), a.extend(Wa.ext.classes, {
			sTable: "dataTable",
			sNoFooter: "no-footer",
			sPageButton: "paginate_button",
			sPageButtonActive: "current",
			sPageButtonDisabled: "disabled",
			sStripeOdd: "odd",
			sStripeEven: "even",
			sRowEmpty: "dataTables_empty",
			sWrapper: "dataTables_wrapper",
			sFilter: "dataTables_filter",
			sInfo: "dataTables_info",
			sPaging: "dataTables_paginate paging_",
			sLength: "dataTables_length",
			sProcessing: "dataTables_processing",
			sSortAsc: "sorting_asc",
			sSortDesc: "sorting_desc",
			sSortable: "sorting",
			sSortableAsc: "sorting_asc_disabled",
			sSortableDesc: "sorting_desc_disabled",
			sSortableNone: "sorting_disabled",
			sSortColumn: "sorting_",
			sFilterInput: "",
			sLengthSelect: "",
			sScrollWrapper: "dataTables_scroll",
			sScrollHead: "dataTables_scrollHead",
			sScrollHeadInner: "dataTables_scrollHeadInner",
			sScrollBody: "dataTables_scrollBody",
			sScrollFoot: "dataTables_scrollFoot",
			sScrollFootInner: "dataTables_scrollFootInner",
			sHeaderTH: "",
			sFooterTH: "",
			sSortJUIAsc: "",
			sSortJUIDesc: "",
			sSortJUI: "",
			sSortJUIAscAllowed: "",
			sSortJUIDescAllowed: "",
			sSortJUIWrapper: "",
			sSortIcon: "",
			sJUIHeader: "",
			sJUIFooter: ""
		}),
		function () {
			var b = "";
			b = "";
			var c = b + "ui-state-default",
				d = b + "css_right ui-icon ui-icon-",
				e = b + "fg-toolbar ui-toolbar ui-widget-header ui-helper-clearfix";
			a.extend(Wa.ext.oJUIClasses, Wa.ext.classes, {
				sPageButton: "fg-button ui-button " + c,
				sPageButtonActive: "ui-state-disabled",
				sPageButtonDisabled: "ui-state-disabled",
				sPaging: "dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi ui-buttonset-multi paging_",
				sSortAsc: c + " sorting_asc",
				sSortDesc: c + " sorting_desc",
				sSortable: c + " sorting",
				sSortableAsc: c + " sorting_asc_disabled",
				sSortableDesc: c + " sorting_desc_disabled",
				sSortableNone: c + " sorting_disabled",
				sSortJUIAsc: d + "triangle-1-n",
				sSortJUIDesc: d + "triangle-1-s",
				sSortJUI: d + "carat-2-n-s",
				sSortJUIAscAllowed: d + "carat-1-n",
				sSortJUIDescAllowed: d + "carat-1-s",
				sSortJUIWrapper: "DataTables_sort_wrapper",
				sSortIcon: "DataTables_sort_icon",
				sScrollHead: "dataTables_scrollHead " + c,
				sScrollFoot: "dataTables_scrollFoot " + c,
				sHeaderTH: c,
				sFooterTH: c,
				sJUIHeader: e + " ui-corner-tl ui-corner-tr",
				sJUIFooter: e + " ui-corner-bl ui-corner-br"
			})
		}();
	var Rb = Wa.ext.pager;
	a.extend(Rb, {
		simple: function (a, b) {
			return ["previous", "next"]
		},
		full: function (a, b) {
			return ["first", "previous", "next", "last"]
		},
		numbers: function (a, b) {
			return [Pa(a, b)]
		},
		simple_numbers: function (a, b) {
			return ["previous", Pa(a, b), "next"]
		},
		full_numbers: function (a, b) {
			return ["first", "previous", Pa(a, b), "next", "last"]
		},
		first_last_numbers: function (a, b) {
			return ["first", Pa(a, b), "last"]
		},
		_numbers: Pa,
		numbers_length: 7
	}), a.extend(!0, Wa.ext.renderer, {
		pageButton: {
			_: function (b, e, f, g, h, i) {
				var j, k, l, m = b.oClasses,
					n = b.oLanguage.oPaginate,
					o = b.oLanguage.oAria.paginate || {},
					p = 0,
					q = function (c, d) {
						var e, g, l, r, s = function (a) {
							la(b, a.data.action, !0)
						};
						for (e = 0, g = d.length; e < g; e++)
							if (r = d[e], a.isArray(r)) {
								var t = a("<" + (r.DT_el || "div") + "/>").appendTo(c);
								q(t, r)
							} else {
								switch (j = null, k = "", r) {
									case "ellipsis":
										c.append('<span class="ellipsis">&#x2026;</span>');
										break;
									case "first":
										j = n.sFirst, k = r + (h > 0 ? "" : " " + m.sPageButtonDisabled);
										break;
									case "previous":
										j = n.sPrevious, k = r + (h > 0 ? "" : " " + m.sPageButtonDisabled);
										break;
									case "next":
										j = n.sNext, k = r + (h < i - 1 ? "" : " " + m.sPageButtonDisabled);
										break;
									case "last":
										j = n.sLast, k = r + (h < i - 1 ? "" : " " + m.sPageButtonDisabled);
										break;
									default:
										j = r + 1, k = h === r ? m.sPageButtonActive : ""
								}
								null !== j && (l = a("<a>", {
									class: m.sPageButton + " " + k,
									"aria-controls": b.sTableId,
									"aria-label": o[r],
									"data-dt-idx": p,
									tabindex: b.iTabIndex,
									id: 0 === f && "string" == typeof r ? b.sTableId + "_" + r : null
								}).html(j).appendTo(c), Ja(l, {
									action: r
								}, s), p++)
							}
					};
				try {
					l = a(e).find(c.activeElement).data("dt-idx")
				} catch (a) {}
				q(a(e).empty(), g), l !== d && a(e).find("[data-dt-idx=" + l + "]").focus()
			}
		}
	}), a.extend(Wa.ext.type.detect, [function (a, b) {
		var c = b.oLanguage.sDecimal;
		return eb(a, c) ? "num" + c : null
	}, function (a, b) {
		if (a && !(a instanceof Date) && !$a.test(a)) return null;
		var c = Date.parse(a);
		return null !== c && !isNaN(c) || bb(a) ? "date" : null
	}, function (a, b) {
		var c = b.oLanguage.sDecimal;
		return eb(a, c, !0) ? "num-fmt" + c : null
	}, function (a, b) {
		var c = b.oLanguage.sDecimal;
		return gb(a, c) ? "html-num" + c : null
	}, function (a, b) {
		var c = b.oLanguage.sDecimal;
		return gb(a, c, !0) ? "html-num-fmt" + c : null
	}, function (a, b) {
		return bb(a) || "string" == typeof a && a.indexOf("<") !== -1 ? "html" : null
	}]), a.extend(Wa.ext.type.search, {
		html: function (a) {
			return bb(a) ? a : "string" == typeof a ? a.replace(Ya, " ").replace(Za, "") : ""
		},
		string: function (a) {
			return bb(a) ? a : "string" == typeof a ? a.replace(Ya, " ") : a
		}
	});
	var Sb = function (a, b, c, d) {
		return 0 === a || a && "-" !== a ? (b && (a = db(a, b)), a.replace && (c && (a = a.replace(c, "")), d && (a = a.replace(d, ""))), 1 * a) : -(1 / 0)
	};
	a.extend(Sa.type.order, {
		"date-pre": function (a) {
			return Date.parse(a) || -(1 / 0)
		},
		"html-pre": function (a) {
			return bb(a) ? "" : a.replace ? a.replace(/<.*?>/g, "").toLowerCase() : a + ""
		},
		"string-pre": function (a) {
			return bb(a) ? "" : "string" == typeof a ? a.toLowerCase() : a.toString ? a.toString() : ""
		},
		"string-asc": function (a, b) {
			return a < b ? -1 : a > b ? 1 : 0
		},
		"string-desc": function (a, b) {
			return a < b ? 1 : a > b ? -1 : 0
		}
	}), Qa(""), a.extend(!0, Wa.ext.renderer, {
		header: {
			_: function (b, c, d, e) {
				a(b.nTable).on("order.dt.DT", function (a, f, g, h) {
					if (b === f) {
						var i = d.idx;
						c.removeClass(d.sSortingClass + " " + e.sSortAsc + " " + e.sSortDesc).addClass("asc" == h[i] ? e.sSortAsc : "desc" == h[i] ? e.sSortDesc : d.sSortingClass)
					}
				})
			},
			jqueryui: function (b, c, d, e) {
				a("<div/>").addClass(e.sSortJUIWrapper).append(c.contents()).append(a("<span/>").addClass(e.sSortIcon + " " + d.sSortingClassJUI)).appendTo(c), a(b.nTable).on("order.dt.DT", function (a, f, g, h) {
					if (b === f) {
						var i = d.idx;
						c.removeClass(e.sSortAsc + " " + e.sSortDesc).addClass("asc" == h[i] ? e.sSortAsc : "desc" == h[i] ? e.sSortDesc : d.sSortingClass), c.find("span." + e.sSortIcon).removeClass(e.sSortJUIAsc + " " + e.sSortJUIDesc + " " + e.sSortJUI + " " + e.sSortJUIAscAllowed + " " + e.sSortJUIDescAllowed).addClass("asc" == h[i] ? e.sSortJUIAsc : "desc" == h[i] ? e.sSortJUIDesc : d.sSortingClassJUI)
					}
				})
			}
		}
	});
	var Tb = function (a) {
		return "string" == typeof a ? a.replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;") : a
	};
	return Wa.render = {
		number: function (a, b, c, d, e) {
			return {
				display: function (f) {
					if ("number" != typeof f && "string" != typeof f) return f;
					var g = f < 0 ? "-" : "",
						h = parseFloat(f);
					if (isNaN(h)) return Tb(f);
					h = h.toFixed(c), f = Math.abs(h);
					var i = parseInt(f, 10),
						j = c ? b + (f - i).toFixed(c).substring(2) : "";
					return g + (d || "") + i.toString().replace(/\B(?=(\d{3})+(?!\d))/g, a) + j + (e || "")
				}
			}
		},
		text: function () {
			return {
				display: Tb
			}
		}
	}, a.extend(Wa.ext.internal, {
		_fnExternApiFunc: Ra,
		_fnBuildAjax: R,
		_fnAjaxUpdate: S,
		_fnAjaxParameters: T,
		_fnAjaxUpdateDraw: U,
		_fnAjaxDataSrc: V,
		_fnAddColumn: l,
		_fnColumnOptions: m,
		_fnAdjustColumnSizing: n,
		_fnVisibleToColumnIndex: o,
		_fnColumnIndexToVisible: p,
		_fnVisbleColumns: q,
		_fnGetColumns: r,
		_fnColumnTypes: s,
		_fnApplyColumnDefs: t,
		_fnHungarianMap: e,
		_fnCamelToHungarian: f,
		_fnLanguageCompat: g,
		_fnBrowserDetect: j,
		_fnAddData: u,
		_fnAddTr: v,
		_fnNodeToDataIndex: w,
		_fnNodeToColumnIndex: x,
		_fnGetCellData: y,
		_fnSetCellData: z,
		_fnSplitObjNotation: A,
		_fnGetObjectDataFn: B,
		_fnSetObjectDataFn: C,
		_fnGetDataMaster: D,
		_fnClearTable: E,
		_fnDeleteIndex: F,
		_fnInvalidate: G,
		_fnGetRowElements: H,
		_fnCreateTr: I,
		_fnBuildHead: K,
		_fnDrawHead: L,
		_fnDraw: M,
		_fnReDraw: N,
		_fnAddOptionsHtml: O,
		_fnDetectHeader: P,
		_fnGetUniqueThs: Q,
		_fnFeatureHtmlFilter: W,
		_fnFilterComplete: X,
		_fnFilterCustom: Y,
		_fnFilterColumn: Z,
		_fnFilter: $,
		_fnFilterCreateSearch: _,
		_fnEscapeRegex: qb,
		_fnFilterData: aa,
		_fnFeatureHtmlInfo: da,
		_fnUpdateInfo: ea,
		_fnInfoMacros: fa,
		_fnInitialise: ga,
		_fnInitComplete: ha,
		_fnLengthChange: ia,
		_fnFeatureHtmlLength: ja,
		_fnFeatureHtmlPaginate: ka,
		_fnPageChange: la,
		_fnFeatureHtmlProcessing: ma,
		_fnProcessingDisplay: na,
		_fnFeatureHtmlTable: oa,
		_fnScrollDraw: pa,
		_fnApplyToChildren: qa,
		_fnCalculateColumnWidths: ra,
		_fnThrottle: ub,
		_fnConvertToWidth: sa,
		_fnGetWidestNode: ta,
		_fnGetMaxLenString: ua,
		_fnStringToCss: va,
		_fnSortFlatten: wa,
		_fnSort: xa,
		_fnSortAria: ya,
		_fnSortListener: za,
		_fnSortAttachListener: Aa,
		_fnSortingClasses: Ba,
		_fnSortData: Ca,
		_fnSaveState: Da,
		_fnLoadState: Ea,
		_fnSettingsFromNode: Fa,
		_fnLog: Ga,
		_fnMap: Ha,
		_fnBindAction: Ja,
		_fnCallbackReg: Ka,
		_fnCallbackFire: La,
		_fnLengthOverflow: Ma,
		_fnRenderer: Na,
		_fnDataSource: Oa,
		_fnRowAttributes: J,
		_fnCalculateEnd: function () {}
	}), a.fn.dataTable = Wa, Wa.$ = a, a.fn.dataTableSettings = Wa.settings, a.fn.dataTableExt = Wa.ext, a.fn.DataTable = function (b) {
		return a(this).dataTable(b).api()
	}, a.each(Wa, function (b, c) {
		a.fn.DataTable[b] = c
	}), a.fn.dataTable
}),
/*! DataTables Bootstrap 3 integration
 * ©2011-2015 SpryMedia Ltd - datatables.net/license
 */
function (a) {
	"function" == typeof define && define.amd ? define(["jquery", "datatables.net"], function (b) {
		return a(b, window, document)
	}) : "object" == typeof exports ? module.exports = function (b, c) {
		return b || (b = window), c && c.fn.dataTable || (c = require("datatables.net")(b, c).$), a(c, b, b.document)
	} : a(jQuery, window, document)
}(function (a, b, c, d) {
	"use strict";
	var e = a.fn.dataTable;
	return a.extend(!0, e.defaults, {
		dom: "<'row'<'col-sm-6'l><'col-sm-6'f>><'row'<'col-sm-12'tr>><'row'<'col-sm-5'i><'col-sm-7'p>>",
		renderer: "bootstrap"
	}), a.extend(e.ext.classes, {
		sWrapper: "dataTables_wrapper form-inline dt-bootstrap",
		sFilterInput: "form-control input-sm",
		sLengthSelect: "form-control input-sm",
		sProcessing: "dataTables_processing panel panel-default"
	}), e.ext.renderer.pageButton.bootstrap = function (b, f, g, h, i, j) {
		var k, l, m, n = new e.Api(b),
			o = b.oClasses,
			p = b.oLanguage.oPaginate,
			q = b.oLanguage.oAria.paginate || {},
			r = 0,
			s = function (c, d) {
				var e, f, h, m, t = function (b) {
					b.preventDefault(), a(b.currentTarget).hasClass("disabled") || n.page() == b.data.action || n.page(b.data.action).draw("page")
				};
				for (e = 0, f = d.length; e < f; e++)
					if (m = d[e], a.isArray(m)) s(c, m);
					else {
						switch (k = "", l = "", m) {
							case "ellipsis":
								k = "&#x2026;", l = "disabled";
								break;
							case "first":
								k = p.sFirst, l = m + (i > 0 ? "" : " disabled");
								break;
							case "previous":
								k = p.sPrevious, l = m + (i > 0 ? "" : " disabled");
								break;
							case "next":
								k = p.sNext, l = m + (i < j - 1 ? "" : " disabled");
								break;
							case "last":
								k = p.sLast, l = m + (i < j - 1 ? "" : " disabled");
								break;
							default:
								k = m + 1, l = i === m ? "active" : ""
						}
						k && (h = a("<li>", {
							class: o.sPageButton + " " + l,
							id: 0 === g && "string" == typeof m ? b.sTableId + "_" + m : null
						}).append(a("<a>", {
							href: "#",
							"aria-controls": b.sTableId,
							"aria-label": q[m],
							"data-dt-idx": r,
							tabindex: b.iTabIndex
						}).html(k)).appendTo(c), b.oApi._fnBindAction(h, {
							action: m
						}, t), r++)
					}
			};
		try {
			m = a(f).find(c.activeElement).data("dt-idx")
		} catch (a) {}
		s(a(f).empty().html('<ul class="pagination"/>').children("ul"), h), m !== d && a(f).find("[data-dt-idx=" + m + "]").focus()
	}, e
}),
/*! Buttons for DataTables 1.2.4
 * ©2016 SpryMedia Ltd - datatables.net/license
 */
function (a) {
	"function" == typeof define && define.amd ? define(["jquery", "datatables.net"], function (b) {
		return a(b, window, document)
	}) : "object" == typeof exports ? module.exports = function (b, c) {
		return b || (b = window), c && c.fn.dataTable || (c = require("datatables.net")(b, c).$), a(c, b, b.document)
	} : a(jQuery, window, document)
}(function (a, b, c, d) {
	"use strict";
	var e = a.fn.dataTable,
		f = 0,
		g = 0,
		h = e.ext.buttons,
		i = function (b, c) {
			c === !0 && (c = {}), a.isArray(c) && (c = {
				buttons: c
			}), this.c = a.extend(!0, {}, i.defaults, c), c.buttons && (this.c.buttons = c.buttons), this.s = {
				dt: new e.Api(b),
				buttons: [],
				listenKeys: "",
				namespace: "dtb" + f++
			}, this.dom = {
				container: a("<" + this.c.dom.container.tag + "/>").addClass(this.c.dom.container.className)
			}, this._constructor()
		};
	a.extend(i.prototype, {
		action: function (a, b) {
			var c = this._nodeToButton(a);
			return b === d ? c.conf.action : (c.conf.action = b, this)
		},
		active: function (b, c) {
			var e = this._nodeToButton(b),
				f = this.c.dom.button.active,
				g = a(e.node);
			return c === d ? g.hasClass(f) : (g.toggleClass(f, c === d || c), this)
		},
		add: function (a, b) {
			var c = this.s.buttons;
			if ("string" == typeof b) {
				for (var d = b.split("-"), e = this.s, f = 0, g = d.length - 1; f < g; f++) e = e.buttons[1 * d[f]];
				c = e.buttons, b = 1 * d[d.length - 1]
			}
			return this._expandButton(c, a, !1, b), this._draw(), this
		},
		container: function () {
			return this.dom.container
		},
		disable: function (b) {
			var c = this._nodeToButton(b);
			return a(c.node).addClass(this.c.dom.button.disabled), this
		},
		destroy: function () {
			a("body").off("keyup." + this.s.namespace);
			var b, c, d = this.s.buttons.slice();
			for (b = 0, c = d.length; b < c; b++) this.remove(d[b].node);
			this.dom.container.remove();
			var e = this.s.dt.settings()[0];
			for (b = 0, c = e.length; b < c; b++)
				if (e.inst === this) {
					e.splice(b, 1);
					break
				}
			return this
		},
		enable: function (b, c) {
			if (c === !1) return this.disable(b);
			var d = this._nodeToButton(b);
			return a(d.node).removeClass(this.c.dom.button.disabled), this
		},
		name: function () {
			return this.c.name
		},
		node: function (b) {
			var c = this._nodeToButton(b);
			return a(c.node)
		},
		remove: function (b) {
			var c = this._nodeToButton(b),
				d = this._nodeToHost(b),
				e = this.s.dt;
			if (c.buttons.length)
				for (var f = c.buttons.length - 1; f >= 0; f--) this.remove(c.buttons[f].node);
			c.conf.destroy && c.conf.destroy.call(e.button(b), e, a(b), c.conf), this._removeKey(c.conf), a(c.node).remove();
			var g = a.inArray(c, d);
			return d.splice(g, 1), this
		},
		text: function (b, c) {
			var e = this._nodeToButton(b),
				f = this.c.dom.collection.buttonLiner,
				g = e.inCollection && f && f.tag ? f.tag : this.c.dom.buttonLiner.tag,
				h = this.s.dt,
				i = a(e.node),
				j = function (a) {
					return "function" == typeof a ? a(h, i, e.conf) : a
				};
			return c === d ? j(e.conf.text) : (e.conf.text = c, g ? i.children(g).html(j(c)) : i.html(j(c)), this)
		},
		_constructor: function () {
			var b = this,
				d = this.s.dt,
				e = d.settings()[0],
				f = this.c.buttons;
			e._buttons || (e._buttons = []), e._buttons.push({
				inst: this,
				name: this.c.name
			});
			for (var g = 0, h = f.length; g < h; g++) this.add(f[g]);
			d.on("destroy", function () {
				b.destroy()
			}), a("body").on("keyup." + this.s.namespace, function (a) {
				if (!c.activeElement || c.activeElement === c.body) {
					var d = String.fromCharCode(a.keyCode).toLowerCase();
					b.s.listenKeys.toLowerCase().indexOf(d) !== -1 && b._keypress(d, a)
				}
			})
		},
		_addKey: function (b) {
			b.key && (this.s.listenKeys += a.isPlainObject(b.key) ? b.key.key : b.key)
		},
		_draw: function (a, b) {
			a || (a = this.dom.container, b = this.s.buttons), a.children().detach();
			for (var c = 0, d = b.length; c < d; c++) a.append(b[c].inserter), b[c].buttons && b[c].buttons.length && this._draw(b[c].collection, b[c].buttons)
		},
		_expandButton: function (b, c, e, f) {
			for (var g = this.s.dt, h = 0, i = a.isArray(c) ? c : [c], j = 0, k = i.length; j < k; j++) {
				var l = this._resolveExtends(i[j]);
				if (l)
					if (a.isArray(l)) this._expandButton(b, l, e, f);
					else {
						var m = this._buildButton(l, e);
						if (m) {
							if (f !== d ? (b.splice(f, 0, m), f++) : b.push(m), m.conf.buttons) {
								var n = this.c.dom.collection;
								m.collection = a("<" + n.tag + "/>").addClass(n.className), m.conf._collection = m.collection, this._expandButton(m.buttons, m.conf.buttons, !0, f)
							}
							l.init && l.init.call(g.button(m.node), g, a(m.node), l), h++
						}
					}
			}
		},
		_buildButton: function (b, c) {
			var d = this.c.dom.button,
				e = this.c.dom.buttonLiner,
				f = this.c.dom.collection,
				h = this.s.dt,
				i = function (a) {
					return "function" == typeof a ? a(h, k, b) : a
				};
			if (c && f.button && (d = f.button), c && f.buttonLiner && (e = f.buttonLiner), b.available && !b.available(h, b)) return !1;
			var j = function (b, c, d, e) {
					e.action.call(c.button(d), b, c, d, e), a(c.table().node()).triggerHandler("buttons-action.dt", [c.button(d), c, d, e])
				},
				k = a("<" + d.tag + "/>").addClass(d.className).attr("tabindex", this.s.dt.settings()[0].iTabIndex).attr("aria-controls", this.s.dt.table().node().id).on("click.dtb", function (a) {
					a.preventDefault(), !k.hasClass(d.disabled) && b.action && j(a, h, k, b), k.blur()
				}).on("keyup.dtb", function (a) {
					13 === a.keyCode && !k.hasClass(d.disabled) && b.action && j(a, h, k, b)
				});
			if ("a" === d.tag.toLowerCase() && k.attr("href", "#"), e.tag) {
				var l = a("<" + e.tag + "/>").html(i(b.text)).addClass(e.className);
				"a" === e.tag.toLowerCase() && l.attr("href", "#"), k.append(l)
			} else k.html(i(b.text));
			b.enabled === !1 && k.addClass(d.disabled), b.className && k.addClass(b.className), b.titleAttr && k.attr("title", b.titleAttr), b.namespace || (b.namespace = ".dt-button-" + g++);
			var m, n = this.c.dom.buttonContainer;
			return m = n && n.tag ? a("<" + n.tag + "/>").addClass(n.className).append(k) : k, this._addKey(b), {
				conf: b,
				node: k.get(0),
				inserter: m,
				buttons: [],
				inCollection: c,
				collection: null
			}
		},
		_nodeToButton: function (a, b) {
			b || (b = this.s.buttons);
			for (var c = 0, d = b.length; c < d; c++) {
				if (b[c].node === a) return b[c];
				if (b[c].buttons.length) {
					var e = this._nodeToButton(a, b[c].buttons);
					if (e) return e
				}
			}
		},
		_nodeToHost: function (a, b) {
			b || (b = this.s.buttons);
			for (var c = 0, d = b.length; c < d; c++) {
				if (b[c].node === a) return b;
				if (b[c].buttons.length) {
					var e = this._nodeToHost(a, b[c].buttons);
					if (e) return e
				}
			}
		},
		_keypress: function (b, c) {
			var d = function (d, e) {
					if (d.key)
						if (d.key === b) a(e).click();
						else if (a.isPlainObject(d.key)) {
						if (d.key.key !== b) return;
						if (d.key.shiftKey && !c.shiftKey) return;
						if (d.key.altKey && !c.altKey) return;
						if (d.key.ctrlKey && !c.ctrlKey) return;
						if (d.key.metaKey && !c.metaKey) return;
						a(e).click()
					}
				},
				e = function (a) {
					for (var b = 0, c = a.length; b < c; b++) d(a[b].conf, a[b].node), a[b].buttons.length && e(a[b].buttons)
				};
			e(this.s.buttons)
		},
		_removeKey: function (b) {
			if (b.key) {
				var c = a.isPlainObject(b.key) ? b.key.key : b.key,
					d = this.s.listenKeys.split(""),
					e = a.inArray(c, d);
				d.splice(e, 1), this.s.listenKeys = d.join("")
			}
		},
		_resolveExtends: function (b) {
			var c, e, f = this.s.dt,
				g = function (c) {
					for (var e = 0; !a.isPlainObject(c) && !a.isArray(c);) {
						if (c === d) return;
						if ("function" == typeof c) {
							if (c = c(f, b), !c) return !1
						} else if ("string" == typeof c) {
							if (!h[c]) throw "Unknown button type: " + c;
							c = h[c]
						}
						if (e++, e > 30) throw "Buttons: Too many iterations"
					}
					return a.isArray(c) ? c : a.extend({}, c)
				};
			for (b = g(b); b && b.extend;) {
				if (!h[b.extend]) throw "Cannot extend unknown button type: " + b.extend;
				var i = g(h[b.extend]);
				if (a.isArray(i)) return i;
				if (!i) return !1;
				var j = i.className;
				b = a.extend({}, i, b), j && b.className !== j && (b.className = j + " " + b.className);
				var k = b.postfixButtons;
				if (k) {
					for (b.buttons || (b.buttons = []), c = 0, e = k.length; c < e; c++) b.buttons.push(k[c]);
					b.postfixButtons = null
				}
				var l = b.prefixButtons;
				if (l) {
					for (b.buttons || (b.buttons = []), c = 0, e = l.length; c < e; c++) b.buttons.splice(c, 0, l[c]);
					b.prefixButtons = null
				}
				b.extend = i.extend
			}
			return b
		}
	}), i.background = function (b, c, e) {
		e === d && (e = 400), b ? a("<div/>").addClass(c).css("display", "none").appendTo("body").fadeIn(e) : a("body > div." + c).fadeOut(e, function () {
			a(this).removeClass(c).remove()
		})
	}, i.instanceSelector = function (b, c) {
		if (!b) return a.map(c, function (a) {
			return a.inst
		});
		var d = [],
			e = a.map(c, function (a) {
				return a.name
			}),
			f = function (b) {
				if (a.isArray(b))
					for (var g = 0, h = b.length; g < h; g++) f(b[g]);
				else if ("string" == typeof b)
					if (b.indexOf(",") !== -1) f(b.split(","));
					else {
						var i = a.inArray(a.trim(b), e);
						i !== -1 && d.push(c[i].inst)
					}
				else "number" == typeof b && d.push(c[b].inst)
			};
		return f(b), d
	}, i.buttonSelector = function (b, c) {
		for (var e = [], f = function (a, b, c) {
				for (var e, g, h = 0, i = b.length; h < i; h++) e = b[h], e && (g = c !== d ? c + h : h + "", a.push({
					node: e.node,
					name: e.conf.name,
					idx: g
				}), e.buttons && f(a, e.buttons, g + "-"))
			}, g = function (b, c) {
				var h, i, j = [];
				f(j, c.s.buttons);
				var k = a.map(j, function (a) {
					return a.node
				});
				if (a.isArray(b) || b instanceof a)
					for (h = 0, i = b.length; h < i; h++) g(b[h], c);
				else if (null === b || b === d || "*" === b)
					for (h = 0, i = j.length; h < i; h++) e.push({
						inst: c,
						node: j[h].node
					});
				else if ("number" == typeof b) e.push({
					inst: c,
					node: c.s.buttons[b].node
				});
				else if ("string" == typeof b)
					if (b.indexOf(",") !== -1) {
						var l = b.split(",");
						for (h = 0, i = l.length; h < i; h++) g(a.trim(l[h]), c)
					} else if (b.match(/^\d+(\-\d+)*$/)) {
					var m = a.map(j, function (a) {
						return a.idx
					});
					e.push({
						inst: c,
						node: j[a.inArray(b, m)].node
					})
				} else if (b.indexOf(":name") !== -1) {
					var n = b.replace(":name", "");
					for (h = 0, i = j.length; h < i; h++) j[h].name === n && e.push({
						inst: c,
						node: j[h].node
					})
				} else a(k).filter(b).each(function () {
					e.push({
						inst: c,
						node: this
					})
				});
				else if ("object" == typeof b && b.nodeName) {
					var o = a.inArray(b, k);
					o !== -1 && e.push({
						inst: c,
						node: k[o]
					})
				}
			}, h = 0, i = b.length; h < i; h++) {
			var j = b[h];
			g(c, j)
		}
		return e
	}, i.defaults = {
		buttons: ["copy", "excel", "csv", "pdf", "print"],
		name: "main",
		tabIndex: 0,
		dom: {
			container: {
				tag: "div",
				className: "dt-buttons"
			},
			collection: {
				tag: "div",
				className: "dt-button-collection"
			},
			button: {
				tag: "a",
				className: "dt-button",
				active: "active",
				disabled: "disabled"
			},
			buttonLiner: {
				tag: "span",
				className: ""
			}
		}
	}, i.version = "1.2.4", a.extend(h, {
		collection: {
			text: function (a) {
				return a.i18n("buttons.collection", "Collection")
			},
			className: "buttons-collection",
			action: function (c, d, e, f) {
				var g = e,
					h = g.offset(),
					j = a(d.table().container()),
					k = !1;
				a("div.dt-button-background").length && (k = a(".dt-button-collection").offset(), a("body").trigger("click.dtb-collection")), f._collection.addClass(f.collectionLayout).css("display", "none").appendTo("body").fadeIn(f.fade);
				var l = f._collection.css("position");
				if (k && "absolute" === l) f._collection.css({
					top: k.top,
					left: k.left
				});
				else if ("absolute" === l) {
					f._collection.css({
						top: h.top + g.outerHeight(),
						left: h.left
					});
					var m = h.left + f._collection.outerWidth(),
						n = j.offset().left + j.width();
					m > n && f._collection.css("left", h.left - (m - n))
				} else {
					var o = f._collection.height() / 2;
					o > a(b).height() / 2 && (o = a(b).height() / 2), f._collection.css("marginTop", o * -1)
				}
				f.background && i.background(!0, f.backgroundClassName, f.fade), setTimeout(function () {
					a("div.dt-button-background").on("click.dtb-collection", function () {}), a("body").on("click.dtb-collection", function (b) {
						var c = a.fn.addBack ? "addBack" : "andSelf";
						a(b.target).parents()[c]().filter(f._collection).length || (f._collection.fadeOut(f.fade, function () {
							f._collection.detach()
						}), a("div.dt-button-background").off("click.dtb-collection"), i.background(!1, f.backgroundClassName, f.fade), a("body").off("click.dtb-collection"), d.off("buttons-action.b-internal"))
					})
				}, 10), f.autoClose && d.on("buttons-action.b-internal", function () {
					a("div.dt-button-background").click()
				})
			},
			background: !0,
			collectionLayout: "",
			backgroundClassName: "dt-button-background",
			autoClose: !1,
			fade: 400
		},
		copy: function (a, b) {
			return h.copyHtml5 ? "copyHtml5" : h.copyFlash && h.copyFlash.available(a, b) ? "copyFlash" : void 0
		},
		csv: function (a, b) {
			return h.csvHtml5 && h.csvHtml5.available(a, b) ? "csvHtml5" : h.csvFlash && h.csvFlash.available(a, b) ? "csvFlash" : void 0
		},
		excel: function (a, b) {
			return h.excelHtml5 && h.excelHtml5.available(a, b) ? "excelHtml5" : h.excelFlash && h.excelFlash.available(a, b) ? "excelFlash" : void 0
		},
		pdf: function (a, b) {
			return h.pdfHtml5 && h.pdfHtml5.available(a, b) ? "pdfHtml5" : h.pdfFlash && h.pdfFlash.available(a, b) ? "pdfFlash" : void 0
		},
		pageLength: function (b) {
			var c = b.settings()[0].aLengthMenu,
				d = a.isArray(c[0]) ? c[0] : c,
				e = a.isArray(c[0]) ? c[1] : c,
				f = function (a) {
					return a.i18n("buttons.pageLength", {
						"-1": "Show all rows",
						                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                